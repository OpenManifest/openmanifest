{"version":3,"sources":["components/NoResults.tsx","screens/authenticated/users/UsersScreen.tsx"],"names":["NoResults","title","subtitle","style","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_DROPZONE_USERS","gql","UsersScreen","global","useAppSelector","state","screens","users","dispatch","useAppDispatch","useQuery","variables","dropzoneId","Number","currentDropzone","id","search","searchText","data","loading","navigation","useNavigation","isFocused","useRoute","useIsFocused","React","isSearchVisible","actions","setSearchVisible","indeterminate","color","theme","colors","accent","visible","contentContainerStyle","paddingHorizontal","dropzone","dropzoneUsers","edges","length","map","edge","key","node","Item","user","name","description","role","left","image","Image","source","uri","alignSelf","marginHorizontal","size","Icon","icon","onPress","navigate","userId","fontSize","fontWeight","separator","marginVertical"],"mappings":"uFAAA,8EAKe,SAASA,EAAT,GAA6E,IAAxDC,EAAuD,EAAvDA,MAAOC,EAAgD,EAAhDA,SACzC,OACE,gBAAC,IAAD,CAAMC,MAAOC,EAAOC,OAClB,gBAAC,IAAD,KAAQJ,GACR,gBAAC,IAAD,CAAWE,MAAO,CAAEG,UAAW,WAC5BJ,IAOT,IAAME,EAASG,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,EACNC,QAAS,EACTC,QAAS,QAEXC,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,GAEVZ,MAAO,CACLK,KAAM,EACNQ,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,W,iMCpBNC,EAAuBC,YAAH,kdAiCX,SAASC,IAAe,IAAD,cAC9BC,EAASC,aAAe,SAAAC,GAAK,OAAIA,EAAMF,UACvCE,EAAQD,aAAe,SAAAC,GAAK,OAAIA,EAAMC,QAAQC,SAC9CC,EAAWC,cAEjB,EAA0BC,mBAAgBV,EAAsB,CAC9DW,UAAW,CACTC,WAAYC,OAAM,SAACV,EAAOW,sBAAR,EAAC,EAAwBC,IAC3CC,OAAQX,EAAMY,cAHVC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAORC,EAAaC,0BAGbC,GAFQC,qBAEIC,0BAUlB,OATAC,aAAgB,WACVpB,EAAMqB,iBACRlB,EAASmB,IAAQrB,QAAQC,MAAMqB,kBAAiB,MAGjD,CAACN,IAKF,gCACA,gBAAC,IAAD,CAAaO,eAAa,EAACC,MAAO3B,EAAO4B,MAAMC,OAAOC,OAAQC,QAASf,IACrE,gBAAC,IAAD,CAAkBgB,sBAAuB,CAAEC,kBAAmB,MAE1D,MAAClB,GAAD,SAACA,EAAMmB,WAAP,SAAC,EAAgBC,gBAAjB,SAAC,EAA+BC,QAA/B,EAAsCC,SACvC,gBAAC,IAAD,CAAW7D,MAAM,WAAWC,SAAS,KAHzC,MAMIsC,GANJ,SAMIA,EAAMmB,WANV,SAMI,EAAgBC,gBANpB,SAMI,EAA+BC,YANnC,EAMI,EAAsCE,KAAI,SAACC,GAAD,mBAC1C,gBAAC,WAAD,CAAgBC,IAAG,eAAUD,GAAV,SAAUA,EAAME,WAAhB,EAAU,EAAY7B,KACvC,gBAAC,IAAK8B,KAAN,CACEhE,MAAO,CAAEiB,MAAO,QAChBnB,MAAK,MAAE+D,GAAF,SAAEA,EAAME,WAAR,EAAE,EAAYE,KAAKC,KACxBC,YAAW,MAAEN,GAAF,SAAEA,EAAME,OAAR,SAAE,EAAYK,WAAd,EAAE,EAAkBF,KAC/BG,KAAM,4BACJ,MAACR,GAAD,SAACA,EAAME,OAAP,SAAC,EAAYE,OAAZ,EAAkBK,MAEf,gBAAC,IAAOC,MAAR,CAAcC,OAAQ,CAAEC,IAAG,MAAEZ,GAAF,SAAEA,EAAME,WAAR,EAAE,EAAYE,KAAKK,OAAStE,MAAO,CAAE0E,UAAW,SAAUC,iBAAkB,IAAMC,KAAM,KADnH,gBAAC,IAAKC,KAAN,CAAWC,KAAK,aAGtBC,QAAS,wBAAMxC,EAAWyC,SAAS,oBAAqB,CAAEC,OAAM,MAAEpB,GAAF,SAAEA,EAAME,WAAR,EAAE,EAAY7B,QAEhF,gBAAC,IAAD,CAASlC,MAAO,CAAEiB,MAAO,QAAU6C,IAAG,kBAAaD,OAAb,EAAaA,EAAME,KAAM7B,YAS5D9B,IAAWC,OAAO,CAC/BC,UAAW,CACTC,KAAM,GAERG,IAAK,CACHC,SAAU,WACVC,OAAQ,GACRC,MAAO,EACPC,OAAQ,GAEVhB,MAAO,CACLoF,SAAU,GACVC,WAAY,QAEdC,UAAW,CACTC,eAAgB,GAChBnE,OAAQ,EACRD,MAAO","file":"static/js/28.84a59994.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Avatar, Divider, List, ProgressBar } from 'react-native-paper';\n\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { Query } from '../../../graphql/schema';\nimport { actions,  useAppDispatch, useAppSelector } from '../../../redux';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUsersRouteParams{\n  key: string,\n  name: string,\n}\nexport default function UsersScreen() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.screens.users);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzone?.id),\n      search: state.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n  const route = useRoute<IUsersRouteParams>();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (state.isSearchVisible) {\n      dispatch(actions.screens.users.setSearchVisible(false));\n    }\n\n  }, [isFocused]);\n\n\n\n  return (\n    <>\n    <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n      <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 0 }}>\n        \n        { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n          <NoResults title=\"No users\" subtitle=\"\" />\n        )}\n\n        { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n          <React.Fragment key={`user-${edge?.node?.id}`}>\n            <List.Item\n              style={{ width: \"100%\"}}\n              title={edge?.node?.user.name}\n              description={edge?.node?.role?.name}\n              left={() =>\n                !edge?.node?.user?.image\n                  ? <List.Icon icon=\"account\" />\n                  : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n              }\n              onPress={() => navigation.navigate(\"UserProfileScreen\", { userId: edge?.node?.id })}\n            />\n            <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n          </React.Fragment>\n        )}\n\n      </ScrollableScreen>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}