{"version":3,"sources":["components/input/date_picker/DatePicker.web.tsx","components/forms/rig_inspection_template/RigInspectionItem.tsx","components/forms/rig_inspection/RigInspectionForm.tsx","screens/authenticated/rig/RigInspectionScreen.tsx"],"names":["DatePicker","props","React","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","onPress","disabled","title","label","description","timestamp","format","left","Icon","icon","selectedDays","Date","onDayClick","RigInspectionItem","canInspect","useRestriction","Permission","ActAsRigInspector","config","valueType","style","flex","mode","marginVertical","value","onChangeText","text","type","right","Android","status","keyboardType","Number","time","toString","RigInspectionForm","state","useAppSelector","forms","rigInspection","dispatch","useAppDispatch","fields","map","item","index","actions","setField","QUERY_RIG_INSPECTIONS","gql","MUTATION_CREATE_RIG_INSPECTION","RigInspectionScreen","currentDropzone","useCurrentDropzone","useRoute","params","rig","dropzoneUserId","useQuery","variables","dropzoneId","dropzone","id","data","refetch","loading","isFocused","useIsFocused","useMutation","mutationCreateRigInspection","mutation","navigation","useNavigation","dropzoneUser","rigInspections","some","inspection","definition","find","setFields","setOk","isOk","rigInspectionTemplate","JSON","stringify","createRigInspection","a","async","rigId","ok","notifications","showSnackbar","message","variant","reset","goBack","ScrollableScreen","Card","width","Title","Content","make","model","serial","repackExpiresAt","name","Divider","Checkbox","Actions","Button"],"mappings":"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","file":"static/js/22.c27df86f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Checkbox, HelperText, List, TextInput } from \"react-native-paper\";\nimport { Permission } from \"../../../graphql/schema.d\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport { FieldItem } from \"./slice\";\n\ninterface IFormItemItem {\n  value: string | number | boolean;\n  onChange(value: FieldItem): void;\n  config: FieldItem;\n}\n\nexport default function RigInspectionItem(props: IFormItemItem) {\n  const canInspect = useRestriction(Permission.ActAsRigInspector);\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          mode=\"outlined\"\n          disabled={!canInspect}\n          style={{ marginVertical: 8 }}\n          value={props.value as string}\n          onChangeText={(text) => props.onChange({ ...props.config, value: text})}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <List.Item\n        title={props.config.label || \"\"}\n        disabled={!canInspect}\n        description={props.config.description}\n        style={{ marginVertical: 8 }}\n        right={() =>\n          <Checkbox.Android\n            status={\n              !!props.value\n                ? \"checked\"\n                : \"unchecked\"\n            }\n          />\n        }\n        onPress={\n          () => props.onChange({ ...props.config, value: !props.value as boolean})\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          disabled={!canInspect}\n          value={props.value as string}\n          mode=\"outlined\"\n          onChangeText={(text) => props.onChange({ ...props.config, value: text as string })}\n          label={props.config.label || \"\"}\n          keyboardType=\"number-pad\"\n          style={{ marginVertical: 8 }}\n\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <DatePicker\n          disabled={!canInspect}\n          timestamp={Number(props.value)}\n          onChange={(time) => props.onChange({ ...props.config, value: time.toString() as string })}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  }\n  \n  return null;\n}","import * as React from 'react';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport RigInspectionItem from '../rig_inspection_template/RigInspectionItem';\n\n\n\nexport default function RigInspectionForm() {\n  const state = useAppSelector(state => state.forms.rigInspection);\n  const dispatch = useAppDispatch();\n  \n  return ( \n    <>\n      {\n        state.fields.map((item, index) => {\n          return (\n            <RigInspectionItem\n              config={item}\n              value={item?.value || \"\"}\n              onChange={(value) =>\n                dispatch(\n                  actions.forms.rigInspection.setField([index, value])\n                )\n              }\n            />\n          )\n        })\n      }\n    </>\n  );\n}\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { format } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card, Checkbox, Divider, List } from 'react-native-paper';\nimport RigInspectionForm from \"../../../components/forms/rig_inspection/RigInspectionForm\";\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport { Mutation, Query, Rig, Permission } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\n\nconst QUERY_RIG_INSPECTIONS = gql`\n  query RigInspections($dropzoneUserId: Int!, $dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n\n      rigInspectionTemplate {\n        id\n        name\n        definition\n      }\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        rigInspections {\n          id\n          isOk\n          definition\n          rig {\n            id\n          }\n          inspectedBy {\n            id\n            name\n          }\n          formTemplate {\n            id\n            name\n            definition\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_CREATE_RIG_INSPECTION = gql`\n  mutation CreateRigInspection(\n    $dropzoneId: Int,\n    $rigId: Int,\n    $isOk: Boolean,\n    $definition: String,\n  ) {\n    createRigInspection(input: {\n      attributes: {\n        dropzoneId: $dropzoneId,\n        rigId: $rigId,\n        isOk: $isOk,\n        definition: $definition,\n      }\n    }) {\n      rigInspection {\n        id\n        isOk\n        definition\n        inspectedBy {\n          id\n          name\n        }\n        rig {\n          id\n        }\n        \n        formTemplate {\n          id\n          definition\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function RigInspectionScreen() {\n  const state = useAppSelector(state => state.forms.rigInspection);\n  const currentDropzone = useCurrentDropzone();\n  const dispatch = useAppDispatch();\n  \n  const route = useRoute<{ key: string, name: string, params: { rig: Rig, dropzoneUserId: number }}>();\n  const { rig, dropzoneUserId } = route.params;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_RIG_INSPECTIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n      dropzoneUserId: dropzoneUserId,\n    }\n  });\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    refetch();\n  }, [isFocused])\n\n  const canInspect = useRestriction(Permission.ActAsRigInspector);\n  const [mutationCreateRigInspection, mutation] = useMutation<Mutation>(MUTATION_CREATE_RIG_INSPECTION);\n  const navigation = useNavigation();\n  React.useEffect(() => {\n\n    const hasExistingRigInspection = data?.dropzone?.dropzoneUser?.rigInspections?.some((inspection) => inspection.rig?.id.toString() === rig.id.toString() && inspection.definition);\n\n    if (hasExistingRigInspection) {\n      const inspection = data?.dropzone?.dropzoneUser?.rigInspections?.find((inspection) => inspection.rig?.id === rig.id);\n      \n      dispatch(\n        actions.forms.rigInspection.setFields(\n          inspection!.definition || \"\"\n        )\n      );\n\n      dispatch(\n        actions.forms.rigInspection.setOk(\n          inspection!.isOk\n        )\n      );\n    } else {\n      dispatch(\n        actions.forms.rigInspection.setFields(\n          data?.dropzone.rigInspectionTemplate?.definition!,\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.dropzoneUser?.rigInspections), data?.dropzone?.rigInspectionTemplate?.definition]);\n\n  const createRigInspection = React.useCallback(async () => {\n    try {\n      const result = await mutationCreateRigInspection({\n        variables: {\n          dropzoneId: Number(currentDropzone?.dropzone?.id),\n          rigId: Number(rig.id),\n          definition: JSON.stringify(state.fields),\n          isOk: !!state.ok,\n        }\n      });\n\n      dispatch(\n        actions.notifications.showSnackbar({ message: \"Rig inspection saved\", variant: \"success\" })\n      );\n      dispatch(actions.forms.rigInspection.reset());\n      navigation.goBack();\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(state.fields), state.ok, currentDropzone?.dropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n      <Card style={{ width: \"100%\", marginVertical: 16 }}>\n        <Card.Title title=\"Rig\" />\n        <Card.Content>\n          <List.Item\n            title=\"Make\"\n            description={rig.make}\n          />\n          <List.Item\n            title=\"Model\"\n            description={rig.model}\n          />\n          <List.Item\n            title=\"Serial\"\n            description={rig.serial}\n          />\n          <List.Item\n            title=\"Repack due\"\n            description={\n              rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"\n            }\n          />\n        </Card.Content>\n      </Card>\n\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title={data?.dropzone?.rigInspectionTemplate?.name} />\n\n        <Card.Content>\n          <RigInspectionForm />\n\n          <Divider />\n          <Checkbox.Item\n            mode=\"android\"\n            label=\"This rig is OK to jump\"\n            onPress={() => dispatch(actions.forms.rigInspection.setOk(!state.ok))}\n            status={state.ok ? \"checked\" : \"unchecked\"}\n          />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button\n            disabled={!canInspect || JSON.stringify(state.fields) === data?.dropzone?.rigInspectionTemplate?.definition}\n            mode=\"contained\"\n            onPress={() => createRigInspection()}\n            loading={mutation.loading}\n            style={{ width: \"100%\"}}\n          >\n            Mark as inspected\n          </Button>\n        </Card.Actions>\n      </Card>\n    </ScrollableScreen>\n  );\n}\n\n"],"sourceRoot":""}