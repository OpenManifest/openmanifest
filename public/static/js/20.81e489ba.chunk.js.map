{"version":3,"sources":["components/forms/user/UserForm.tsx","screens/authenticated/profile/UpdateUserScreen.tsx"],"names":["SlotForm","state","useAppSelector","forms","user","dispatch","useAppDispatch","React","original","fields","exitWeight","value","actions","setField","rigs","id","style","styles","field","mode","label","error","name","toString","onChangeText","newValue","type","email","phone","keyboardType","right","Affix","text","width","license","federation","onSelect","setFederation","required","federationId","Number","StyleSheet","create","flex","paddingTop","marginBottom","ticketAddons","MUTATION_CREATE_USER","gql","UpdateUserScreen","global","navigation","useNavigation","useRoute","params","setOpen","useMutation","mutationUpdateUser","data","validate","hasError","emailRegex","RegExp","length","setFieldError","test","JSON","stringify","onSave","a","async","variables","licenseId","parseFloat","result","updateUser","fieldErrors","errors","map","message","notifications","showSnackbar","variant","goBack","reset","contentContainerStyle","paddingHorizontal","disabled","loading","onPress","container","alignItems","title","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/20.81e489ba.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Divider } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport LicenseChipSelect from '../../input/chip_select/LicenseChipSelect';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.user.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.forms.user.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      <View style={{ width: \"100%\"}}>\n        <FederationSelect\n          value={state?.fields?.license?.value?.federation || state.federation.value}\n          onSelect={(value) => dispatch(actions.forms.user.setFederation(value))}\n          required\n        />\n\n        <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n          { state.federation.error || \"\" }\n        </HelperText>\n\n        { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n          <>\n            <LicenseChipSelect\n              value={state.fields.license.value}\n              federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n              onSelect={(value) => dispatch(actions.forms.user.setField([\"license\", value]))}\n              required\n            />\n            <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n              { state.fields.license.error || \"\" }\n            </HelperText>\n          </>\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\n\nimport { Mutation, User } from '../../../graphql/schema';\nimport UserForm from '../../../components/forms/user/UserForm';\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\n\nconst MUTATION_CREATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        phone: $phone,\n        email: $email,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdateUserScreen() {\n  const state = useAppSelector(state => state.forms.user);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { user: User }}>();\n  const user = route.params!.user;\n\n  React.useEffect(() => {\n    dispatch(actions.forms.user.setOpen(user));\n  }, [user?.id]);\n\n  const [mutationUpdateUser, data] = useMutation<Mutation>(MUTATION_CREATE_USER);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            licenseId: !license.value?.id ? null : Number(license.value!.id),\n            phone: phone.value,\n            exitWeight: parseFloat(exitWeight.value!),\n            email: email.value,\n          }\n        });\n        \n        if (result.data?.updateUser?.user) {\n          const { fieldErrors, errors } = result.data.updateUser;\n\n          if (fieldErrors) {\n            fieldErrors?.map(({ field, message }) => {\n              switch (field) {\n                case \"name\":\n                  return dispatch(actions.forms.user.setFieldError([\"name\", message]));\n                case \"exit_weight\":\n                  return dispatch(actions.forms.user.setFieldError([\"exitWeight\", message]));\n                case \"license_id\":\n                  return dispatch(actions.forms.user.setFieldError([\"license\", message]));\n                case \"phone\":\n                  return dispatch(actions.forms.user.setFieldError([\"phone\", message]));\n                case \"email\":\n                  return dispatch(actions.forms.user.setFieldError([\"email\", message]));\n              }\n            });\n          } else if (errors?.length) {\n            errors.map((message) =>\n              dispatch(\n                actions.notifications.showSnackbar({ message: message, variant: \"error\" })\n              )\n            );\n          } else {\n            dispatch(\n              actions.notifications.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n            );\n            navigation.goBack();\n            dispatch(actions.forms.user.reset());\n          }\n\n        }\n      } catch (error) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <UserForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    paddingTop: 56,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}