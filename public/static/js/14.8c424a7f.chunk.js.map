{"version":3,"sources":["DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","components/layout/DialogOrSheet.web.tsx","components/layout/SwipeActions.tsx","components/forms/ticket_type/TicketTypeForm.tsx","components/dialogs/TicketType.tsx","screens/authenticated/ticket_types/TicketTypesScreen.tsx"],"names":["DataTableCell","rest","style","styles","numeric","numberOfLines","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent","DataTableHeader","borderBottomColor","color","theme","header","height","paddingHorizontal","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","content","pointerEvents","DataTable","width","DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","colors","accent","Title","Content","ScrollArea","Actions","onClose","create","button","borderRadius","padding","contentContainer","paddingBottom","sheet","elevation","backgroundColor","flexGrow","display","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","SwipeActions","rightAction","ref","enabled","renderRightActions","progress","dragX","scale","interpolate","translateX","close","View","Text","useNativeAnimations","QUERY_EXTRAS","gql","TicketTypeForm","forms","ticketType","dispatch","useAppDispatch","currentDropzone","useCurrentDropzone","altitudeMenuOpen","setAltitudeMenuOpen","useQuery","variables","dropzoneId","Number","dropzone","id","data","refetch","TextInput","field","mode","error","fields","value","onChangeText","newValue","actions","setField","HelperText","type","cost","toString","Menu","onDismiss","position","left","anchor","Item","altitude","includes","Icon","Checkbox","status","isTandem","allowManifestingSelf","Divider","Subheader","extras","map","extra","key","filter","marginBottom","MUTATION_CREATE_TICKET_TYPE","MUTATION_UPDATE_TICKET_TYPE","TicketTypeDialog","useMutation","mutationCreateTicketType","mutationUpdateTicketType","update","isFocused","useIsFocused","reset","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","mutation","original","extraIds","result","payload","updateTicketType","createTicketType","fieldErrors","message","errors","notifications","showSnackbar","variant","QUERY_TICKET_TYPE","MUTATION_DELETE_TICKET_TYPE","TicketTypesScreen","form","currentDropzoneId","route","useRoute","mutationDeleteTicketType","canCreateTicketTypes","useRestriction","Permission","CreateTicketType","ScrollableScreen","contentContainerStyle","refreshControl","RefreshControl","refreshing","onRefresh","ProgressBar","Header","ticketTypes","deleteTicketType","Row","setOpen","Cell","Switch","onValueChange","FAB","fab","small","margin","bottom","empty"],"mappings":"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","file":"static/js/14.8c424a7f.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\n\nexport interface ISwipeAction {\n  label: string;\n  \n  backgroundColor?: string;\n  onPress(): void;\n}\nexport interface ISwipeActions {\n  rightAction?: ISwipeAction;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport default function SwipeActions(props: ISwipeActions) {\n  const { children, rightAction, disabled } = props;\n\n  const ref = React.useRef<any>();\n  const rightActions = (progress: Animated.AnimatedInterpolation, dragX: Animated.AnimatedInterpolation) => {\n    const scale = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1.0, 0]\n    })\n\n    const translateX = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [0, 10]\n    });\n\n    return (\n        <TouchableOpacity\n          onPress={() => {\n            rightAction?.onPress();\n            ref?.current?.close();\n          }}\n        >\n          <Animated.View\n            style={{\n              flexGrow: 1,\n              backgroundColor: rightAction?.backgroundColor,\n              justifyContent: 'center',\n              height: \"100%\",\n              width: 75,\n              transform: [{ translateX }]\n            }}>\n            <Animated.Text\n              style={{\n                color: 'white',\n                paddingHorizontal: 10,\n                fontWeight: '600',\n                transform: [{ scale }]\n              }}>\n              {rightAction?.label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableOpacity>\n    )\n   }\n  return (\n    <Swipeable ref={ref} enabled={!disabled} renderRightActions={rightActions} useNativeAnimations>\n      { children }\n    </Swipeable>\n  )\n}","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Menu, List, Divider } from 'react-native-paper';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport { Query } from '../../../graphql/schema';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nconst QUERY_EXTRAS = gql`\n  query QueryExtras(\n    $dropzoneId: Int!\n  ) {\n    extras(dropzoneId: $dropzoneId) {\n      id\n      cost\n      name\n\n      ticketTypes {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function TicketTypeForm() {\n  const state = useAppSelector(state => state.forms.ticketType);\n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_EXTRAS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"Name of the ticket users will see\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"Base cost without extra ticket addons\" }\n      </HelperText>\n      <View style={{ width: \"100%\" }}>\n\n      <Menu\n        onDismiss={() => setAltitudeMenuOpen(false)}\n        visible={altitudeMenuOpen}\n\n        style={{position:'absolute',right:'10%',left:'10%', flex: 1 }}\n        anchor={\n          <List.Item\n            onPress={() => {\n              setAltitudeMenuOpen(true);\n            }}\n            title={\n              state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"Height\",\n                  \"4000\": \"Hop n Pop\",\n                }[state.fields.altitude.value.toString()] :\n                \"Custom\"\n            }\n            style={{ width: \"100%\", flex: 1 }}\n            right={ () =>\n              <List.Icon icon={state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                {\n                  \"14000\": \"airplane\",\n                  \"4000\": \"parachute\",\n                }[state.fields.altitude.value.toString()] as string :\n                \"pencil-plus\" \n              } />\n            }\n          />\n        }>\n          <List.Item\n            onPress={() => {\n              dispatch(actions.forms.ticketType.setField([\"altitude\", 4000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Hop n Pop\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.forms.ticketType.setField([\"altitude\", 14000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Height\"\n            right={() => <List.Icon icon=\"airplane-takeoff\" />}\n          />\n          <List.Item\n            onPress={() => {\n              dispatch(actions.forms.ticketType.setField([\"altitude\", 7000]));\n              setAltitudeMenuOpen(false);\n            }}\n            title=\"Other\"\n            right={() => <List.Icon icon=\"parachute\" />}\n          />\n      </Menu>\n\n      {\n        (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Custom altitude\"\n            error={!!state.fields.altitude.error}\n            value={state.fields.altitude?.value?.toString()}\n            onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"altitude\", Number(newValue)]))}\n          />\n        )\n      }\n\n      <Checkbox.Item\n        label=\"Tandem\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.isTandem.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.forms.ticketType.setField([\"isTandem\", !state.fields.isTandem.value]))\n        }\n      />\n      <HelperText type={!!state.fields.isTandem.error ? \"error\" : \"info\"}>\n        { state.fields.isTandem.error || \"Allow also manifesting a passenger when using this ticket type\" }\n      </HelperText>\n\n      <Checkbox.Item\n        label=\"Public manifesting\"\n        style={{ width: \"100%\" }}\n        status={!!state.fields.allowManifestingSelf.value\n          ? \"checked\"\n          : \"unchecked\"\n        }\n        onPress={\n          () => dispatch(actions.forms.ticketType.setField([\"allowManifestingSelf\", !state.fields.allowManifestingSelf.value]))\n        }\n      />\n      \n      <HelperText type={!!state.fields.allowManifestingSelf.error ? \"error\" : \"info\"}>\n        { state.fields.allowManifestingSelf.error || \"Allow users to manifest themselves with this ticket\" }\n      </HelperText>\n\n      <Divider />\n      <List.Subheader>Enabled ticket add-ons</List.Subheader>\n      {\n        data?.extras.map((extra) =>\n          <Checkbox.Item\n            key={`extra-${extra.id}`}\n            label={extra.name!}\n            status={state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n              ? \"checked\"\n              : \"unchecked\"\n            }\n            onPress={\n              () => dispatch(\n                actions.forms.ticketType.setField([\n                  \"extras\",\n                  state.fields.extras.value?.map(({ id }) => id).includes(extra.id)\n                  ? state.fields.extras.value?.filter(({ id }) => id !== extra.id)\n                  : [...state.fields.extras.value!, extra]\n                ])\n              )\n            }\n          />\n        )\n      }\n\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { actions, useAppSelector, useAppDispatch } from '../../redux';\nimport { Mutation } from '../../graphql/schema';\nimport TicketTypeForm from '../../components/forms/ticket_type/TicketTypeForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport DialogOrSheet from '../layout/DialogOrSheet';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\ninterface ITicketTypeDialog {\n  open: boolean;\n  onClose(): void;\n}\n\nexport default function TicketTypeDialog(props: ITicketTypeDialog) {\n  const { open, onClose } = props;\n  const state = useAppSelector(state => state.forms.ticketType);\n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n\n  const [mutationCreateTicketType, create] = useMutation<Mutation>(MUTATION_CREATE_TICKET_TYPE);\n  const [mutationUpdateTicketType, update] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.forms.ticketType.reset());\n    }\n  }, [isFocused]);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (!state.fields.name.value || state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.ticketType.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.cost.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.forms.ticketType.setFieldError([\"cost\", \"Cost must be at least $1\"])\n      );\n    }\n\n    if (!state.fields.altitude.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.ticketType.setFieldError([\"altitude\", \"Altitude must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, allowManifestingSelf, altitude, extras, isTandem } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n\n        const mutation = state.original?.id\n          ? mutationUpdateTicketType\n          : mutationCreateTicketType;\n        \n        const result = await mutation({\n          variables: {\n            ...state.original?.id ? { id: Number(state.original?.id)} : { dropzoneId: Number(currentDropzone?.dropzone?.id) },\n            name: name.value,\n            cost: cost.value,\n            altitude: altitude.value,\n            allowManifestingSelf: allowManifestingSelf.value,\n            extraIds: extras?.value?.map(({ id }) => id),\n            isTandem: !!isTandem.value\n          }\n        });\n\n        const payload = state?.original?.id\n          ? result?.data?.updateTicketType\n          : result?.data?.createTicketType;\n        \n        if (payload?.fieldErrors) {\n          return payload?.fieldErrors?.map(({ field, message }) => {\n            switch (field) {\n              case \"name\":\n                return dispatch(actions.forms.ticketType.setFieldError([\"name\", message]));\n              case \"altitude\":\n                return dispatch(actions.forms.ticketType.setFieldError([\"altitude\", message]));\n              case \"cost\":\n                return dispatch(actions.forms.ticketType.setFieldError([\"cost\", message]));\n              case \"allow_manifesting_self\":\n                return dispatch(actions.forms.ticketType.setFieldError([\"allowManifestingSelf\", message]));\n              case \"extras\":\n                return dispatch(actions.forms.ticketType.setFieldError([\"extras\", message]));\n            }\n          });\n        }\n\n        if (payload?.errors?.length) {\n          onClose();\n          return dispatch(\n            actions.notifications.showSnackbar({\n              message: payload?.errors[0],\n              variant: \"error\"\n            })\n          );\n        }\n        \n        if (payload?.ticketType) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: `Saved`, variant: \"success\" })\n          );\n          dispatch(actions.forms.ticketType.reset());\n          onClose();\n        }\n      } catch (error) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateTicketType]);\n\n  return (\n    <DialogOrSheet\n      title={ state.original?.id ? \"Edit ticket\" : \"New ticket\"}\n      open={open}\n      onClose={() => {\n        onClose();\n      }}\n      loading={create.loading || update.loading}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n    >\n      <TicketTypeForm />\n    </DialogOrSheet>\n  );\n}","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, RefreshControl } from 'react-native';\nimport { FAB, DataTable, ProgressBar, Switch } from 'react-native-paper';\nimport { Mutation, Permission, Query } from \"../../../graphql/schema.d\";\n\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport TicketTypesDialog from '../../../components/dialogs/TicketType';\nimport SwipeActions from '../../../components/layout/SwipeActions';\nimport useRestriction from '../../../hooks/useRestriction';\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      ticketTypes {\n        id\n        cost\n        currency\n        name\n        altitude\n        allowManifestingSelf\n\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketTypePublic(\n    $id: Int!,\n    $allowManifestingSelf: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        allowManifestingSelf: $allowManifestingSelf\n      }\n    }) {\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        isTandem\n        extras {\n          id\n          name\n          cost\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nconst MUTATION_DELETE_TICKET_TYPE = gql`\n  mutation DeleteTicketType(\n    $id: Int!,\n  ){\n    deleteTicketType(input: {\n      id: $id\n    }) {\n      ticketType {\n        id\n        dropzone {\n          id\n          ticketTypes {\n            id\n            cost\n            currency\n            name\n            altitude\n            allowManifestingSelf\n\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n      errors\n    }\n  }\n`;\n\nexport default function TicketTypesScreen() {\n  const state = useAppSelector(state => state.global);\n  const form = useAppSelector(state => state.forms.ticketType);\n  const dispatch = useAppDispatch();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(state.currentDropzoneId)\n    }\n  });\n  const route = useRoute();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n  const [mutationUpdateTicketType, mutation] = useMutation<Mutation>(MUTATION_UPDATE_TICKET_TYPE);\n  const [mutationDeleteTicketType, mutationDelete] = useMutation<Mutation>(MUTATION_DELETE_TICKET_TYPE);\n  \n  React.useEffect(() => {\n    if (route.name === \"TicketTypesScreen\") {\n      refetch();\n    }\n  }, [route.name])\n\n  const canCreateTicketTypes = useRestriction(Permission.CreateTicketType);\n  return (\n      <ScrollableScreen style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Name</DataTable.Title>\n            <DataTable.Title numeric>Cost</DataTable.Title>\n            <DataTable.Title numeric>Altitude</DataTable.Title>\n            <DataTable.Title numeric>Public</DataTable.Title>\n          </DataTable.Header>\n\n          { data?.dropzone?.ticketTypes?.map((ticketType) =>\n          <SwipeActions\n            rightAction={{\n              label: \"Delete\",\n              backgroundColor: \"red\",\n              onPress: async () => {\n                const { data: result } = await mutationDeleteTicketType({ variables: { id: Number(ticketType.id) }});\n\n                if (result?.deleteTicketType?.errors?.length) {\n                  dispatch(\n                    actions.notifications.showSnackbar({\n                      message: result?.deleteTicketType?.errors[0],\n                      variant: \"error\"\n                    })\n                  );\n                }\n              }\n            }}\n          >\n            <DataTable.Row\n              onPress={() => {\n                dispatch(actions.forms.ticketType.setOpen(ticketType));\n              }}\n              pointerEvents=\"none\"\n            >\n              <DataTable.Cell>{ticketType.name}</DataTable.Cell>\n              <DataTable.Cell numeric>${ticketType.cost}</DataTable.Cell>\n              <DataTable.Cell numeric>\n                {ticketType.altitude}\n              </DataTable.Cell>\n              <DataTable.Cell numeric>\n                <Switch\n                  onValueChange={() => {\n                    mutationUpdateTicketType({\n                      variables: {\n                        id: Number(ticketType.id),\n                        allowManifestingSelf: !ticketType.allowManifestingSelf\n                      }\n                    })\n                  }}\n                  value={!!ticketType.allowManifestingSelf}\n                />\n              </DataTable.Cell>\n            </DataTable.Row>\n            </SwipeActions>\n            )}\n        </DataTable>\n        \n        <FAB\n          style={styles.fab}\n          small\n          visible={canCreateTicketTypes}\n          icon=\"plus\"\n          onPress={() => dispatch(actions.forms.ticketType.setOpen(true))}\n          label=\"New ticket type\"\n        />\n        <TicketTypesDialog\n          open={form.open}\n          onClose={() => dispatch(actions.forms.ticketType.setOpen(false))}\n        />\n      </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}