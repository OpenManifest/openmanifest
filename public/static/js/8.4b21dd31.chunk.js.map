{"version":3,"sources":["DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","Searchbar.tsx","ToggleButtonGroup.tsx","ToggleButton.tsx","ToggleButtonRow.tsx","index.ts","context.ts","internal.ts","MaterialCommunityIcon.tsx","TabsHeaderItem.tsx","TabsHeader.tsx","Swiper.tsx","Tabs.tsx","TabScreen.tsx","node_modules/date-fns/esm/differenceInMinutes/index.js","node_modules/date-fns/esm/isBefore/index.js"],"names":["DataTableCell","rest","style","styles","numeric","numberOfLines","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent","DataTableHeader","borderBottomColor","color","theme","header","height","paddingHorizontal","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","content","pointerEvents","DataTable","width","Searchbar","clearAccessibilityLabel","iconColor","searchAccessibilityLabel","root","input","focus","clear","setNativeProps","args","isFocused","blur","noop","fonts","colors","font","customIconColor","dark","rippleColor","borderRadius","elevation","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","accessibilityLabel","placeholder","placeholderTextColor","selectionColor","underlineColorAndroid","returnKeyType","keyboardAppearance","ref","value","clearIcon","alignSelf","textAlign","minWidth","ToggleButtonGroupContext","ToggleButtonGroup","children","onValueChange","ToggleButton","context","checked","status","backgroundColor","e","accessibilityState","selected","borderColor","margin","ToggleButtonRow","count","child","i","row","button","borderWidth","hairlineWidth","first","borderTopRightRadius","borderBottomRightRadius","middle","borderLeftWidth","last","borderTopLeftRadius","borderBottomLeftRadius","Object","Group","Row","TabsContext","goTo","index","useTabNavigation","useContext","getIndicatorStyle","num","scaleX","translateX","left","roundToTwo","Math","Number","MaterialCommunityIcons","require","isErrorLogged","test","console","selectable","AnimatedText","TabsHeaderItem","showTextLabel","Color","active","opacity","useAnimatedText","position","offset","activeColor","tabIndex","childrenCount","key","tab","mode","onLayout","onTabLayout","onPressIn","iconPosition","testID","accessibilityElementsHidden","importantForAccessibility","uppercase","tabRoot","tabRootFixed","touchableRipple","touchableRippleTop","touchableRippleInner","paddingRight","maxWidth","touchableRippleInnerTop","iconContainer","text","letterSpacing","Platform","web","transitionDuration","transitionProperty","default","textTop","marginTop","TabsHeader","themeMode","restStyle","customBackground","isDarkTheme","overlay","hasPrimaryBackground","isDark","innerScrollSize","scrollX","scrollRef","layouts","indicatorRef","updateIndicator","cl","useIndicator","tabsLayout","length","onTabsLayout","setTabsLayout","event","layout","updateScroll","scrollType","tabsWidth","scrolledX","next","prev","relativeX","overflowLeft","overflowRight","x","y","animated","relative","contentContainerStyle","onContentSizeChange","onScroll","scrollEventThrottle","horizontal","showsHorizontalScrollIndicator","alwaysBounceHorizontal","scrollEnabled","scrollablePadding","top","removeTopShadow","zIndex","tabs","tabsTopIcon","fixedContentContainerStyle","indicator","bottom","transformOrigin","willChange","props","defaultIndex","ind","setIndex","onChangeIndex","currentScreen","renderProps","showLeadingSpace","cache","c","set","k","get","createCache","getDefaultIndex","onInnerChangeIndex","newIndex","persistKey","TabScreen","differenceInMinutes","dirtyDateLeft","dirtyDateRight","arguments","diff","floor","ceil","isBefore","dirtyDate","dirtyDateToCompare","date","dateToCompare","getTime"],"mappings":"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","file":"static/js/8.4b21dd31.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n","import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void | null;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string | null;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType = {\n  value: string | null;\n  onValueChange: (item: string) => void | null;\n};\n\nexport const ToggleButtonGroupContext = React.createContext<\n  ToggleButtonContextType\n>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out <a href=\"toggle-button-row.html\">`ToggleButton.Row`</a>.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-group.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst ToggleButtonGroup = ({ value, onValueChange, children }: Props) => (\n  <ToggleButtonGroupContext.Provider\n    value={{\n      value,\n      onValueChange,\n    }}\n  >\n    {children}\n  </ToggleButtonGroupContext.Provider>\n);\n\nToggleButtonGroup.displayName = 'ToggleButton.Group';\n\nexport default ToggleButtonGroup;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonGroup };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string | null; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            accessibilityState={{ disabled, selected: checked }}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n","import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n","import ToggleButtonComponent from './ToggleButton';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\n\nconst ToggleButton = Object.assign(\n  // @component ./ToggleButton.tsx\n  ToggleButtonComponent,\n  {\n    // @component ./ToggleButtonGroup.tsx\n    Group: ToggleButtonGroup,\n    // @component ./ToggleButtonRow.tsx\n    Row: ToggleButtonRow,\n  }\n);\n\nexport default ToggleButton;\n","import * as React from 'react';\nimport { useContext } from 'react';\n\nexport const TabsContext = React.createContext<{\n  goTo: (index: number) => void;\n  index: number;\n}>({\n  goTo: () => null,\n  index: 0,\n});\n\nexport function useTabNavigation() {\n  return useContext(TabsContext).goTo;\n}\nexport function useTabIndex() {\n  return useContext(TabsContext).index;\n}\n","import * as React from 'react';\nimport type { TextStyle, View, ViewStyle } from 'react-native';\nimport type {\n  AnimatedColorArgs,\n  IndicatorArgs,\n  IndicatorReturns,\n  OffsetScrollArgs,\n} from './utils';\n\nfunction getIndicatorStyle({\n  left,\n  width,\n}: {\n  left: number;\n  width: number;\n}): ViewStyle {\n  return {\n    transform: [\n      { scaleX: width },\n      { translateX: roundToTwo(left / width) || 0 },\n    ],\n  };\n}\n\nfunction roundToTwo(num: number) {\n  return Math.round(num * 100 + Number.EPSILON) / 100;\n}\n\nexport function useIndicator({\n  index,\n  layouts,\n}: IndicatorArgs): IndicatorReturns {\n  const indicatorRef = React.useRef<View>(null);\n  const updateIndicator = React.useCallback(() => {\n    if (!indicatorRef.current || !layouts.current) {\n      return;\n    }\n    const cl = layouts.current[index];\n    if (cl) {\n      indicatorRef.current.setNativeProps({\n        style: getIndicatorStyle({ left: cl.x, width: cl.width }),\n      });\n    }\n  }, [index, indicatorRef, layouts]);\n\n  return [indicatorRef, updateIndicator, null];\n}\n\nexport function useOffsetScroller(_: OffsetScrollArgs) {}\nexport function useAnimatedText({\n  activeColor,\n  active,\n  textColor,\n}: AnimatedColorArgs): TextStyle {\n  return React.useMemo(\n    () => ({\n      color: active ? activeColor : textColor,\n      opacity: active ? 1 : 0.6,\n    }),\n    [active, activeColor, textColor]\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet, Animated } from 'react-native';\n\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = Animated.createAnimatedComponent(\n    require('react-native-vector-icons/MaterialCommunityIcons').default\n  );\n} catch (e) {\n  let isErrorLogged = false;\n\n  // Fallback component for icons\n  // @ts-ignore\n  MaterialCommunityIcons = ({ name, ...rest }) => {\n    /* eslint-disable no-console */\n    if (!isErrorLogged) {\n      if (\n        !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n          e.message\n        )\n      ) {\n        console.error(e);\n      }\n\n      console.warn(\n        `Tried to use the icon '${name}' in a component from 'react-native-paper-tabs', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.`,\n        `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n      );\n\n      isErrorLogged = true;\n    }\n\n    return (\n      <Animated.Text {...rest} selectable={false}>\n        □\n      </Animated.Text>\n    );\n  };\n}\n\nconst defaultIcon = ({ name, color, size, style, ...rest }: any) => (\n  <MaterialCommunityIcons\n    selectable={false}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        lineHeight: size,\n      },\n      styles.icon,\n      style,\n    ]}\n    {...rest}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n","import * as React from 'react';\nimport {\n  LayoutChangeEvent,\n  Animated,\n  StyleSheet,\n  View,\n  Platform,\n  TextProps,\n} from 'react-native';\nimport { Text, TouchableRipple } from 'react-native-paper';\nimport type { ReactElement } from 'react';\nimport type { TabScreenProps } from './TabScreen';\nimport type { Theme } from 'react-native-paper/lib/typescript/types';\nimport Color from 'color';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport { useAnimatedText } from './internal';\nimport type { IconPosition, Mode } from './utils';\nconst AnimatedText = Animated.createAnimatedComponent<\n  React.ComponentType<TextProps>\n>(Text as any);\n\nexport default function TabsHeaderItem({\n  tab,\n  tabIndex,\n  active,\n  goTo,\n  onTabLayout,\n  activeColor,\n  textColor,\n  theme,\n  position,\n  offset,\n  childrenCount,\n  uppercase,\n  mode,\n  iconPosition,\n  showTextLabel,\n}: {\n  tab: ReactElement<TabScreenProps>;\n  tabIndex: number;\n  active: boolean;\n  goTo: (index: number) => void;\n  onTabLayout: (index: number, e: LayoutChangeEvent) => void;\n  activeColor: string;\n  textColor: string;\n  theme: Theme;\n  position: Animated.Value | undefined;\n  offset: Animated.Value | undefined;\n  childrenCount: number;\n  uppercase?: boolean;\n  iconPosition?: IconPosition;\n  showTextLabel?: boolean;\n  mode: Mode;\n}) {\n  const rippleColor = React.useMemo(\n    () =>\n      Color(activeColor as any)\n        .alpha(0.32)\n        .rgb()\n        .string(),\n    [activeColor]\n  );\n\n  const { color, opacity } = useAnimatedText({\n    active,\n    position,\n    offset,\n    activeColor,\n    textColor,\n    tabIndex,\n    childrenCount,\n  });\n\n  return (\n    <View\n      key={tab.props.label}\n      style={[styles.tabRoot, mode === 'fixed' && styles.tabRootFixed]}\n      onLayout={(e) => onTabLayout(tabIndex, e)}\n    >\n      <TouchableRipple\n        onPress={() => goTo(tabIndex)}\n        onPressIn={() => {}}\n        style={[\n          styles.touchableRipple,\n          iconPosition === 'top' && styles.touchableRippleTop,\n        ]}\n        rippleColor={rippleColor}\n        // @ts-ignore\n        accessibilityTraits={'button'}\n        accessibilityRole=\"button\"\n        accessibilityComponentType=\"button\"\n        accessibilityLabel={tab.props.label}\n        accessibilityState={{ selected: active }}\n        testID={`tab_${tabIndex}`}\n      >\n        <View\n          style={[\n            styles.touchableRippleInner,\n            iconPosition === 'top' && styles.touchableRippleInnerTop,\n          ]}\n        >\n          {tab.props.icon ? (\n            <View\n              style={[\n                styles.iconContainer,\n                iconPosition !== 'top' && styles.marginRight,\n              ]}\n            >\n              <MaterialCommunityIcon\n                selectable={false}\n                accessibilityElementsHidden={true}\n                importantForAccessibility=\"no\"\n                name={tab.props.icon || ''}\n                style={{ color: color, opacity }}\n                size={24}\n              />\n            </View>\n          ) : null}\n          {showTextLabel ? (\n            <AnimatedText\n              selectable={false}\n              style={[\n                styles.text,\n                iconPosition === 'top' && styles.textTop,\n                { ...theme.fonts.medium, color, opacity },\n              ]}\n            >\n              {uppercase ? tab.props.label.toUpperCase() : tab.props.label}\n            </AnimatedText>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabRoot: { position: 'relative' },\n  tabRootFixed: { flex: 1 },\n  touchableRipple: {\n    height: 48,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchableRippleTop: {\n    height: 72,\n  },\n  touchableRippleInner: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingRight: 16,\n    paddingLeft: 16,\n    minWidth: 90,\n    maxWidth: 360,\n  },\n  touchableRippleInnerTop: {\n    flexDirection: 'column',\n  },\n  iconContainer: {\n    width: 24,\n    height: 24,\n  },\n  text: {\n    textAlign: 'center',\n    letterSpacing: 1,\n    ...Platform.select({\n      web: {\n        transitionDuration: '150ms',\n        transitionProperty: 'all',\n      },\n      default: {},\n    }),\n  },\n  textTop: { marginTop: 6 },\n  marginRight: { marginRight: 8 },\n});\n","import type { SwiperRenderProps } from './utils';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  LayoutRectangle,\n  Platform,\n  ScrollView,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\nimport { overlay, Surface } from 'react-native-paper';\nimport color from 'color';\nimport * as React from 'react';\nimport { useIndicator, useOffsetScroller } from './internal';\nimport TabsHeaderItem from './TabsHeaderItem';\n\nexport default function TabsHeader({\n  index,\n  goTo,\n  children,\n  position,\n  offset,\n  theme,\n  dark,\n  style,\n  iconPosition,\n  showTextLabel,\n  showLeadingSpace,\n  uppercase,\n  mode,\n}: SwiperRenderProps) {\n  const { colors, dark: isDarkTheme, mode: themeMode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && themeMode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  let hasPrimaryBackground = colors.primary === backgroundColor;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : // @ts-ignore\n          !color(backgroundColor).isLight();\n  }\n  const textColor = isDark ? '#fff' : '#000';\n  const activeColor = hasPrimaryBackground ? textColor : theme.colors.primary;\n\n  const innerScrollSize = React.useRef<number | null>(null);\n  const scrollX = React.useRef<number>(0);\n  const scrollRef = React.useRef<ScrollView>(null);\n  const layouts = React.useRef<Record<string, LayoutRectangle> | null>(null);\n  const [tabsLayout, setTabsLayout] = React.useState<LayoutRectangle | null>(\n    null\n  );\n  const [indicatorRef, updateIndicator, indicatorStyle] = useIndicator({\n    tabsLayout,\n    layouts,\n    index,\n    offset,\n    position,\n    childrenCount: children.length,\n  });\n\n  const onTabsLayout = React.useCallback(\n    (e: LayoutChangeEvent) => {\n      setTabsLayout(e.nativeEvent.layout);\n    },\n    [setTabsLayout]\n  );\n\n  const onTabLayout = React.useCallback(\n    (tabIndex: number, event: LayoutChangeEvent) => {\n      layouts.current = {\n        ...layouts.current,\n        [tabIndex]: event.nativeEvent.layout,\n      };\n      updateIndicator();\n    },\n    [layouts, updateIndicator]\n  );\n\n  const updateScroll = React.useCallback(\n    (scrollType?: 'next' | 'prev') => {\n      if (!layouts.current || mode !== 'scrollable') {\n        return;\n      }\n      let cl = layouts.current[index];\n\n      if (!cl || !scrollRef.current || !tabsLayout) {\n        return;\n      }\n\n      const tabsWidth = tabsLayout.width;\n      let scrolledX = scrollX.current;\n      // console.log({ scrolledX, scrollType });\n      if (scrollType === 'next') {\n        const next = layouts.current?.[index + 1];\n        if (next) {\n          cl = next;\n        }\n      } else if (scrollType === 'prev') {\n        const prev = layouts.current?.[index - 1];\n        if (prev) {\n          cl = prev;\n        }\n      }\n      const relativeX = cl.x - scrolledX;\n      const overflowLeft = relativeX;\n      const overflowRight = -tabsWidth + relativeX + cl.width;\n\n      if (overflowRight > -50) {\n        scrollRef.current.scrollTo({\n          x: scrolledX + overflowRight + 50,\n          y: 0,\n          animated: true,\n        });\n      } else if (overflowLeft < 50) {\n        scrollRef.current.scrollTo({\n          x: scrolledX + overflowLeft - 50,\n          y: 0,\n          animated: true,\n        });\n      }\n    },\n    [mode, layouts, index, scrollRef, scrollX, tabsLayout]\n  );\n\n  // subscribes to offset on native devices to scroll tab bar faster when scrolling (iOS only since Android bugs)\n  useOffsetScroller({ updateScroll, index, offset, mode });\n\n  // updates scroll when index changes (updateScroll function changes to new reference when index changes)\n  React.useEffect(() => {\n    updateScroll();\n  }, [updateScroll]);\n\n  // update indicator when index changes (updateIndicator function changes to new reference when index changes)\n  React.useEffect(() => {\n    updateIndicator();\n  }, [updateIndicator]);\n\n  return (\n    <View style={styles.relative}>\n      <Surface\n        style={[\n          { backgroundColor, elevation },\n          restStyle,\n          styles.tabs,\n          iconPosition === 'top' && styles.tabsTopIcon,\n        ]}\n        onLayout={onTabsLayout}\n      >\n        <ScrollView\n          ref={scrollRef}\n          contentContainerStyle={\n            mode === 'fixed' ? styles.fixedContentContainerStyle : undefined\n          }\n          onContentSizeChange={(e) => {\n            innerScrollSize.current = e;\n          }}\n          onScroll={(e) => {\n            scrollX.current = e.nativeEvent.contentOffset.x;\n          }}\n          scrollEventThrottle={25}\n          horizontal={true}\n          showsHorizontalScrollIndicator={false}\n          alwaysBounceHorizontal={mode === 'scrollable'}\n          scrollEnabled={mode === 'scrollable'}\n        >\n          {mode === 'scrollable' && showLeadingSpace ? (\n            <View style={styles.scrollablePadding} />\n          ) : null}\n\n          {React.Children.map(children, (tab, tabIndex) => (\n            <TabsHeaderItem\n              theme={theme}\n              tabIndex={tabIndex}\n              tab={tab}\n              active={index === tabIndex}\n              onTabLayout={onTabLayout}\n              goTo={goTo}\n              activeColor={activeColor}\n              textColor={textColor}\n              position={position}\n              offset={offset}\n              childrenCount={children.length}\n              uppercase={uppercase}\n              iconPosition={iconPosition}\n              showTextLabel={showTextLabel}\n              mode={mode}\n            />\n          ))}\n          <Animated.View\n            ref={indicatorRef}\n            pointerEvents=\"none\"\n            style={[\n              styles.indicator,\n              {\n                backgroundColor: activeColor,\n              },\n              indicatorStyle,\n            ]}\n          />\n        </ScrollView>\n        <Animated.View\n          style={[\n            styles.removeTopShadow,\n            {\n              height: elevation,\n              backgroundColor,\n              top: -elevation,\n            },\n          ]}\n        />\n      </Surface>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  relative: { position: 'relative' },\n  removeTopShadow: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    zIndex: 2,\n  },\n  scrollablePadding: {\n    width: 52,\n  },\n  tabs: {\n    height: 48,\n  },\n  tabsTopIcon: {\n    height: 72,\n  },\n  fixedContentContainerStyle: {\n    flex: 1,\n  },\n  indicator: {\n    position: 'absolute',\n    height: 2,\n    width: 1,\n    left: 0,\n    bottom: 0,\n    ...Platform.select({\n      web: {\n        backgroundColor: 'transparent',\n        transitionDuration: '150ms',\n        transitionProperty: 'all',\n        transformOrigin: 'left',\n        willChange: 'transform',\n      },\n      default: {},\n    }),\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport type { SwiperProps } from './utils';\nimport type { TabScreenProps } from './TabScreen';\nimport { TabsContext } from './context';\nimport TabsHeader from './TabsHeader';\n\nfunction Swiper(props: SwiperProps) {\n  const {\n    theme,\n    dark,\n    style,\n    defaultIndex,\n    onChangeIndex,\n    iconPosition,\n    showTextLabel,\n    showLeadingSpace,\n    uppercase,\n    mode,\n  } = props;\n  const [index, setIndex] = React.useState<number>(defaultIndex || 0);\n  const goTo = React.useCallback(\n    (ind: number) => {\n      setIndex(ind);\n      onChangeIndex(ind);\n    },\n    [setIndex, onChangeIndex]\n  );\n\n  let children: React.Component<TabScreenProps>[] = props.children;\n\n  const currentScreen = children[index];\n  if (!currentScreen || !currentScreen) {\n    return null;\n  }\n  const renderProps = {\n    index,\n    goTo,\n    children,\n    theme,\n    dark,\n    style,\n    offset: undefined,\n    position: undefined,\n    iconPosition,\n    showTextLabel,\n    showLeadingSpace,\n    uppercase,\n    mode,\n  };\n\n  return (\n    <View style={styles.root}>\n      <TabsHeader {...renderProps} />\n      <TabsContext.Provider value={{ goTo, index }}>\n        {currentScreen}\n      </TabsContext.Provider>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n  },\n});\n\nexport default Swiper;\n","import * as React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport { withTheme } from 'react-native-paper';\nimport Swiper from './Swiper';\nimport type { Theme } from 'react-native-paper/lib/typescript/types';\n\nimport type { IconPosition, Mode } from './utils';\nimport { Platform } from 'react-native';\n\n// used to persist position on web\nconst cache = createCache();\n\nfunction Tabs({\n  onChangeIndex,\n  children,\n  persistKey,\n  theme,\n  dark,\n  style,\n  defaultIndex,\n  mode = 'fixed',\n  uppercase = true,\n  iconPosition = 'leading',\n  showTextLabel = true,\n  showLeadingSpace = true,\n}: {\n  children: any;\n  persistKey?: string;\n  theme: Theme;\n  dark?: boolean;\n  style?: ViewStyle;\n  defaultIndex?: number;\n  iconPosition?: IconPosition;\n  showTextLabel?: boolean;\n  showLeadingSpace?: boolean;\n  uppercase?: boolean;\n  mode?: Mode;\n  onChangeIndex?: (index: number) => void;\n}) {\n  const onInnerChangeIndex = React.useCallback(\n    (newIndex) => {\n      if (persistKey && Platform.OS === 'web') {\n        cache.set(persistKey, newIndex);\n      }\n      onChangeIndex?.(newIndex);\n    },\n    [persistKey, onChangeIndex]\n  );\n\n  return (\n    <Swiper\n      style={style}\n      dark={dark}\n      theme={theme}\n      defaultIndex={getDefaultIndex(defaultIndex, persistKey)}\n      onChangeIndex={onInnerChangeIndex}\n      uppercase={uppercase}\n      iconPosition={iconPosition}\n      showTextLabel={showTextLabel}\n      showLeadingSpace={showLeadingSpace}\n      mode={mode}\n    >\n      {children}\n    </Swiper>\n  );\n}\n\nfunction getDefaultIndex(\n  defaultIndex: number | undefined,\n  persistKey: string | undefined\n) {\n  if (persistKey) {\n    return cache.get(persistKey) || defaultIndex || 0;\n  }\n  return defaultIndex || 0;\n}\n// used to persist position on web\nfunction createCache() {\n  let c: { [k: string]: number } = {};\n  const set = (k: string, i: number) => {\n    c[k] = i;\n  };\n  const get = (key: string) => c[key];\n  return {\n    set,\n    get,\n  };\n}\n\nexport default withTheme(Tabs);\n","import * as React from 'react';\nimport type { IconSource } from 'react-native-paper/lib/typescript/components/Icon';\n\nexport interface TabScreenProps {\n  label: string;\n  icon?: IconSource;\n  children: any;\n  preload?: () => any;\n}\n\nexport default function TabScreen({ children }: TabScreenProps) {\n  return React.Children.only(children);\n}\n","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * var result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are from 10:01:59 to 10:00:00\n * var result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / MILLISECONDS_IN_MINUTE;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}"],"sourceRoot":""}