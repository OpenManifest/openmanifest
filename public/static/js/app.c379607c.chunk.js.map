{"version":3,"sources":["components/forms/credits/slice.tsx","components/forms/dropzone/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/plane/slice.tsx","components/forms/rig/slice.tsx","components/forms/rig_inspection/slice.tsx","components/forms/rig_inspection_template/slice.tsx","components/forms/manifest/slice.tsx","components/forms/manifest_group/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/user/slice.tsx","components/dialogs/UserWizard/slice.tsx","components/dialogs/DropzoneWizard/slice.tsx","components/forms/slice.ts","screens/authenticated/users/slice.ts","screens/unauthenticated/login/slice.ts","screens/authenticated/manifest/slice.ts","screens/unauthenticated/signup/slice.ts","screens/slice.ts","redux/store.ts","components/Themed.tsx","components/notifications/slice.ts","components/input/dropdown_select/FederationSelect.tsx","components/input/colorpicker/ColorPickerDialog.tsx","components/input/colorpicker/ColorPicker.tsx","components/input/colorpicker/index.ts","components/theme_preview/Phone.tsx","components/theme_preview/Web.tsx","components/layout/ScrollableScreen.tsx","graphql/hooks/useMutationUpdateUser.ts","redux/global.ts","hooks/useColorScheme.web.ts","assets/images/logo.png","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","graphql/hooks/useCurrentDropzone.ts","components/input/chip_select/ChipSelect.tsx","components/notifications/Notifications.tsx","components/input/date_picker/DatePicker.web.tsx","components/input/chip_select/LicenseChipSelect.tsx","hooks/usePalette.ts","components/forms/dropzone/DropzoneForm.tsx","components/permissions/PermissionListItem.tsx","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","navigation/SetupWarning.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","navigation/tabs/notifications.tsx","navigation/tabs/profile.tsx","navigation/tabs/settings.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","screens/unauthenticated/signup/ConfirmUserScreen.tsx","navigation/RootNavigator.tsx","components/wizard/Pagination.tsx","components/wizard/Wizard.tsx","components/wizard/WizardScreen.tsx","components/dialogs/UserWizard/steps/Federation.tsx","components/dialogs/UserWizard/steps/Rig.tsx","components/dialogs/UserWizard/steps/ReserveRepack.tsx","components/dialogs/UserWizard/steps/Wingloading.tsx","graphql/hooks/useMutationUpdateRig.tsx","graphql/hooks/useMutationCreateRig.ts","components/dialogs/UserWizard/UserWizardScreen.tsx","components/dialogs/DropzoneWizard/steps/Name.tsx","components/dialogs/DropzoneWizard/steps/Aircraft.tsx","components/dialogs/DropzoneWizard/steps/Theming.tsx","components/dialogs/DropzoneWizard/steps/Permissions.tsx","components/dialogs/DropzoneWizard/steps/TicketType.tsx","graphql/hooks/useMutationUpdateDropzone.ts","graphql/hooks/useMutationCreatePlane.tsx","graphql/hooks/useMutationUpdatePlane.tsx","graphql/hooks/useMutationCreateTicketType.ts","graphql/hooks/useMutationUpdateTicketType.ts","components/dialogs/DropzoneWizard/DropzoneWizard.tsx","App.tsx","hooks/useCachedResources.ts","graphql/createMutation.tsx","assets/fonts/SpaceMono-Regular.ttf","redux/index.ts","graphql/schema.d.ts","constants/Colors.ts","hooks/useRestriction.ts"],"names":["initialState","original","open","fields","amount","value","error","status","message","createSlice","name","reducers","setField","state","action","payload","field","setFieldError","setOpen","reset","federation","secondaryColor","primaryColor","banner","isCreditSystemEnabled","isPublic","key","typedKey","role","expiresAt","registration","minSlots","maxSlots","hours","nextMaintenanceHours","make","model","serial","repackExpiresAt","canopySize","rigType","ok","setOk","index","item","console","log","map","idx","setFields","JSON","parse","definition","err","jumpType","extras","load","rig","ticketType","dropzoneUser","exitWeight","passengerName","passengerExitWeight","users","setFromSlots","slot","id","Number","user","rigId","find","i","setDropzoneUsers","dzUser","availableRigs","cost","altitude","allowManifestingSelf","isTandem","email","phone","rigs","license","setFederation","dropzone","extra","credits","plane","rigInspection","rigInspectionTemplate","manifest","manifestGroup","userWizard","dropzoneWizard","isSearchVisible","searchText","setSearchText","setSearchVisible","password","setEmail","setPassword","setEmailError","setPasswordError","selectedUsers","setSelected","passwordConfirmation","login","signup","initialStateGlobal","initialStateNotification","persistConfig","storage","Platform","OS","require","default","AsyncStorage","whitelist","screenReducers","Object","keys","screens","reduce","obj","reducer","formReducers","forms","screenActions","actions","global","globalSlice","notifications","notificationSlice","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","queue","hideSnackbar","slice","showSnackbar","push","QUERY_FEDERATIONS","gql","FederationSelect","React","isMenuOpen","setMenuOpen","data","useQuery","federations","length","onSelect","stringify","Subheader","onDismiss","visible","anchor","onPress","mode","disabled","minWidth","Item","title","ColorPickerDialog","onChange","onClose","ref","Portal","Dialog","Title","Content","padding","height","flex","sliderComponent","SliderComponent","defaultColor","hideSliders","Actions","Button","current","getColor","StyleSheet","create","flexGrow","display","width","marginBottom","subheader","paddingLeft","COLOR_PRESETS","styles","container","paddingHorizontal","alignItems","content","justifyContent","flexDirection","card","marginVertical","fontSize","fontWeight","textAlign","colorBox","margin","ColorPicker","helperText","isCustomColor","includes","isDialogOpen","setDialogOpen","Card","flexWrap","TouchableRipple","Surface","borderWidth","borderColor","MaterialIcons","size","HelperText","type","label","marginTop","previewContainer","borderRadius","hairlineWidth","alignSelf","previewAppBar","position","top","borderTopRightRadius","borderTopLeftRadius","previewTabBar","bottom","borderBottomRightRadius","borderBottomLeftRadius","previewLoadCard","marginHorizontal","previewLoadCard2","previewLoadCard3","previewButton","right","PhonePreview","left","WebPreview","ScrollableScreen","useWindowDimensions","children","contentContainerStyle","rest","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","colors","surface","paddingBottom","MUTATION_UPDATE_USER","createMutation","getPayload","result","updateUser","fieldErrorMap","exit_weight","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","primary","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","currentUser","currentDropzone","currentDropzoneId","permissions","credentials","expoPushToken","isDarkMode","setCredentials","setUser","setExpoPushToken","setPermissions","setPrimaryColor","setAccentColor","accent","setDropzone","toggleDarkMode","logout","module","exports","ticketTypeIds","ticketTypes","gca","dispatchAt","isOpen","loadMaster","pilot","QUERY_DROPZONE","useCurrentDropzone","dropzoneId","pushToken","dispatch","variables","earliestTimestamp","startOfDay","Date","getTime","fetchPolicy","mutationUpdateUser","useMutationUpdateUser","onSuccess","onError","userId","remoteToken","localToken","loading","called","mutate","hasLicense","some","ChipSelect","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","isEqual","undefined","xorBy","MyComponent","palette","usePalette","notification","variantStyle","info","success","warning","testID","duration","variant","DatePicker","date","description","timestamp","format","Icon","selectedDays","onDayClick","QUERY_LICENSES","LicenseChipSelect","federationId","licenses","filter","Boolean","first","colorScheme","DropzoneForm","onPickImage","a","async","getDocumentAsync","multiple","uri","maxHeight","Cover","source","resizeMode","onChangeText","newValue","required","MUTATION_UPDATE_ROLE","PermissionListItem","permissionName","canChangePermissions","useRestriction","Permission","GrantPermission","useMutation","mutationUpdatePermission","onValueChange","roleId","enabled","optimisticResponse","updateRole","errors","httpLink","createHttpLink","Constants","url","Apollo","errorLink","graphQLErrors","networkError","operation","response","extensions","code","authLink","setContext","_","headers","accessToken","tokenType","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","prefixes","Linking","config","confirm","path","params","account_confirmation_success","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","TouchableOpacity","replace","linkText","paddingVertical","Warning","Paragraph","SetupWarning","isRigSetUp","isExitWeightDefined","isMembershipInDate","isReserveInDate","isRigInspectionComplete","useNavigation","missing","join","navigate","QUERY_CURRENT_USER","AppBar","previous","scene","hideWarnings","contextMenuOpen","setContextMenuOpen","useLazyQuery","loadData","Appbar","Header","BackAction","goBack","descriptor","options","titleStyle","headerRight","tintColor","Chip","Menu","IconButton","Divider","isRigInspected","rigInspections","inspection","isRepackInDate","ManifestScreen","CreateLoadScreen","ManifestGroupScreen","ManifestGroupUserSelectScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","NotificationsScreen","Profile","Notifications","UpdateUserScreen","ProfileTab","initialParams","SettingsScreen","TicketTypeSettingsScreen","CreatePlaneScreen","UpdatePlaneScreen","UpdateDropzoneScreen","PlanesScreen","RigInspectionTemplateScreen","DropzoneRigsScreen","DropzonePermissionScreen","DropzoneMasterLogScreen","CreateExtraScreen","UpdateExtraScreen","ExtrasScreen","Settings","SettingsTab","UsersScreen","SearchableAppBar","RigInspectionScreen","searchVisible","onSearch","text","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","ReadUser","canUpdateDropzone","UpdateDropzone","canUpdatePlane","UpdatePlane","canUpdateTicketTypes","UpdateTicketType","canUpdateExtras","UpdateExtra","canUpdatePermissions","canUpdateDzRigs","UpdateDropzoneRig","canUpdateRigInspectionTemplate","UpdateFormTemplate","shouldShowSettings","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","MaterialCommunityIcons","unmountOnBlur","NotificationTab","UsersTab","QUERY_DROPZONES","refetch","SafeAreaView","FlatList","dropzones","edges","numColumns","refreshing","onRefresh","ListEmptyComponent","empty","renderItem","Dimensions","get","node","shouldPushRoute","screen","FAB","fab","small","MUTATION_CREATE_DROPZONE","createDropzone","validates","isRequired","useMutationCreateDropzone","e","onFieldError","separator","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","emailRegex","RegExp","hasError","test","userLogin","authenticatable","Image","logo","KeyboardAvoidingView","behavior","TextInput","secureTextEntry","labelStyle","buttonLabel","button","textButtonLabel","textButton","paddingTop","maxWidth","MUTATION_USER_SIGNUP","userSignUp","isEmail","SignupScreen","useMutationSignUp","onSignUp","textContentType","passwordRules","licenseId","successColor","errorIcon","warningColor","subtitle","ConfirmUserScreen","route","useRoute","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","WizardPagination","paginationIndex","icons","bridgeLength","pagination","Array","from","hasCustomIcon","defaultIcon","iconDone","bridge","bridgeDone","marginLeft","buttonBack","buttons","Wizard","onNext","setIndex","isLastItem","count","showPagination","PaginationComponent","scrollEnabled","autoplay","onChangeIndex","prevIndex","getCurrentIndex","scrollToIndex","wizardScreen","WizardScreen","screenWidth","flatten","FederationWizardSceen","RigWizardScreen","isOtherMake","setIsOtherMake","pointerEvents","ReserveRepackWizardScreen","time","cardTitle","cardValue","marginRight","slider","sliderControl","wingLoading","wingLoadingCardLeft","wingLoadingCardRight","WingloadingWizardScreen","rigForm","userForm","setCanopySize","ceil","toString","elevation","minimumValue","maximumValue","step","minimumTrackTintColor","maximumTrackTintColor","debounce","onSlidingComplete","MUTATION_UPDATE_RIG","updateRig","MUTATION_CREATE_RIG","createRig","modal","absoluteFillObject","paddingRight","UserWizardScreen","l","v","mutationUpdateRig","useMutationUpdateRig","mutationCreateRig","useMutationCreateRig","onFederationNext","onRigNext","onReserveRepackNext","onWingloadingNext","onNextStep","Modal","dismissable","Federation","Rig","ReserveRepack","Wingloading","NameAndFederationWizardSceen","AircraftWizardScreen","QUERY_DROPZONE_PERMISSIONS","permission","dropzoneForm","queryRoles","roles","capitalize","paragraph","TicketTypeWizardScreen","altitudeMenuOpen","setAltitudeMenuOpen","contentStyle","MUTATION_UPDATE_DROPZONE","updateDropzone","MUTATION_CREATE_PLANE","createPlane","MUTATION_UPDATE_PLANE","updatePlane","MUTATION_CREATE_TICKET_TYPE","createTicketType","MUTATION_UPDATE_TICKET_TYPE","updateTicketType","DropzoneWizardScreen","aircraft","ticket","mutationCreateDropzone","mutationUpdateDropzone","useMutationUpdateDropzone","mutationCreatePlane","useMutationCreatePlane","mutationUpdatePlane","useMutationUpdatePlane","mutationCreateTicketType","useMutationCreateTicketType","mutationUpdateTicketType","useMutationUpdateTicketType","onBasicInfoNext","onThemingNext","onAircraftNext","onTicketTypeNext","Name","Theming","Aircraft","TicketType","CreateSlot","CreateUserSlot","notificationListener","responseListener","onOutsideLink","intendedRoute","URI","isDevice","existingStatus","finalStatus","warn","token","importance","MAX","vibrationPattern","registerForPushNotificationsAsync","then","request","body","addEventListener","removeEventListener","fallback","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","DropzoneWizard","App","isLoadingComplete","setLoadingComplete","Font","Inter_400Regular","Inter_500Medium","Inter_700Bold","fontsLoaded","SplashScreen","Ionicons","font","useCachedResources","ActivityIndicator","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","pattern","callback","mutation","opts","hasErrors","forEach","x","variable","validator","validate","fieldErrors","fieldName","background","tint","tabIconDefault","tabIconSelected","QUERY_PERMISSIONS"],"mappings":"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","file":"static/js/app.c379607c.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser, Maybe, Transaction } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Transaction,\n  | \"amount\"\n  | \"status\"\n  | \"message\"\n>;\n\ninterface IDropzoneEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Transaction[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    amount: {\n      value: null,\n      error: null,\n    },\n    status: {\n      value: \"deposit\",\n      error: null,\n    },\n    message: {\n      value: \"\",\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/credits',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<DropzoneUser | boolean>) => {\n      \n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneUserEditState = {\n  original: null,\n  open: false,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/dropzoneUser',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneUserEditState, action: PayloadAction<boolean | DropzoneUser>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema.d\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IPlaneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IPlaneEditState, action: PayloadAction<boolean | Plane>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.hours.value = action.payload.hours!;\n        state.fields.minSlots.value = action.payload.minSlots!;\n        state.fields.maxSlots.value = action.payload.maxSlots!;\n        state.fields.name.value = action.payload.name!;\n        state.fields.registration.value = action.payload.registration!;\n        state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n      }\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n  | \"rigType\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IRigEditState = {\n  original: null,\n  open: false,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n    rigType: {\n      value: \"sport\",\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IRigEditState, action: PayloadAction<boolean | Rig>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldItem } from \"../rig_inspection_template/slice\";\n\n\n\ninterface IRigInspectionEditState {\n  fields: FieldItem[],\n  open: boolean;\n  ok: boolean;\n}\n\nexport const initialState: IRigInspectionEditState = {\n  fields: [],\n  open: false,\n  ok: false\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n\n    setOk: (state: IRigInspectionEditState, action: PayloadAction<boolean>) => {\n      state.ok = action.payload;\n    },\n    setField: (state: IRigInspectionEditState, action: PayloadAction<[number, FieldItem]>) => {\n      const [index, item] = action.payload;\n\n      console.log({ item, index, fields: state.fields });\n      state.fields = state.fields.map((field, idx) => idx === index ? item : field);\n    },\n\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<string>) => {\n      try {\n        state.fields = JSON.parse(action.payload)\n      } catch (error) {\n        console.error(\"Failed to read rig inspection template\", error.message, action.payload);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.ok = initialState.ok;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, FormTemplate } from \"../../../graphql/schema.d\";\n\n\nexport interface FieldItem {\n  label: string;\n  description?: string;\n  isRequired?: boolean;\n  valueType: \"integer\" | \"boolean\" | \"date\" | \"string\";\n  value?: number | boolean | string;\n}\n\ninterface IRigInspectionEditState {\n  original: FormTemplate | null;\n  fields: FieldItem[],\n}\n\nexport const initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'forms/rigInspection',\n  initialState,\n  reducers: {\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<FieldItem[]>) => {\n      state.fields = action.payload;\n    },\n\n    setOpen: (state: IRigInspectionEditState, action: PayloadAction<FormTemplate>) => {\n      state.original = action.payload;\n\n      try {\n        state.fields = JSON.parse(action.payload.definition!);\n      } catch(err) {\n        console.log(\"Invalid json: \", action.payload.definition);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"dropzoneUser\"\n  | \"exitWeight\"\n  | \"extras\"\n  | \"passengerExitWeight\"\n  | \"passengerName\"\n>\n\ninterface ISlotEditState {\n  original: Slot | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Fields[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    dropzoneUser: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n    passengerName: {\n      value: null,\n      error: null,\n    },\n    passengerExitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifest',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | Slot>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { pick, pickBy } from \"lodash\";\nimport { SlotUser, Slot, DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ninterface IFields extends Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"extras\"\n> {\n  users: SlotUser[];\n}\n\ninterface ISlotEditState {\n  original: IFields | null;\n  open: boolean;\n  fields: {\n    [K in keyof IFields] - ?: {\n      value: IFields[K] | null;\n      error: string | null;\n    }\n  },\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    users: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifestGroup',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      \n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setFromSlots: (state: ISlotEditState, action: PayloadAction<Slot[]>) => {\n      state.fields.users.value = action.payload.map((slot) => ({\n          id: Number(slot.user?.id),\n          rigId: Number(slot.rig?.id),\n          exitWeight: Number(slot.exitWeight),\n        })\n      ) as SlotUser[];\n\n      state.fields.jumpType.value = action.payload.find(i => i)?.jumpType;\n      state.fields.load.value = action.payload.find(i => i)?.load!;\n      state.fields.extras.value = action.payload.find(i => i)?.extras;\n    },\n\n    setDropzoneUsers: (state: ISlotEditState, action: PayloadAction<DropzoneUser[]>) => {\n      state.fields.users.value = action.payload.map<SlotUser>((dzUser) => ({\n          id: Number(dzUser.user.id),\n          rigId: Number(dzUser?.availableRigs?.find(({ id }) => id)?.id),\n          exitWeight: Number(dzUser?.user.exitWeight),\n        })\n      ) as SlotUser[];\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | IFields>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nexport const initialState: ITicketTypeEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/ticketType',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ITicketTypeEditState, action: PayloadAction<boolean | TicketType>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.altitude.value = action.payload.altitude!;\n        state.fields.cost.value = action.payload.cost!;\n        state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  open: boolean;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IUserEditState = {\n  original: null,\n  open: false,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/user',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserEditState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.federation.value = action.payload.license?.federation!;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig, User } from \"../../../graphql/schema.d\";\n\ninterface IUserWizardState {\n  open: boolean;\n  fields: {\n    user: {\n      value: User;\n      error: string | null;\n    },\n    rig: {\n      value: Rig;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IUserWizardState = {\n  open: false,\n  fields: {\n    user: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/userWizard',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IUserWizardState[\"fields\"]>(state: IUserWizardState, action: PayloadAction<[T, IUserWizardState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n    },\n    setFieldError: <T extends  keyof IUserWizardState[\"fields\"]>(state: IUserWizardState, action: PayloadAction<[T, IUserWizardState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserWizardState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.fields = initialState.fields;\n      } else {\n        state.fields.user.value = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IUserWizardState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone } from \"../../../graphql/schema.d\";\ninterface IDropzoneWizardState {\n  open: boolean;\n  fields: {\n    dropzone: {\n      value: Dropzone;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IDropzoneWizardState = {\n  open: false,\n  fields: {\n    dropzone: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzoneWizard',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IDropzoneWizardState[\"fields\"]>(state: IDropzoneWizardState, action: PayloadAction<[T, IDropzoneWizardState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n    },\n    setFieldError: <T extends  keyof IDropzoneWizardState[\"fields\"]>(state: IDropzoneWizardState, action: PayloadAction<[T, IDropzoneWizardState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneWizardState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.fields = initialState.fields;\n      } else {\n        state.fields.dropzone.value = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IDropzoneWizardState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n\n","import * as credits from \"./credits/slice\";\nimport * as dropzone from \"./dropzone/slice\";\nimport * as dropzoneUser from \"./dropzone_user/slice\";\nimport * as extra from \"./extra/slice\";\nimport * as load from \"./load/slice\";\nimport * as plane from \"./plane/slice\";\nimport * as rig from \"./rig/slice\";\nimport * as rigInspection from \"./rig_inspection/slice\";\nimport * as rigInspectionTemplate from \"./rig_inspection_template/slice\";\nimport * as manifest from \"./manifest/slice\";\nimport * as manifestGroup from \"./manifest_group/slice\";\nimport * as ticketType from \"./ticket_type/slice\";\nimport * as user from \"./user/slice\";\nimport * as userWizard from \"../dialogs/UserWizard/slice\";\nimport * as dropzoneWizard from \"../dialogs/DropzoneWizard/slice\";\n\nexport const initialState = {\n  credits: credits.initialState,\n  dropzone: dropzone.initialState,\n  dropzoneUser: dropzoneUser.initialState,\n  extra: extra.initialState,\n  load: load.initialState,\n  plane: plane.initialState,\n  rig: rig.initialState,\n  rigInspection: rigInspection.initialState,\n  rigInspectionTemplate: rigInspectionTemplate.initialState,\n  manifest: manifest.initialState,\n  manifestGroup: manifestGroup.initialState,\n  ticketType: ticketType.initialState,\n  user: user.initialState,\n  userWizard: userWizard.initialState,\n  dropzoneWizard: dropzoneWizard.initialState,\n}\nexport const reducers = {\n  credits: credits.default,\n  dropzone: dropzone.default,\n  dropzoneUser: dropzoneUser.default,\n  extra: extra.default,\n  load: load.default,\n  plane: plane.default,\n  rig: rig.default,\n  rigInspection: rigInspection.default,\n  rigInspectionTemplate: rigInspectionTemplate.default,\n  manifest: manifest.default,\n  manifestGroup: manifestGroup.default,\n  ticketType: ticketType.default,\n  user: user.default,\n  userWizard: userWizard.default,\n  dropzoneWizard: dropzoneWizard.default,\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nexport const initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'screens/user',\n  initialState,\n  reducers: {\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IManifestScreenState {\n  isSearchVisible: boolean;\n  selectedUsers: DropzoneUser[]\n  searchText: string;\n}\n\nexport const initialState: IManifestScreenState = {\n  isSearchVisible: false,\n  selectedUsers: [],\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'manifestScreen',\n  initialState,\n  reducers: {\n    setSelected: (state: IManifestScreenState, action: PayloadAction<DropzoneUser[]>) => {\n      state.selectedUsers = action.payload;\n    },\n    setSearchText: (state: IManifestScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IManifestScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IManifestScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema.d\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport * as users from \"./authenticated/users/slice\";\nimport * as login from \"./unauthenticated/login/slice\";\nimport * as manifest from \"./authenticated/manifest/slice\";\nimport * as signup from \"./unauthenticated/signup/slice\";\n\nexport const initialState = {\n  manifest: manifest.initialState,\n  users: users.initialState,\n  login: login.initialState,\n  signup: signup.initialState,\n}\nexport const reducers = {\n  manifest: manifest.default,\n  users: users.default,\n  login: login.default,\n  signup: signup.default,\n}","import { combineReducers, configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { reducers as forms, initialState as initialStateForms } from \"../components/forms/slice\";\nimport { reducers as screens, initialState as initialStateScreens } from \"../screens/slice\";\n\n\nimport globalSlice, { initialState as initialStateGlobal } from \"./global\";\nimport notificationSlice, { initialState as initialStateNotification } from \"../components/notifications/slice\";\n\nexport const initialState = {\n  forms: initialStateForms,\n  screens: initialStateScreens,\n  global: initialStateGlobal,\n  notifications: initialStateNotification,\n} as RootState;\n\nconst persistConfig = {\n  key: 'open-manifest.0.9.1',\n  storage: Platform.OS === \"web\" || false ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconst screenReducers = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].reducer }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"reducer\"]\n};\nconst formReducers = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].reducer }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"reducer\"]\n};\n\nexport const screenActions = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].actions }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"actions\"]\n};\nexport const formActions = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].actions }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"actions\"]\n};\n\nexport const actions = {\n  forms: formActions,\n  screens: screenActions,\n  global: globalSlice.actions,\n  notifications: notificationSlice.actions,\n};\n\nexport const rootReducer = combineReducers({\n  global: globalSlice.reducer,\n  notifications: notificationSlice.reducer,\n  screens: combineReducers(screenReducers),\n  forms: combineReducers(formReducers),\n});\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\n\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\" | \"warning\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport const initialState = { queue: [] } as INotificationState;\nexport default createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { List, Menu, TextInput } from \"react-native-paper\";\nimport { Federation, Query } from \"../../../graphql/schema.d\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  React.useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      \n      anchor={\n        <TouchableOpacity onPress={() => { setMenuOpen(true); }}>\n          <TextInput\n            mode=\"outlined\"\n            disabled\n            style={{ minWidth: 200 }}\n            value={\n              props.value?.name || \"Please select federation\"\n            }\n          />\n        </TouchableOpacity>\n      }>\n      {\n        data?.federations?.map((federation) => \n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n            key={`federation-select-${federation.id}`}\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Portal, Dialog } from 'react-native-paper';\nimport { TriangleColorPicker } from \"react-native-color-picker\";\nimport SliderComponent from \"@react-native-community/slider\";\n\ninterface IColorPickerDialog {\n  open: boolean;\n  value: string;\n  onChange(color: string): void;\n  onClose(): void;\n}\nexport default function ColorPickerDialog(props: IColorPickerDialog) {\n  const { value, onChange, open, onClose } = props;\n\n  const ref = React.useRef<TriangleColorPicker>();\n  return (\n    <Portal>\n      <Dialog\n        visible={!!open}\n        onDismiss={() => onClose()}\n      >\n          <Dialog.Title>Custom color</Dialog.Title>\n          <Dialog.Content style={{ padding: 20, height: 400 }}>\n            { /* @ts-ignore */ }\n            <TriangleColorPicker\n              style={{ flex: 1 }}\n              sliderComponent={SliderComponent as any}\n              defaultColor={value}\n              hideSliders\n              ref={ref}\n            />\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={() => onClose()}>Cancel</Button>\n            <Button\n              onPress={() => {\n                onChange(ref.current.getColor());\n              }}\n            >\n              Save\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Card, HelperText, List, Surface, TouchableRipple } from \"react-native-paper\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport ColorPickerDialog from \"./ColorPickerDialog\";\n\nconst COLOR_PRESETS = [\n  \"#000000\",\n  \"#AAAAAA\",\n  \"#DDDDDD\",\n  \"#FF1414\",\n  \"#D6116B\",\n  \"#B70E97\",\n  \"#6718AC\",\n  \"#1E47AB\",\n  \"#11839E\",\n  \"#0DA583\",\n  \"#10C626\",\n  \"#92EA12\",\n  \"#FF8B14\",\n  \"#FFB214\",\n];\n\ninterface IColorPicker {\n  title: string;\n  helperText: string;\n  value: string;\n  error?: string;\n  onChange(color: string): void;\n}\n\nfunction ColorPicker(props: IColorPicker) {\n  const { value, title, helperText, onChange, error } = props;\n\n  const isCustomColor = !COLOR_PRESETS.includes(value);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  return (\n    <>\n    <ColorPickerDialog\n      open={isDialogOpen}\n      value={value}\n      onChange={(color) => {\n        onChange(color);\n        setDialogOpen(false);\n      }}\n      onClose={() => setDialogOpen(false)}\n    />\n    <Card style={styles.card}>\n      <List.Subheader>{title}</List.Subheader>\n      \n      <Card.Content style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n        {\n          COLOR_PRESETS.map((color) =>\n          <TouchableRipple onPress={() => onChange(color)}>\n            <Surface style={[styles.colorBox, { backgroundColor: color }, color === value ? { borderWidth: 2, borderColor: \"black\" } : {}]}>\n            </Surface>\n          </TouchableRipple>\n          )\n        }\n        <TouchableRipple onPress={() => setDialogOpen(true)}>\n          <Surface style={[styles.colorBox, { backgroundColor: isCustomColor ? value : \"#FFFFFF\" }, isCustomColor ? { borderWidth: 2, borderColor: \"black\" } : {}]}>\n            <MaterialIcons name=\"add\" size={1} />\n          </Surface>\n        </TouchableRipple>\n      </Card.Content>\n      <HelperText type={!!error ? \"error\" : \"info\"}>\n        { error || helperText }\n      </HelperText>\n    </Card>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 10, textAlign: \"center\" },\n\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }\n});\n\nexport default ColorPicker;","import ColorPicker from \"./ColorPicker\";\n\nexport default ColorPicker;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Surface } from \"react-native-paper\";\n\ninterface IPhonePreview {\n  primaryColor?: string;\n  secondaryColor?: string;\n}\n\nfunction PhonePreview(props: IPhonePreview) {\n\n  const { primaryColor, secondaryColor } = props;\n\n  return (\n    <View>\n      <Surface style={styles.previewContainer}>\n        <View style={[styles.previewAppBar, { backgroundColor: primaryColor }]} />\n        <View style={[styles.previewLoadCard]} />\n        <View style={[styles.previewLoadCard2]} />\n        <View style={[styles.previewLoadCard3]} />\n        <View style={[styles.previewButton, { backgroundColor: secondaryColor }]} />\n        <View style={[styles.previewTabBar, { backgroundColor: primaryColor }]} />\n      </Surface>\n      <Text style={styles.label}>Phone</Text>\n    </View>\n          \n  )\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"white\",\n    fontSize: 16,\n    marginTop: 8\n  },\n  previewContainer: {\n    height: 200,\n    width: 100,\n    borderRadius: 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#CCCCCC\",\n    alignSelf: \"center\"\n  },\n\n  previewAppBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: 0,\n    borderTopRightRadius: 5,\n    borderTopLeftRadius: 5,\n  },\n  previewTabBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    bottom: 0,\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n  },\n  previewLoadCard: {\n    width: \"96%\",\n    borderRadius: 2,\n    height: \"20%\",\n    marginVertical: \"2%\",\n    marginHorizontal: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n  },\n  previewLoadCard2: {\n    width: \"96%\",\n    height: \"20%\",\n    borderRadius: 2,\n    backgroundColor: \"#DDDDDD\",\n    marginVertical: \"2%\",\n    marginHorizontal: \"2%\",\n    position: \"absolute\",\n    top: \"37%\",\n  },\n  previewLoadCard3: {\n    width: \"96%\",\n    height: \"20%\",\n    borderRadius: 2,\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    marginHorizontal: \"2%\",\n    position: \"absolute\",\n    top: \"59%\",\n  },\n  previewButton: {\n    width: \"35%\",\n    height: \"6%\",\n    position: \"absolute\",\n    bottom: 22,\n    right: 5,\n    borderRadius: 5,\n    backgroundColor: \"#DDDDDD\",\n  },\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default PhonePreview;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Surface } from \"react-native-paper\";\n\ninterface IWebPreview {\n  primaryColor?: string;\n  secondaryColor?: string;\n}\n\nfunction WebPreview(props: IWebPreview) {\n\n  const { primaryColor, secondaryColor } = props;\n\n  return (\n    <View>\n    <Surface style={styles.previewContainer}>\n      <View style={[styles.previewAppBar, { backgroundColor: primaryColor }]} />\n      <View style={[styles.previewLoadCard]} />\n      <View style={[styles.previewLoadCard2]} />\n      <View style={[styles.previewLoadCard3]} />\n      <View style={[styles.previewButton, { backgroundColor: secondaryColor }]} />\n      <View style={[styles.previewTabBar, { backgroundColor: primaryColor }]} />\n    </Surface>\n      <Text style={styles.label}>Web</Text>\n    </View>\n          \n  )\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"white\",\n    fontSize: 16,\n    marginTop: 8\n  },\n  previewContainer: {\n    height: 100,\n    width: 170,\n    borderRadius: 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#CCCCCC\",\n    alignSelf: \"center\"\n  },\n\n  previewAppBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: 0,\n    borderTopRightRadius: 5,\n    borderTopLeftRadius: 5,\n  },\n  previewTabBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    bottom: 0,\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n  },\n  previewLoadCard: {\n    width: \"30%\",\n    height: \"60%\",\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"2%\"\n  },\n  previewLoadCard2: {\n    width: \"30%\",\n    height: \"60%\",\n    backgroundColor: \"#DDDDDD\",\n    marginVertical: \"2%\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"35%\"\n  },\n  previewLoadCard3: {\n    width: \"30%\",\n    height: \"60%\",\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"68%\"\n  },\n  previewButton: {\n    width: \"12%\",\n    height: \"6%\",\n    position: \"absolute\",\n    bottom: 15,\n    right: 8,\n    borderRadius: 5,\n    backgroundColor: \"#DDDDDD\",\n  },\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default WebPreview;","import * as React from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n  const { style, children, contentContainerStyle, ...rest } = props;\n\n\n  return (\n    <ScrollView\n      {...rest}\n      keyboardDismissMode=\"on-drag\"\n      keyboardShouldPersistTaps=\"handled\"\n      contentInsetAdjustmentBehavior=\"always\"\n      style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, style]}\n      contentContainerStyle={[styles.content, contentContainerStyle]}\n    >\n      {children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateUserArgs, UpdateUserPayload, UserSignUpPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $pushToken: String,\n    $nickname: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        pushToken: $pushToken\n        name: $name,\n        phone: $phone,\n        email: $email,\n        nickname: $nickname,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      user {\n        id\n        name\n        exitWeight\n        email\n        pushToken\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateUserArgs[\"input\"][\"attributes\"], UpdateUserPayload>(\n  MUTATION_UPDATE_USER, {\n    getPayload: (result) => result.updateUser,\n    fieldErrorMap: {\n      license: \"licenseId\",\n      exit_weight: \"exitWeight\",\n    },\n  }\n);","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n    primary: \"#333333\",\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n    primary: \"#333333\",\n  },\n};\n\ninterface IGlobalState {\n\n  currentDropzoneId: number;\n  // @deprecated\n  currentUser: User | null;\n  credentials: Credential | null;\n  // @deprecated\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  expoPushToken: string;\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nexport const initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  currentDropzoneId: null,\n  permissions: [],\n  credentials: null,\n  expoPushToken: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setExpoPushToken: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.expoPushToken = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone | null>) => {\n      state.currentDropzone = action.payload;\n      state.currentDropzoneId = action.payload?.id ? Number(action.payload?.id) : null;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"static/media/logo.6fa2ed95.png\";","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema.d\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nexport const initialState: IExtraEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/extra',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IExtraEditState, action: PayloadAction<boolean | Extra>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n        state.fields.cost.value = action.payload.cost;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ILoadEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/load',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ILoadEditState, action: PayloadAction<boolean | Load>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useMutationUpdateUser from \"./useMutationUpdateUser\";\n\nexport const QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        credits\n        hasCredits\n        hasExitWeight\n        hasMembership\n        hasReserveInDate\n        hasRigInspection\n        hasLicense\n        permissions\n        expiresAt\n\n        role {\n          id\n          name\n        }\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              amount\n            }\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          pushToken\n\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            loadNumber\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function useCurrentDropzone() {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const pushToken = useAppSelector(state => state.global.expoPushToken);\n  const dispatch = useAppDispatch();\n\n  const currentDropzone = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: dropzoneId,\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: () => null,\n    onError: () => null,\n  });\n\n  // Update remote push token if we have a local token, but no\n  // token saved on the server. This is done so that the server\n  // is able to send us push notifications\n  React.useEffect(() => {\n    const userId = currentDropzone?.data?.dropzone?.currentUser?.user?.id;\n    const remoteToken = currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken;\n    const localToken = pushToken;\n\n    if (!currentDropzone.loading && currentDropzone.called) {\n      if (localToken && localToken !== remoteToken) {\n        mutationUpdateUser.mutate({\n          id: Number(userId),\n          pushToken: localToken,\n        })\n      }\n    }\n\n  }, [pushToken, currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken]);\n\n  // Trigger the user setup wizard if the user doesn't have isSetupComplete: true\n  React.useEffect(() => {\n\n    if (currentDropzone?.data?.dropzone?.currentUser?.id) {\n      const { currentUser } = currentDropzone?.data?.dropzone;\n\n      const isSetupComplete = currentUser.hasLicense && currentUser.user?.rigs?.length && currentUser?.user?.exitWeight && currentUser?.user?.rigs?.some((rig)=>  rig.canopySize);\n\n      if (!isSetupComplete) {\n        dispatch(actions.forms.user.setOpen(currentUser.user));\n        if (currentUser?.user?.rigs?.length) {\n          dispatch(actions.forms.rig.setOpen(currentUser.user.rigs[0]));\n        }\n\n        dispatch(actions.forms.userWizard.setOpen(currentUser.user));\n      }\n    }\n  }, [JSON.stringify(currentDropzone?.data?.dropzone?.currentUser)]);\n\n  return {\n    ...currentDropzone,\n    dropzone: currentDropzone?.data?.dropzone,\n    currentUser: currentDropzone?.data?.dropzone?.currentUser,\n  }\n}","import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      testID=\"snackbar-message\"\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\n\nexport default MyComponent;","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { License, Query } from \"../../../graphql/schema.d\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseChipSelect(props: ILicenseSelect) {\n\n  const { data } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        License\n      </List.Subheader>\n      <ChipSelect<License>\n        autoSelectFirst\n        icon=\"ticket-account\"\n        items={data?.licenses || []}\n        selected={[props.value].filter(Boolean) as License[]}\n        isSelected={(item) => item.id === props.value?.id}\n        renderItemLabel={(license) => license?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport ColorPicker from \"../../input/colorpicker\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { PhonePreview, WebPreview } from '../../theme_preview';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\n\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = React.useState(false);\n  const [colorPicker, setColorPicker] = React.useState<\"primary\" | \"secondary\" | null>(null);\n\n  React.useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.forms.dropzone.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.forms.dropzone.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Title title=\"Banner\" />\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={styles.card}>\n        <List.Subheader>Name</List.Subheader>\n        <TextInput\n          mode=\"outlined\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n        <FederationSelect\n          value={state.fields.federation.value}\n          onSelect={(value) => dispatch(actions.forms.dropzone.setField([\"federation\", value]))}\n          required\n        />\n        <HelperText type={!!state.fields.federation.error ? \"error\" : \"info\"}>\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n      </Card>\n        \n\n      \n      <Card style={styles.card}>\n        <Card.Title title=\"Branding\" />\n        <Card.Content style={{ flexDirection: \"row\", justifyContent: \"space-evenly\", alignItems: \"flex-end\", width: \"100%\" }}>\n        <PhonePreview\n          primaryColor={state.fields.primaryColor.value}\n          secondaryColor={state.fields.secondaryColor.value}\n        />\n\n        <WebPreview\n          primaryColor={state.fields.primaryColor.value}\n          secondaryColor={state.fields.secondaryColor.value}\n        />\n        </Card.Content>\n      </Card>\n        \n      <ColorPicker\n        title=\"Primary color\"\n        helperText=\"Primary color is used for elements like the title bar and the tab bar\"\n        error={state.fields.primaryColor.error}\n        onChange={(color) => dispatch(actions.forms.dropzone.setField([\"primaryColor\", color]))}\n        value={state.fields.primaryColor.value}\n      />\n\n      <ColorPicker\n        title=\"Accent color\"\n        helperText=\"Accent color is used for highlights, like buttons and loading bars\"\n        error={state.fields.secondaryColor.error}\n        onChange={(color) => dispatch(actions.forms.dropzone.setField([\"secondaryColor\", color]))}\n        value={state.fields.secondaryColor.value}\n      />\n\n      <List.Item\n        title=\"Use credit system\"\n        description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n        onPress={() =>\n          dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n        }\n        left={() =>\n          <Checkbox\n            onPress={() =>\n              dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n            }\n            status={state.fields.isCreditSystemEnabled.value\n                ? \"checked\"\n                : \"unchecked\"\n            }\n          />\n        }\n      />\n\n      <List.Item\n        title=\"Public\"\n        description=\"Your dropzone will not be available in the app if this is disabled\"\n        onPress={() =>\n          dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n        }\n        left={() =>\n          <Checkbox\n            onPress={() =>\n              dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n            }\n            status={state.fields.isPublic.value\n                ? \"checked\"\n                : \"unchecked\"\n            }\n          />\n      }/>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Switch } from \"react-native-paper\";\nimport { Mutation, Permission, UserRole } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { actions, useAppDispatch } from \"../../redux\";\n\ninterface IPermissionListItem {\n  title: string;\n  description?: string;\n  role: UserRole;\n  permissionName: string;\n}\n\nconst MUTATION_UPDATE_ROLE = gql`\n  mutation UpdateRole($roleId: Int!, $permissionName: String!, $enabled: Boolean!) {\n    updateRole(input: {\n      id: $roleId,\n      permission: $permissionName,\n      enabled: $enabled\n    }) {\n      role {\n        id\n        name\n        permissions\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function PermissionListItem(props: IPermissionListItem) {\n  const { title, description, role, permissionName } = props;\n  const canChangePermissions = useRestriction(Permission.GrantPermission);\n  const [mutationUpdatePermission, mutation] = useMutation<Mutation>(MUTATION_UPDATE_ROLE);\n  const dispatch = useAppDispatch();\n\n  return (\n    <List.Item\n      disabled={!canChangePermissions}\n      style={{ width: \"100%\" }}\n      right={() =>\n        <Switch\n          value={role.permissions.includes(permissionName)}\n          onValueChange={async () => {\n            const result = await mutationUpdatePermission({\n              variables: {\n                roleId: Number(role.id),\n                permissionName,\n                enabled: !role.permissions.includes(permissionName)\n              },\n              optimisticResponse: {\n                updateRole: {\n                  role: {\n                    ...role,\n                    permissions: !role.permissions.includes(permissionName)\n                      ? role.permissions.filter((name) => name !== permissionName)\n                      : [...role.permissions, permissionName]\n                  }\n                }\n              }\n            });\n\n            if (result?.data?.updateRole?.errors?.length) {\n              result?.data?.updateRole?.errors?.map((message) =>\n                dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n              );\n              return;\n            }\n          }}\n        />\n      }\n      {...{ title, description }}\n    />\n  );\n}","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport * as React from 'react';\nimport Constants from \"expo-constants\";\nimport { actions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = React.useMemo(() =>\n    onError(({ graphQLErrors, networkError, operation, response }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `Session expired`, variant: \"error\" })\n        )\n        dispatch(\n          actions.global.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors && process.env.EXPO_ENV !== 'production') {\n        graphQLErrors.map((err) => {\n          const { message, locations, path, stack, source, name, nodes } = err;\n          dispatch(\n            actions.notifications.showSnackbar({ message: `[GraphQL error]: ${message}, ${JSON.stringify(locations)}, ${path}`, variant: \"error\" })\n          )\n          console.error(\n            `[GraphQL error]: ${message}, ${JSON.stringify(locations)}, ${path}, ${name}, ${nodes}`\n          );\n          console.error(JSON.stringify(err));\n          console.error(operation);\n        });\n      }\n      if (networkError) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = React.useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = React.useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [\n    Linking.makeUrl('/'),\n    \"https://openmanifest.org\",\n    \"openmanifest://\",\n    \"http://localhost:19006\"\n  ],\n  config: {\n    screens: {\n      confirm: {\n        path: \"/confirm\",\n        params: {\n          account_confirmation_success: undefined,\n        }\n      },\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          \n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as React from \"react\";\nimport { Paragraph, Button} from \"react-native-paper\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\n\n\ninterface ISetupWarning {\n  credits: number;\n  loading: boolean;\n  isRigSetUp: boolean;\n  isRigInspectionComplete: boolean;\n  isCreditSystemEnabled: boolean;\n  isExitWeightDefined: boolean;\n  isReserveInDate: boolean;\n  isMembershipInDate: boolean;\n}\n\nfunction Warning(props: { title: string, action?: () => void }) {\n  return (\n    <View style={styles.warning}>\n        <Paragraph style={{ color: \"white\",  }}>\n          {props.title}\n        </Paragraph>\n      </View>\n  );\n}\n\nexport default function SetupWarning(props: ISetupWarning) {\n  const { credits, loading, isCreditSystemEnabled, isRigSetUp, isExitWeightDefined, isMembershipInDate, isReserveInDate, isRigInspectionComplete } = props;\n\n  if (props.loading) {\n    return null;\n  }\n  \n  const navigation = useNavigation();\n\n  if (!isExitWeightDefined || !isRigSetUp) {\n    const missing = [\n      !isExitWeightDefined ? \"exit weight\" : null,\n      !isRigSetUp ? \"at least one rig\" : null,\n    ].filter(Boolean);\n\n    return (\n      <Warning\n        title={`You need to define ${missing.join(\"and\")} in your profile`}\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    );\n  } else if (!isMembershipInDate) {\n    return (\n      <Warning\n        title=\"Your membership seems to be out of date\"\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    )\n  } else if (!isRigInspectionComplete) {\n    return (\n      <Warning\n        title={`Your rig must be inspected before you can manifest at this dropzone`}\n      />\n    );\n  } else if (!isReserveInDate) {\n    return (\n      <Warning\n        title={`Your reserve repack is due. You cannot manifest if your repack is out of date.`}\n      />\n    );\n  } else if (isCreditSystemEnabled && !credits && !loading) {\n    return (\n      <Warning\n        title=\"You'll need to top up on credits before you can manifest\"\n      />\n    );\n  }\n\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"black\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n","import * as React from \"react\";\nimport { Appbar, Menu, IconButton, Divider, Chip } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { StyleSheet } from \"react-native\";\nimport SetupWarning from \"./SetupWarning\";\n\nconst QUERY_CURRENT_USER = gql`\n  query QueryDropzone($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      isCreditSystemEnabled\n\n      currentUser {\n        id\n        credits\n        expiresAt\n        \n        rigInspections {\n          id\n          rig {\n            id\n            repackExpiresAt\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface IAppBarProps extends StackHeaderProps {\n  hideWarnings?: boolean;\n}\n\n\nfunction AppBar(props: IAppBarProps) {\n  const { navigation, previous, scene, hideWarnings } = props;\n  const [contextMenuOpen, setContextMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [loadData, { data, loading }] = useLazyQuery<Query>(QUERY_CURRENT_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId)\n    }\n  });\n\n  React.useEffect(() => {\n    if (currentDropzoneId) {\n      loadData();\n    }\n  }, [loadData, currentDropzoneId])\n  \n  const showCredits = !!data?.dropzone?.isCreditSystemEnabled;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} titleStyle={{ fontWeight: \"bold\" }} />\n\n      { scene.descriptor.options.headerRight\n        ? scene.descriptor.options.headerRight({ tintColor: \"white\" })\n        : (\n          <Chip mode=\"outlined\">\n            {`$${data?.dropzone?.currentUser?.credits || 0}`}\n          </Chip>\n        )}\n      <Menu\n        onDismiss={() => setContextMenuOpen(false)}\n        visible={contextMenuOpen}\n        anchor={\n          <IconButton\n            icon=\"dots-vertical\"\n            color=\"#FFFFFF\"\n            onPress={() => setContextMenuOpen(true)}\n          />\n      }>\n        <Menu.Item\n          title=\"Change dropzone\"\n          icon=\"radar\"\n          onPress={() => {\n            navigation.replace(\"DropzonesScreen\");\n            setContextMenuOpen(false);\n          }}\n        />\n        <Divider />\n        <Menu.Item\n          title=\"Log out\"\n          icon=\"logout\"\n          onPress={() => {\n            dispatch(actions.global.logout());\n            setContextMenuOpen(false);\n          }}\n        />\n      </Menu>\n    </Appbar.Header>\n    { hideWarnings ? null : (\n      <SetupWarning\n        credits={data?.dropzone?.currentUser?.credits || 0}\n        loading={loading}\n        isCreditSystemEnabled={!!data?.dropzone?.isCreditSystemEnabled}\n        isExitWeightDefined={!!data?.dropzone?.currentUser?.user?.exitWeight}\n        isMembershipInDate={!!data?.dropzone?.currentUser?.expiresAt && data?.dropzone?.currentUser?.expiresAt > (new Date().getTime() / 1000)}\n        isReserveInDate={\n          !!data?.dropzone?.currentUser?.user?.rigs?.some((rig) => {\n            const isRigInspected = data.dropzone?.currentUser?.rigInspections?.map((inspection) => inspection?.rig?.id === rig.id);\n            const isRepackInDate = (rig.repackExpiresAt || 0) > (new Date().getTime() / 1000);\n            return isRigInspected && isRepackInDate;\n          })\n        }\n        isRigInspectionComplete={!!data?.dropzone?.currentUser?.rigInspections?.length}\n        isRigSetUp={!!data?.dropzone?.currentUser?.user?.rigs?.length}\n      />\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { DropzoneUser, Slot } from '../../graphql/schema';\nimport { useAppSelector } from '../../redux';\n\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nconst ManifestGroupScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupScreen'));\nconst ManifestGroupUserSelectScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupUserSelectScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  CreateLoadScreen: undefined;\n  ManifestGroupUserSelectScreen: undefined;\n  ManifestGroupScreen: {\n    users?: DropzoneUser[];\n    slots?: Slot[]\n    loadId?: number\n  };\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n      <Manifest.Screen name=\"ManifestGroupScreen\" component={ManifestGroupScreen} options={{ title: \"Manifest group\" }}/>\n      <Manifest.Screen name=\"ManifestGroupUserSelectScreen\" component={ManifestGroupUserSelectScreen} options={{ title: \"Select users\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\n\nconst NotificationsScreen = React.lazy(() => import('../../screens/authenticated/notifications/NotificationsScreen'));\n\nexport type IProfileTabParams = {\n  NotificationsScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function Notifications() {\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"NotificationsScreen\"\n        component={NotificationsScreen}\n        options={{ title: \"Notifications\" }}\n      />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nconst UpdateUserScreen = React.lazy(() => import('../../screens/authenticated/profile/UpdateUserScreen'));\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentUser } = useCurrentDropzone();\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst SettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/SettingsScreen'));\nconst TicketTypeSettingsScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/TicketTypesScreen'));\nconst CreatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/CreatePlaneScreen'));\nconst UpdatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/UpdatePlaneScreen'));\nconst UpdateDropzoneScreen = React.lazy(() => import('../../screens/authenticated/dropzones/UpdateDropzoneScreen'));\nconst PlanesScreen = React.lazy(() => import('../../screens/authenticated/planes/PlanesScreen'));\nconst RigInspectionTemplateScreen = React.lazy(() => import('../../screens/authenticated/settings/RigInspectionTemplateScreen'));\nconst DropzoneRigsScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneRigsScreen'));\nconst DropzonePermissionScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzonePermissionScreen'));\nconst DropzoneMasterLogScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneMasterLogScreen'));\n\n\nconst CreateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/CreateExtraScreen'));\nconst UpdateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/UpdateExtraScreen'));\nconst ExtrasScreen = React.lazy(() => import('../../screens/authenticated/extras/ExtrasScreen'));\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n  RigInspectionTemplateScreen: undefined;\n  DropzoneRigsScreen: undefined;\n  DropzonePermissionScreen: undefined;\n  DropzoneMasterLogScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} options={{ title: \"Basic settings\" }} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n      <Settings.Screen name=\"RigInspectionTemplateScreen\" component={RigInspectionTemplateScreen} options={{ title: \"Rig Inspection Form\" }} />\n      <Settings.Screen name=\"DropzoneRigsScreen\" component={DropzoneRigsScreen} options={{ title: \"Dropzone rigs\" }} />\n      <Settings.Screen name=\"DropzonePermissionScreen\" component={DropzonePermissionScreen} options={{ title: \"Permissions\" }} />\n      <Settings.Screen\n        name=\"DropzoneMasterLogScreen\"\n        component={DropzoneMasterLogScreen}\n        options={{ title: \"Master log\"}}\n        />\n    </Settings.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst UsersScreen = React.lazy(() => import('../../screens/authenticated/users/UsersScreen'));\nconst SearchableAppBar = React.lazy(() => import('../../screens/authenticated/users/AppBar'));\nconst RigInspectionScreen = React.lazy(() => import('../../screens/authenticated/rig/RigInspectionScreen'));\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nimport { actions, useAppDispatch, useAppSelector } from '../../redux';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: {\n    select?: boolean;\n    loadId: number;\n    onSelect?(): void;\n  };\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.screens.users);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(actions.screens.users.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(actions.screens.users.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport NotificationTab from \"./tabs/notifications\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useRestriction from '../hooks/useRestriction';\nimport { Permission } from '../graphql/schema.d';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Notifications: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(Permission.ReadUser);\n\n  const canUpdateDropzone = useRestriction(Permission.UpdateDropzone);\n  const canUpdatePlane = useRestriction(Permission.UpdatePlane);\n  const canUpdateTicketTypes = useRestriction(Permission.UpdateTicketType);\n  const canUpdateExtras = useRestriction(Permission.UpdateExtra);\n  const canUpdatePermissions = useRestriction(Permission.GrantPermission);\n  const canUpdateDzRigs = useRestriction(Permission.UpdateDropzoneRig);\n  const canUpdateRigInspectionTemplate = useRestriction(Permission.UpdateFormTemplate);\n\n  const shouldShowSettings = canUpdateDropzone\n  || canUpdatePlane\n  || canUpdateTicketTypes\n  || canUpdateExtras\n  || canUpdatePermissions\n  || canUpdateDzRigs\n  || canUpdateRigInspectionTemplate;\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n        style: {\n          backgroundColor: theme.colors.primary,\n        }\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Notifications\"\n        component={NotificationTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"bell\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n\n     \n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { shouldShowSettings && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema.d\";\n\nimport { useNavigation } from '@react-navigation/core';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) => {\n          return (\n            <Card\n              style={{\n                width: (Dimensions.get(\"window\").width / 2) - 32,\n                margin: 8\n              }}\n              onPress={async ()=> {\n                if (item?.node) {\n                  const shouldPushRoute = !!globalState.currentDropzoneId; \n                  dispatch(\n                    actions.global.setDropzone(item.node)\n                  );\n\n                  if (shouldPushRoute) {\n                    navigation.replace(\"Authenticated\", { screen: \"HomeScreen\"});\n                  }\n                }\n              }}\n            >\n              <Card.Cover source={{ uri: item?.node?.banner as string }} />\n              <Card.Content>\n                <Title>{item?.node?.name}</Title>\n              </Card.Content>\n            </Card>\n          )\n        }}\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => {\n          dispatch(actions.forms.plane.reset());\n          dispatch(actions.forms.ticketType.reset());\n          dispatch(actions.forms.dropzone.reset());\n          dispatch(actions.forms.dropzoneWizard.setOpen(true));\n        }}\n        label=\"Create dropzone\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\",\n    backgroundColor: \"#FF1414\",\n  },\n  fab: {\n    position: 'absolute',\n    margin: 32,\n    right: 16,\n    bottom: 0,\n    backgroundColor: \"#FFFFFF\"\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String,\n  $federationId: Int!\n  $primaryColor: String\n  $secondaryColor: String\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId, primaryColor: $primaryColor, secondaryColor: $secondaryColor }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner?: string,\n  federationId: number,\n  primaryColor: string,\n  secondaryColor: string,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\n\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\n\nexport default function CreateDropzoneScreen() {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(actions.notifications.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(actions.global.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { Image, KeyboardAvoidingView, StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { View } from '../../../components/Themed';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Mutation } from '../../../graphql/schema';\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\n\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.screens.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = React.useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              actions.global.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              actions.global.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(actions.notifications.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Image source={logo} style={{ height: 300, width: \"100%\" }} resizeMode=\"contain\" />\n      <KeyboardAvoidingView style={styles.fields} behavior=\"padding\">\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" labelStyle={styles.buttonLabel} style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button labelStyle={styles.textButtonLabel} style={styles.textButton} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: primaryColor,\n    paddingTop: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  \n  fields: {\n    marginBottom: 10,\n    marginTop: -50,\n    maxWidth: 400,\n    width: \"100%\",\n    paddingHorizontal: 56,\n    backgroundColor: \"transparent\"\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  textButton: {\n    marginTop: 10,\n    backgroundColor: \"transparent\",\n    color: \"white\",\n    width: \"100%\"\n  },\n  textButtonLabel: {\n    color: \"#FFFFFF\",\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $pushToken: String\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      pushToken: $pushToken,\n      licenseId: $licenseId,\n      confirmSuccessUrl: \"https://openmanifest.org/confirm/\"\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { Image, KeyboardAvoidingView, StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\nimport { useNavigation } from '@react-navigation/core';\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.screens.signup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      // Reset the form and redirect to login screen with a snackbar\n      dispatch(\n        actions.notifications.showSnackbar({ message: \"A confirmation link has been sent to your email\", variant: \"success\" })\n      );\n\n      navigation.navigate(\"LoginScreen\");\n      // Credentials are received on login only now. Return\n      return;\n      if (payload.credentials) {\n        dispatch(\n          actions.global.setCredentials(payload.credentials)\n        );\n        dispatch(\n          actions.global.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.screens.signup.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen style={styles.container} contentContainerStyle={styles.content}>\n      <KeyboardAvoidingView style={styles.fields} behavior=\"position\">\n        <Image source={logo} style={{ width: \"100%\", height: 200 }} resizeMode=\"contain\" />\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          labelStyle={styles.buttonLabel} \n          style={styles.button}\n          onPress={() =>\n            onSignUp({\n              pushToken: globalState.expoPushToken,\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </KeyboardAvoidingView>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: primaryColor,\n  },\n  content: {\n    paddingHorizontal: 60,\n    alignItems: \"center\",\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    flexGrow: 1,\n    maxWidth: 400,\n    backgroundColor: \"transparent\"\n  },\n  field: {\n    marginBottom: 8,\n    backgroundColor: \"white\",\n    borderColor: \"white\",\n    color: \"white\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\nimport UserWizardScreen from '../screens/user_wizard/UserWizardScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { StyleSheet, Text, View } from \"react-native\";\nimport { useRoute } from \"@react-navigation/core\";\nimport * as React from \"react\";\nimport { Avatar } from \"react-native-paper\";\nimport { successColor, warningColor } from \"../../../constants/Colors\";\n\n\nfunction ConfirmUserScreen() {\n\n  const route = useRoute<{\n    key: string,\n    name: string,\n    params?: { account_confirmation_success?: string }\n  }>();\n\n  return (\n    route?.params?.account_confirmation_success === \"true\" ?\n      <View style={styles.container}>\n        <Avatar.Icon icon=\"check\" style={styles.icon} />\n        <Text style={styles.title}>All done!</Text>\n        <Text style={styles.subtitle}>You can now log in</Text>\n      </View>\n    : <View style={styles.container}>\n        <Avatar.Icon icon=\"close\" style={styles.errorIcon} />\n        <Text style={styles.title}>Oops!</Text>\n        <Text style={styles.subtitle}>Something went wrong. Please contact support</Text>\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { \n    flexGrow: 1,\n    backgroundColor: \"#FF0000\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  icon: {\n    backgroundColor: successColor,\n    marginBottom: 16,\n  },\n  errorIcon: {\n    backgroundColor: warningColor,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 38,\n    color: \"#FFFFFF\",\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: 26,\n    color: \"#FFFFFF\",\n    textAlign: \"center\",\n  },\n});\n\nexport default ConfirmUserScreen;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\n\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport DropzonesScreen from '../screens/authenticated/dropzones/DropzonesScreen';\nimport ConfirmUserScreen from \"../screens/unauthenticated/signup/ConfirmUserScreen\";\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  confirm: { account_confirmation_success?: boolean };\n  Dropzones: undefined;\n  DropzonesScreen: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n          )\n      }\n      <Stack.Screen name=\"confirm\" component={ConfirmUserScreen} />\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      \n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from \"react\";\nimport { View, StyleSheet, Dimensions } from \"react-native\";\nimport { Avatar } from \"react-native-paper\";\nimport { PaginationProps } from \"react-native-swiper-flatlist\";\nimport { successColor } from \"../../constants/Colors\";\n\ninterface IWizardPagination extends PaginationProps {\n  icons?: string[];\n}\nexport default function WizardPagination(props: IWizardPagination) {\n  const { size, paginationIndex, icons } = props;\n\n  const { width } = Dimensions.get('window');\n  const screenWidth = width > 500 ? 500 : width;\n  \n  const bridgeLength = (screenWidth - (48 * 2) - (size * 30)) / size;\n\n  return (\n    <View style={styles.pagination}>\n      {\n        Array.from({ length: size }).map((_, index) => {\n          const hasCustomIcon = icons && icons.length > index;\n          const isPast = index < paginationIndex;\n          const isCurrent = index == paginationIndex;\n          let defaultIcon = isPast\n            ? \"check\" : \"\";\n          defaultIcon = isCurrent ? \"pencil\" : defaultIcon;\n\n          return (\n            <React.Fragment key={index}>\n              <Avatar.Icon\n                icon={\n                  hasCustomIcon\n                    ? icons[index]\n                    : defaultIcon\n                }\n                size={30}\n                style={[\n                  styles.icon,\n                  paginationIndex > index ? styles.iconDone : undefined\n                ]}\n              />\n              {\n                size - 1 > index\n                  ? <View style={[styles.bridge, { width: bridgeLength }, paginationIndex > index ? styles.bridgeDone : undefined]} />\n                  : null\n              }\n            </React.Fragment>\n          );\n        })\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pagination: {\n    flexDirection: \"row\",\n    position: \"absolute\",\n    top: 100,\n    alignSelf: \"center\",\n  },\n  bridge: {\n    height: 10,\n    marginTop: 10,\n    marginLeft: -2,\n    width: 50,\n    backgroundColor: \"white\",\n  },\n  bridgeDone: {\n    backgroundColor: successColor,\n  },\n  icon: {\n    backgroundColor: \"white\",\n    marginLeft: -1\n  },\n  iconDone: {\n    backgroundColor: successColor,\n    marginLeft: -1,\n  },\n});","import * as React from \"react\";\nimport { Dimensions, StyleSheet, View } from \"react-native\";\nimport { Button } from \"react-native-paper\";\nimport { SwiperFlatList } from 'react-native-swiper-flatlist';\nimport { useAppSelector } from \"../../redux\";\nimport WizardPagination from \"./Pagination\";\n\ninterface IWizardProps {\n  children: React.ReactNode;\n  loading?: boolean;\n  icons?: string[];\n  onNext(currentIndex: number): Promise<boolean>;\n}\n\nfunction Wizard(props: IWizardProps) {\n  const { children, icons, onNext, loading } = props;\n  const [index, setIndex] = React.useState(0);\n  const ref = React.useRef<SwiperFlatList>(null);\n\n  const isLastItem = index === React.Children.count(children) - 1;\n\n  return (\n    <View style={[styles.container]}>\n      <SwiperFlatList\n        showPagination\n        index={index}\n        PaginationComponent={(props) => \n          <WizardPagination {...props} icons={icons} />\n        }\n        numColumns={1}\n        scrollEnabled={false}\n        autoplay={false}\n        ref={ref}\n        onChangeIndex={({ index, prevIndex }) => {\n          console.log({ index, prevIndex });\n          setIndex(index || 0);\n        }}\n      >\n        {children}\n      </SwiperFlatList>\n\n      <View style={styles.buttons}>\n      <Button\n        key={`button-next-${index}`}\n        loading={loading}\n        mode=\"contained\"\n        color=\"#FFFFFF\"\n        disabled={loading}\n        style={styles.button}\n        onPress={async () => {\n          // @ts-ignore\n          const shouldNavigate = await onNext(ref.current.getCurrentIndex());\n\n          if (shouldNavigate) {\n            // @ts-ignore\n            ref.current.scrollToIndex({ index: ref.current.getCurrentIndex() + 1 });\n          }\n        }}\n      >\n        {\n          isLastItem ? \"Done\" : \"Next\"\n        }\n      </Button>\n\n      {\n        index === 0\n          ? null\n          : (\n            <Button\n              key={`button-${index}`}\n              mode=\"text\"\n              disabled={loading}\n              color=\"#FFFFFF\"\n              style={styles.buttonBack}\n              onPress={async () => {\n                // @ts-ignore\n                ref.current.scrollToIndex({ index: ref.current.getCurrentIndex() - 1 });\n              }}\n            >\n              {\n                \"Back\"\n              }\n            </Button>     \n          )\n      }\n      </View>\n    </View>\n  );\n}\n\nconst { width } = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  button: {\n    alignSelf: \"center\",\n    width: \"100%\",\n  },\n  buttonBack: {\n    alignSelf: \"center\",\n    width: \"100%\",\n    marginHorizontal: 48\n  },\n  container: {\n    width,\n    flex: 1,\n    paddingBottom: 100\n  },\n  buttons: {\n    position: \"absolute\",\n    bottom: 100,\n    alignSelf: \"center\",\n    width: \"100%\",\n    paddingHorizontal: 48,\n    maxWidth: 404,\n  }\n});\n\nexport default Wizard;","import * as React from \"react\";\nimport { Dimensions, View, StyleSheet } from \"react-native\";\nimport { SafeAreaView, SafeAreaViewProps } from \"react-native-safe-area-context\";;\n\nexport function WizardScreen(props: SafeAreaViewProps) {\n  const { width } = Dimensions.get('window');\n  const screenWidth = width > 500 ? 500 : width;\n  return (\n    <View style={StyleSheet.flatten([styles.wizardScreen, { width }, props.style])}>\n      <View style={{ width: screenWidth, paddingHorizontal: 48, alignSelf: \"center\" }}>\n        { props.children }\n      </View>\n    </View>\n  )\n}\n\n\n\nconst styles = StyleSheet.create({\n  wizardScreen: {\n    justifyContent: \"center\",\n  },\n});\n\nexport default WizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, Title } from \"react-native-paper\";\nimport LicenseChipSelect from \"../../../input/chip_select/LicenseChipSelect\";\nimport FederationSelect from \"../../../input/dropdown_select/FederationSelect\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction FederationWizardSceen() {\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Title style={styles.title}>What license do you have?</Title>\n\n\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <FederationSelect\n            value={state?.fields?.license?.value?.federation || state.federation.value}\n            onSelect={(value) => dispatch(actions.forms.user.setFederation(value))}\n            required\n          />\n          <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n            { state.federation.error || \"\" }\n          </HelperText>\n        </Card>\n\n        <Card style={{ padding: 16 }}>\n          { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n            <>\n              <LicenseChipSelect\n                value={state.fields.license.value}\n                federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n                onSelect={(value) => dispatch(actions.forms.user.setField([\"license\", value]))}\n                required\n              />\n              <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n                { state.fields.license.error || \"\" }\n              </HelperText>\n            </>\n          )}\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 100,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  } \n});\n\nexport default FederationWizardSceen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { Card, HelperText, List, Menu, TextInput, Title } from \"react-native-paper\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction RigWizardScreen() {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const [isOtherMake, setIsOtherMake] = React.useState(false);\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Title style={styles.title}>What're you jumping?</Title>\n\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Manufacturer</List.Subheader>\n          <Menu\n            onDismiss={() => setMenuOpen(false)}\n            visible={isMenuOpen}\n            anchor={\n              <TouchableOpacity onPress={() => setMenuOpen(true)}>\n              <TextInput\n                pointerEvents=\"box-only\"\n                style={styles.field}\n                mode=\"outlined\"\n                error={!!state.fields.make.error}\n                value={\n                  isOtherMake\n                    ? \"Other\" \n                    : state.fields.make.value || \"Select manufacturer\"\n                }\n                disabled\n              />\n              </TouchableOpacity>\n            }>\n            {\n              [\"Icon\", \"Javelin\", \"Mirage\", \"Vector\", \"PA (Talon)\", \"Infinity\", \"Parachutes de France\", \"Racer\"].map((make) => \n                <Menu.Item\n                  onPress={() => {\n                    setMenuOpen(false);\n                    dispatch(actions.forms.rig.setField([\"make\", make]));\n                    setIsOtherMake(false);\n                  }}\n                  title={make}\n                />\n              )}\n              <Menu.Item\n                onPress={() => {\n                  setMenuOpen(false);\n                  dispatch(actions.forms.rig.setField([\"make\", \"\"]));\n                  setIsOtherMake(true);\n                }}\n                title={\"Other\"}\n              />\n          </Menu>\n          {\n            !isOtherMake ? null : (\n              <TextInput\n                style={styles.field}\n                mode=\"outlined\"\n                label=\"Other manufacturer\"\n                error={!!state.fields.make.error}\n                value={state.fields.make.value || \"\"}\n                onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"make\", newValue]))}\n              />\n            )\n          }\n          \n          <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n            { state.fields.make.error || \"\" }\n          </HelperText>\n        \n          <List.Subheader>Model</List.Subheader>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            error={!!state.fields.model.error}\n            value={state.fields.model.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"model\", newValue]))}\n          />\n          <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n            { state.fields.model.error || \"e.g G4.1\" }\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card}>\n          <List.Subheader>Serial numebr</List.Subheader>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            error={!!state.fields.serial.error}\n            value={state.fields.serial.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"serial\", newValue]))}\n          />\n          <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n            { state.fields.serial.error || \"\" }\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 16, marginVertical: 16 },\n  title: {\n    color: \"white\",\n    marginBottom: 16,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  }\n});\n\nexport default RigWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, Title } from \"react-native-paper\";\nimport DatePicker from \"../../../input/date_picker/DatePicker\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction ReserveRepackWizardScreen() {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Title style={styles.title}>Next reserve repack?</Title>\n\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Due date</List.Subheader>\n          <DatePicker\n            timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n            onChange={(time) => dispatch(actions.forms.rig.setField([\"repackExpiresAt\", time]))}\n          />\n          <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n            { state.fields.repackExpiresAt.error || \"\" }\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 80, textAlign: \"center\" }\n});\n\nexport default ReserveRepackWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Avatar, Card, HelperText, List, Paragraph } from \"react-native-paper\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { ceil, debounce } from \"lodash\";\n\nfunction WingloadingWizardScreen() {\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const userForm = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n  const [canopySize, setCanopySize] = React.useState(rigForm.fields.canopySize.value || 120);\n\n\n  React.useEffect(() => {\n    setCanopySize(rigForm.fields.canopySize.value);\n  }, [rigForm.fields.canopySize.value]);\n\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Text style={styles.title}>Your wingloading</Text>\n\n      <View style={styles.content}>\n        <Card>\n          <Card.Content style={{ flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <View style={styles.wingLoadingCardLeft}>\n              <Avatar.Text\n                label={\n                  ceil(\n                    2.205 * Number(userForm.fields.exitWeight.value || 50) /\n                    (rigForm.fields.canopySize.value || 150),\n                    2\n                  ).toString()\n                }\n                size={100}\n                style={styles.wingLoading}\n              />\n            </View>\n            <View style={styles.wingLoadingCardRight}>\n              <Card.Title title=\"Your wingloading\" style={{ paddingLeft: 0 }} />\n              <Paragraph>Your wingloading is an indicator of your descent rate under canopy</Paragraph>\n            </View>\n            \n          </Card.Content>\n        </Card>\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Your exit weight</List.Subheader>\n            <Text style={styles.cardValue}>{(userForm.fields.exitWeight.value || 50)}kg</Text>\n          </View>\n          <Slider\n            style={styles.sliderControl}\n            minimumValue={50}\n            maximumValue={160}\n            step={0.5}\n            minimumTrackTintColor=\"#FF1414\"\n            maximumTrackTintColor=\"#000000\"\n            onValueChange={debounce((value) =>\n              dispatch(actions.forms.user.setField([\"exitWeight\", value.toString()])),\n              20\n            )}\n          />\n          <HelperText type={userForm.fields.exitWeight?.error ? \"error\" : \"info\" }>\n            { userForm.fields.exitWeight?.error || \"Your weight in kg's with all equipment on\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Canopy size</List.Subheader>\n            <Text style={styles.cardValue}>{(canopySize || 120)}ft</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={34}\n              maximumValue={350}\n              step={1}\n              value={canopySize || 120}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={(size) => setCanopySize(size)}\n              onSlidingComplete={() => dispatch(actions.forms.rig.setField([\"canopySize\", canopySize]))}\n            />\n          </View>\n            \n          <HelperText type={userForm.fields.exitWeight?.error ? \"error\" : \"info\" }>\n            {userForm.fields.exitWeight?.error || \"Size of your main canopy in square feet\"}\n          </HelperText>\n        </Card>\n        \n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 50,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default WingloadingWizardScreen;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateRigArgs, UpdateRigPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateRigArgs[\"input\"][\"attributes\"], UpdateRigPayload>(\n  MUTATION_UPDATE_RIG, {\n    getPayload: (result) => result.updateRig,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationCreateRigArgs, CreateRigPayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationCreateRigArgs[\"input\"][\"attributes\"], CreateRigPayload>(\n  MUTATION_CREATE_RIG, {\n    getPayload: (result) => result.createRig,\n    fieldErrorMap: {\n    },\n  }\n);","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Portal, Modal, Dialog } from \"react-native-paper\";\nimport Wizard from \"../../wizard/Wizard\";\nimport FederationStep from \"./steps/Federation\";\nimport RigStep from \"./steps/Rig\";\nimport ReserveRepackStep from \"./steps/ReserveRepack\";\nimport WingloadingStep from \"./steps/Wingloading\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport useMutationUpdateUser from \"../../../graphql/hooks/useMutationUpdateUser\";\nimport useMutationUpdateRig from \"../../../graphql/hooks/useMutationUpdateRig\";\nimport useMutationCreateRig from \"../../../graphql/hooks/useMutationCreateRig\";\n\nfunction UserWizardScreen() {\n  const userForm = useAppSelector(state => state.forms.user);\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const state = useAppSelector(state => state.forms.userWizard);\n  const dispatch = useAppDispatch();\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: (e) => true,\n    onError: (e) => console.error(e),\n    onFieldError: (l,v) => console.error(l,v)\n  });\n  const mutationUpdateRig = useMutationUpdateRig({\n    onSuccess: () => true,\n    onError: (e) => console.error(e),\n    onFieldError: (l,v) => console.error(l,v)\n  });\n  const mutationCreateRig = useMutationCreateRig({\n    onSuccess: (e) => true,\n    onFieldError: (l,v) => console.error(l,v)\n  });\n\n  const onFederationNext = React.useCallback(async () => {\n    // Validate\n    if (!userForm.fields.license?.value?.id) {\n      dispatch(actions.forms.user.setFieldError([\"license\", \"You must select a license\"]));\n      return false;\n    }\n\n    // Update user license\n    try {\n      await mutationUpdateUser.mutate({\n        id: Number(userForm.original.id),\n        licenseId: Number(userForm.fields.license?.value?.id)\n      });\n      return true;\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(userForm.fields)]);\n\n  const onRigNext = React.useCallback(async () => {\n    // Validate\n    if (!rigForm.fields.make?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"make\", \"Please select manufacturer\"]));\n      return false;\n    }\n\n    if (!rigForm.fields.model?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"model\", \"Please enter a model name\"]));\n      return false;\n    }\n\n    // Create user rig\n    try {\n      const rig = !rigForm.original?.id\n        ? await mutationCreateRig.mutate({\n          make: rigForm.fields.make.value,\n          model: rigForm.fields.model.value,\n          serial: rigForm.fields.serial.value,\n          userId: Number(userForm.original.id),\n        })\n        : await mutationUpdateRig.mutate({\n          id: Number(rigForm.original?.id),\n          make: rigForm.fields.make.value,\n          model: rigForm.fields.model.value,\n          serial: rigForm.fields.serial.value,\n          userId: Number(userForm.original.id),\n        });\n\n      dispatch(actions.forms.rig.setOpen(rig.rig));\n      return true;\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(userForm.fields), JSON.stringify(userForm.original), JSON.stringify(rigForm.original)]);\n\n  const onReserveRepackNext = React.useCallback(async () => {\n    // Validate\n    if (!rigForm.fields.repackExpiresAt?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"repackExpiresAt\", \"Select repack date, even if it's in the past\"]));\n      return false;\n    }\n\n    // Update repack expiry date\n    try {\n      const rig = await mutationUpdateRig.mutate({\n        id: Number(rigForm.original?.id),\n        repackExpiresAt: rigForm.fields.repackExpiresAt.value,\n      });\n      dispatch(actions.forms.rig.setOpen(rig.rig));\n      return true;\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(rigForm.original?.id)]);\n\n  const onWingloadingNext = React.useCallback(async () => {\n    // Validate\n    if (!rigForm.fields.canopySize?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"canopySize\", \"You must provide a canopy size\"]));\n      return false;\n    }\n\n    if (!userForm.fields.exitWeight?.value) {\n      dispatch(actions.forms.user.setFieldError([\"exitWeight\", \"You must enter your exit weight\"]));\n      return false;\n    }\n\n    // Update repack expiry date\n    try {\n      const rig = await mutationUpdateRig.mutate({\n        id: Number(rigForm.original?.id),\n        canopySize: rigForm.fields.canopySize.value,\n      });\n      const user = await mutationUpdateUser.mutate({\n        id: Number(userForm.original?.id),\n        exitWeight: Number(userForm.fields.exitWeight?.value),\n      });\n      \n      dispatch(actions.forms.userWizard.setOpen(false));\n      dispatch(actions.forms.user.setOpen(false));\n      dispatch(actions.forms.rig.setOpen(false));\n      dispatch(actions.forms.userWizard.reset());\n      dispatch(actions.forms.user.reset());\n      dispatch(actions.forms.rig.reset());\n    } catch (e) {\n      console.log(e);\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(userForm.fields), rigForm.original?.id, dispatch]);\n\n  \n  const onNextStep = React.useCallback(async (index): Promise<boolean> => {\n    switch (index) {\n      case 0:\n        return onFederationNext();\n      case 1:\n        return onRigNext();\n      case 2:\n        return onReserveRepackNext();\n      case 3:\n        return onWingloadingNext();\n    }\n  }, [onFederationNext, onRigNext, onReserveRepackNext, onWingloadingNext]);\n\n\n  return (\n    <Portal>\n      <Modal\n        visible={state.open}\n        dismissable={false}\n        style={styles.modal}\n        contentContainerStyle={{ height: \"100%\" }}\n      >\n\n          <Wizard\n            onNext={onNextStep}\n            loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n          >\n            <FederationStep />\n            <RigStep />\n            <ReserveRepackStep />\n            <WingloadingStep />\n          </Wizard>\n      </Modal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    paddingLeft: 0,\n    marginLeft: 0,\n    marginBottom: 0,\n    marginTop: 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    backgroundColor: \"red\",\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\"\n  }\n})\n\nexport default UserWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, TextInput, Title } from \"react-native-paper\";\nimport FederationSelect from \"../../../input/dropdown_select/FederationSelect\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction NameAndFederationWizardSceen() {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Title style={styles.title}>Give your dropzone a name</Title>\n\n\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Name</List.Subheader>\n          <TextInput\n            mode=\"outlined\"\n            error={!!state.fields.name.error}\n            value={state.fields.name.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n          />\n          <HelperText type=\"error\">\n            { state.fields.name.error || \"\" }\n          </HelperText>\n        </Card>\n        <Card style={styles.card}>\n          <FederationSelect\n            value={state.fields.federation.value}\n            onSelect={(value) => dispatch(actions.forms.dropzone.setField([\"federation\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.federation.error ? \"error\" : \"info\"}>\n            { state.fields.federation.error || \"\" }\n          </HelperText>\n        </Card>\n\n        \n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 100,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  } \n});\n\nexport default NameAndFederationWizardSceen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card, HelperText, List, TextInput } from \"react-native-paper\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { debounce } from \"lodash\";\n\nfunction AircraftWizardScreen() {\n  const state = useAppSelector(state => state.forms.plane);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Text style={styles.title}>Aircraft</Text>\n\n      <View style={styles.content}>\n      <Card style={styles.card}>\n        <List.Subheader>Information</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"name\", newValue]))}\n        />\n        <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n          { state.fields.name.error || \"\" }\n        </HelperText>\n      \n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Registration\"\n          error={!!state.fields.registration.error}\n          value={state.fields.registration.value}\n          onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"registration\", newValue]))}\n        />\n        <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n          { state.fields.registration.error || \"\" }\n        </HelperText>\n      </Card>\n\n      <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Minimum slots</List.Subheader>\n            <Text style={styles.cardValue}>{(state.fields.minSlots.value || 0)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={0}\n              maximumValue={state.fields.maxSlots.value || 34}\n              step={1}\n              value={state.fields.minSlots.value || 0}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={debounce((value) =>\n                dispatch(actions.forms.plane.setField([\"minSlots\", value])),\n                20\n              )}\n            />\n          </View>\n            \n          <HelperText type={state.fields.minSlots?.error ? \"error\" : \"info\" }>\n            {state.fields.minSlots?.error || \"How many slots are required to be filled to dispatch a load with this aircraft\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Max slots</List.Subheader>\n            <Text style={styles.cardValue}>{(state.fields.maxSlots.value || 34)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={2}\n              maximumValue={34}\n              step={1}\n              value={state.fields.maxSlots.value || 16}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={debounce((value) =>\n                dispatch(actions.forms.plane.setField([\"maxSlots\", Number(value)])),\n                20\n              )}\n            />\n          </View>\n            \n          <HelperText type={state.fields.maxSlots?.error ? \"error\" : \"info\" }>\n            {state.fields.maxSlots?.error || \"Max available slots on this aircraft\"}\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 4 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 10,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default AircraftWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, Surface, Title, TouchableRipple } from \"react-native-paper\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport { PhonePreview, WebPreview } from \"../../../theme_preview\";\nimport ColorPicker from \"../../../input/colorpicker\";\n\nfunction ReserveRepackWizardScreen() {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Title style={styles.title}>Branding</Title>\n\n      <View style={styles.content}>\n\n        <View style={{ flexDirection: \"row\", alignItems: \"flex-end\", justifyContent: \"space-evenly\" }}>\n          <PhonePreview\n            primaryColor={state.fields.primaryColor.value}\n            secondaryColor={state.fields.secondaryColor.value}\n          />\n\n          <WebPreview\n            primaryColor={state.fields.primaryColor.value}\n            secondaryColor={state.fields.secondaryColor.value}\n          />\n        </View>\n          \n        <ColorPicker\n          title=\"Primary color\"\n          helperText=\"Primary color is used for elements like the title bar and the tab bar\"\n          error={state.fields.primaryColor.error}\n          onChange={(color) => dispatch(actions.forms.dropzone.setField([\"primaryColor\", color]))}\n          value={state.fields.primaryColor.value}\n        />\n\n        <ColorPicker\n          title=\"Accent color\"\n          helperText=\"Accent color is used for highlights, like buttons and loading bars\"\n          error={state.fields.secondaryColor.error}\n          onChange={(color) => dispatch(actions.forms.dropzone.setField([\"secondaryColor\", color]))}\n          value={state.fields.secondaryColor.value}\n        />\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 10, textAlign: \"center\" },\n\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default ReserveRepackWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card } from \"react-native-paper\";\nimport { capitalize } from \"lodash\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport { Permission, Query } from \"../../../../graphql/schema.d\";\nimport PermissionListItem from \"../../../permissions/PermissionListItem\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst QUERY_DROPZONE_PERMISSIONS = gql`\n  query QueryDropzonePermissions(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n        permissions\n      }\n    }\n  }\n`;\n\ninterface IPermissionWizardScreen {\n  permission: Permission,\n  title: string;\n}\n\n\nfunction WingloadingWizardScreen(props: IPermissionWizardScreen) {\n  const { title, permission } = props;\n  const dropzoneForm = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n  const [queryRoles, { data, loading, called }] = useLazyQuery<Query>(QUERY_DROPZONE_PERMISSIONS);\n\n  React.useEffect(() => {\n    if (dropzoneForm.original?.id) {\n      queryRoles({\n        variables: {\n          dropzoneId: Number(dropzoneForm.original.id)\n        }\n      });\n    }\n  }, [dropzoneForm.original]);\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Text style={styles.title}>{title}</Text>\n\n      <View style={styles.content}>\n        {\n          !(called && !loading && data?.dropzone?.roles?.length) ? null : (\n            <Card>\n              <Card.Content style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n                {\n                  data?.dropzone?.roles?.map((role) =>\n                    <PermissionListItem\n                      permissionName={permission}\n                      role={role}\n                      title={capitalize(role.name.replace(/_/, \" \"))}\n                    />\n                  )\n                }\n              </Card.Content>\n            </Card>\n          )\n        }\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 50,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default WingloadingWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card, HelperText, List, Menu, Paragraph, TextInput } from \"react-native-paper\";\nimport WizardScreen from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { debounce } from \"lodash\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nfunction TicketTypeWizardScreen() {\n  const state = useAppSelector(state => state.forms.ticketType);\n  const dispatch = useAppDispatch();\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n\n  return (\n    <WizardScreen style={styles.container}>\n      <Text style={styles.title}>Tickets</Text>\n      <Paragraph style={styles.paragraph}>You can add more tickets later under Settings</Paragraph>\n\n      <View style={styles.content}>\n      <Card style={styles.card}>\n        <List.Subheader>Name</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"name\", newValue]))}\n        />\n        <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n          { state.fields.name.error || \"\" }\n        </HelperText>\n      </Card>\n\n      <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Price</List.Subheader>\n            <Text style={styles.cardValue}>${(state.fields.cost.value || 0)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={0}\n              maximumValue={500}\n              step={1}\n              value={state.fields.cost.value || 0}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={debounce((value) =>\n                dispatch(actions.forms.ticketType.setField([\"cost\", value])),\n                20\n              )}\n            />\n          </View>\n            \n          <HelperText type={state.fields.cost?.error ? \"error\" : \"info\" }>\n            {state.fields.cost?.error || \"How many slots are required to be filled to dispatch a load with this aircraft\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          \n          <Menu\n            onDismiss={() => setAltitudeMenuOpen(false)}\n            visible={altitudeMenuOpen}\n            contentStyle={{ width: 300 }}\n            anchor={\n              <TouchableOpacity onPress={() => setAltitudeMenuOpen(true)}>\n                <View style={styles.cardTitle}>\n                  <List.Subheader>Altitude</List.Subheader>\n                  <Text style={styles.cardValue}>\n                    {\n                      state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                      {\n                        \"14000\": \"Height\",\n                        \"4000\": \"Hop n Pop\",\n                      }[state.fields.altitude.value.toString()] :\n                      \"Custom\"\n                    }\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            }>\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 4000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Hop n Pop\"\n                right={() => <List.Icon icon=\"parachute\" />}\n              />\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 14000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Height\"\n                right={() => <List.Icon icon=\"airplane-takeoff\" />}\n              />\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 7000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Other\"\n                right={() => <List.Icon icon=\"parachute\" />}\n              />\n          </Menu>\n\n          {\n            (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n              <TextInput\n                style={styles.field}\n                mode=\"outlined\"\n                label=\"Custom altitude\"\n                error={!!state.fields.altitude.error}\n                value={state.fields.altitude?.value?.toString()}\n                onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"altitude\", Number(newValue)]))}\n              />\n            )\n          }\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 8,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n  },\n  paragraph: {\n    color: \"white\",\n    marginBottom: 8,\n    fontWeight: \"bold\",\n    // fontSize: 25,\n    textAlign: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n    marginHorizontal: 16,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default TicketTypeWizardScreen;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateDropzoneArgs, UpdateDropzonePayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateDropzoneArgs[\"input\"][\"attributes\"], UpdateDropzonePayload>(\n  MUTATION_UPDATE_DROPZONE, {\n    getPayload: (result) => result.updateDropzone,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreatePlanePayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{\n  name: string,\n  registration: string,\n  dropzoneId: number\n  minSlots: number\n  maxSlots: number\n  hours?: number\n  nextMaintenanceHours?: number\n}, CreatePlanePayload>(\n  MUTATION_CREATE_PLANE, {\n    getPayload: (result) => result.createPlane,\n    fieldErrorMap: {\n      dropzone: \"dropzoneId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\"),\n      ],\n      registration: [\n        isRequired(\"Registration is required\"),\n      ],\n    }\n  }\n)","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdatePlaneArgs, UpdatePlanePayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdatePlaneArgs[\"input\"][\"attributes\"], UpdatePlanePayload>(\n  MUTATION_UPDATE_PLANE, {\n    getPayload: (result) => result.updatePlane,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationCreateTicketTypeArgs, CreateTicketPayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default createMutation<MutationCreateTicketTypeArgs[\"input\"][\"attributes\"], CreateTicketPayload>(\n  MUTATION_CREATE_TICKET_TYPE, {\n    getPayload: (result) => result.createTicketType,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateTicketTypeArgs, UpdateTicketPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateTicketTypeArgs[\"input\"][\"attributes\"], UpdateTicketPayload>(\n  MUTATION_UPDATE_TICKET_TYPE, {\n    getPayload: (result) => result.updateTicketType,\n    fieldErrorMap: {\n      \n    },\n  }\n);","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Portal, Modal } from \"react-native-paper\";\nimport Wizard from \"../../wizard/Wizard\";\nimport NameAndFederationStep from \"./steps/Name\";\nimport AircraftStep from \"./steps/Aircraft\";\nimport ThemingStep from \"./steps/Theming\";\nimport PermissionStep from \"./steps/Permissions\";\nimport TicketTypeStep from \"./steps/TicketType\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport useMutationCreateDropzone from \"../../../graphql/hooks/useMutationCreateDropzone\";\nimport useMutationUpdateDropzone from \"../../../graphql/hooks/useMutationUpdateDropzone\";\nimport useMutationCreatePlane from \"../../../graphql/hooks/useMutationCreatePlane\";\nimport useMutationUpdatePlane from \"../../../graphql/hooks/useMutationUpdatePlane\";\nimport useMutationCreateTicketType from \"../../../graphql/hooks/useMutationCreateTicketType\";\nimport useMutationUpdateTicketType from \"../../../graphql/hooks/useMutationUpdateTicketType\";\nimport { Permission } from \"../../../graphql/schema.d\";\n\n\nfunction DropzoneWizardScreen() {\n  const state = useAppSelector(state => state.forms.dropzoneWizard);\n  const aircraft = useAppSelector(state => state.forms.plane);\n  const ticket = useAppSelector(state => state.forms.ticketType);\n  const dropzone = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const mutationCreateDropzone = useMutationCreateDropzone({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as any, value])),\n  });\n  const mutationUpdateDropzone = useMutationUpdateDropzone({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as any, value])),\n  });\n  const mutationCreatePlane = useMutationCreatePlane({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.plane.setFieldError([field as any, value])),\n  });\n  const mutationUpdatePlane = useMutationUpdatePlane({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.plane.setFieldError([field as any, value])),\n  });\n  const mutationCreateTicketType = useMutationCreateTicketType({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.ticketType.setFieldError([field as any, value])),\n  });\n  const mutationUpdateTicketType = useMutationUpdateTicketType({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.ticketType.setFieldError([field as any, value])),\n  });\n\n\n  const onBasicInfoNext = React.useCallback(async (): Promise<boolean> => {\n    if (!dropzone.fields.name.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"name\", \"Your dropzone must have a name\"]));\n      return false;\n    }\n\n    if (!dropzone.fields.federation.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"federation\", \"Your dropzone must have an associated organization\"]));\n      return false;\n    }\n\n    return true;\n  }, [JSON.stringify(dropzone.fields), dropzone.original]);\n\n  const onThemingNext = React.useCallback(async (): Promise<boolean> => {\n    if (!dropzone.fields.primaryColor.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"primaryColor\", \"Please pick a primary color\"]));\n      return false;\n    }\n    if (!dropzone.fields.secondaryColor.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"secondaryColor\", \"Please pick an accent color\"]));\n      return false;\n    }\n\n    // Create or update dropzone\n    const result = !dropzone.original?.id\n      ? await mutationCreateDropzone.mutate({\n          federationId: Number(dropzone.fields.federation.value?.id),\n          name: dropzone.fields.name.value,\n          banner: \"\",\n          primaryColor: dropzone.fields.primaryColor.value,\n          secondaryColor: dropzone.fields.secondaryColor.value,\n        })\n      : await mutationUpdateDropzone.mutate({\n          id: Number(dropzone.original.id),\n          federationId: Number(dropzone.fields.federation.value?.id),\n          name: dropzone.fields.name.value,\n          primaryColor: dropzone.fields.primaryColor.value,\n          secondaryColor: dropzone.fields.secondaryColor.value,\n          banner: \"\",\n        });\n\n\n      if (!result.errors?.length && result.dropzone?.id) {\n        dispatch(actions.forms.dropzone.setOpen(result.dropzone));\n        dispatch(actions.global.setDropzone(result.dropzone));\n        dispatch(actions.global.setPrimaryColor(result.dropzone.primaryColor));\n        dispatch(actions.global.setAccentColor(result.dropzone.secondaryColor));\n        return true;\n      }\n      return false;\n\n  }, [JSON.stringify(dropzone.fields), dropzone.original]);\n\n  const onAircraftNext = React.useCallback(async (): Promise<boolean> => {\n    if (!aircraft.fields.name.value) {\n      dispatch(actions.forms.plane.setFieldError([\"name\", \"You must name your aircraft\"]));\n      return false;\n    }\n    if (!aircraft.fields.registration.value) {\n      dispatch(actions.forms.plane.setFieldError([\"registration\", \"Please provide aircraft registration\"]));\n      return false;\n    }\n\n    // Create or update dropzone\n    const result = !aircraft.original?.id\n      ? await mutationCreatePlane.mutate({\n          dropzoneId: Number(dropzone.original.id),\n          name: aircraft.fields.name.value,\n          registration: aircraft.fields.registration.value,\n          minSlots: aircraft.fields.minSlots.value,\n          maxSlots: aircraft.fields.maxSlots.value,\n        })\n      : await mutationUpdatePlane.mutate({\n          id: Number(aircraft.original.id),\n          name: aircraft.fields.name.value,\n          registration: aircraft.fields.registration.value,\n          minSlots: aircraft.fields.minSlots.value,\n          maxSlots: aircraft.fields.maxSlots.value,\n        });\n\n\n      if (!result.errors?.length && result.plane?.id) {\n        dispatch(actions.forms.plane.setOpen(result.plane));\n        return true;\n      }\n      return false;\n\n  }, [JSON.stringify(aircraft.fields), dropzone.original, JSON.stringify(aircraft.original)]);\n\n\n  const onTicketTypeNext = React.useCallback(async (): Promise<boolean> => {\n    if (!ticket.fields.name.value) {\n      dispatch(actions.forms.ticketType.setFieldError([\"name\", \"You must name your ticket\"]));\n      return false;\n    }\n\n    if (!ticket.fields.cost.value) {\n      dispatch(actions.forms.ticketType.setFieldError([\"cost\", \"Tickets must have a price\"]));\n      return false;\n    }\n\n    // Create or update dropzone\n    const result = !ticket.original?.id\n      ? await mutationCreateTicketType.mutate({\n          dropzoneId: Number(dropzone.original.id),\n          name: ticket.fields.name.value,\n          cost: ticket.fields.cost.value,\n          altitude: ticket.fields.altitude.value,\n          isTandem: false,\n          allowManifestingSelf: true,\n        })\n      : await mutationUpdateTicketType.mutate({\n          id: Number(ticket.original.id),\n          name: ticket.fields.name.value,\n          cost: ticket.fields.cost.value,\n          altitude: ticket.fields.altitude.value,\n          isTandem: false,\n          allowManifestingSelf: true,\n        });\n\n\n      if (!result.errors?.length && result.ticketType?.id) {\n        dispatch(actions.forms.ticketType.setOpen(result.ticketType));\n        return true;\n      }\n      return false;\n\n  }, [JSON.stringify(ticket.fields), dropzone.original, JSON.stringify(ticket.original)]);\n  \n  const onNextStep = React.useCallback(async (index): Promise<boolean> => {\n    switch (index) {\n      case 0:\n        return onBasicInfoNext();\n      case 1:\n        return onThemingNext();\n      case 2:\n        return onAircraftNext();\n      case 3:\n        return onTicketTypeNext();\n      case 4:\n        return true;\n      case 5:\n        dispatch(\n          actions.global.setDropzone(dropzone.original)\n        );\n        dispatch(actions.forms.dropzoneWizard.setOpen(false));\n        dispatch(actions.forms.dropzoneWizard.reset());\n        dispatch(actions.forms.ticketType.setOpen(false));\n        dispatch(actions.forms.plane.setOpen(false));\n        dispatch(actions.forms.dropzone.setOpen(false));\n        dispatch(actions.forms.ticketType.reset());\n        dispatch(actions.forms.plane.reset());\n        dispatch(actions.forms.dropzone.reset());\n      default:\n        return false;\n    }\n  }, [onBasicInfoNext, onThemingNext, onAircraftNext, onTicketTypeNext]);\n\n\n  return (\n    <Portal>\n      <Modal\n        visible={state.open}\n        dismissable={false}\n        style={styles.modal}\n        contentContainerStyle={{ height: \"100%\" }}\n      >\n          <Wizard\n            onNext={onNextStep}\n            loading={\n              mutationCreateDropzone.loading ||\n              mutationUpdateDropzone.loading ||\n              mutationCreatePlane.loading ||\n              mutationUpdatePlane.loading ||\n              mutationCreateTicketType.loading ||\n              mutationUpdateTicketType.loading\n            }\n          >\n            <NameAndFederationStep />\n            <ThemingStep />\n            <AircraftStep />\n            <TicketTypeStep />\n            <PermissionStep title=\"Who can manifest?\" permission={Permission.CreateSlot} />\n            <PermissionStep title=\"Manifest other people?\" permission={Permission.CreateUserSlot} />\n          </Wizard>\n      </Modal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    paddingLeft: 0,\n    marginLeft: 0,\n    marginBottom: 0,\n    marginTop: 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    backgroundColor: \"red\",\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\",\n  }\n})\n\nexport default DropzoneWizardScreen;","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport Constants from \"expo-constants\";\nimport * as Notifications from 'expo-notifications';\nimport * as React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar, Portal } from \"react-native-paper\"\nimport { Linking, Platform, View } from 'react-native';\nimport { NavigationContainer, useLinking } from '@react-navigation/native';\nimport URI from \"urijs\";\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector, useAppDispatch } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport NotificationArea from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\nimport { actions } from './redux';\nimport UserWizardScreen from './components/dialogs/UserWizard/UserWizardScreen';\nimport DropzoneWizardScreen from './components/dialogs/DropzoneWizard/DropzoneWizard';\n\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      console.warn('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    console.warn('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const notificationListener = React.useRef<ReturnType<typeof Notifications.addNotificationReceivedListener>>();\n  const responseListener = React.useRef<ReturnType<typeof Notifications.addNotificationResponseReceivedListener>>();\n\n  const onOutsideLink = (link) => {\n    console.log(link);\n    const uri = URI(link.url);\n    const intendedRoute = uri.path();\n    console.log(intendedRoute);\n  };\n\n  React.useEffect(() => {\n    registerForPushNotificationsAsync().then(token => dispatch(actions.global.setExpoPushToken(token)));\n\n    // This listener is fired whenever a notification is received while the app is foregrounded\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      dispatch(actions.notifications.showSnackbar({ message: notification.request.content.body, variant: \"warning\" }));\n    });\n\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    Linking.addEventListener(\"url\", onOutsideLink);\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      Linking.removeEventListener(\"url\", onOutsideLink);\n    };\n  }, []);\n\n  return (\n    <React.Suspense\n      fallback={\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n\n            </NavigationContainer>\n\n            <StatusBar />\n            <UserWizardScreen />\n            <DropzoneWizardScreen />\n            <NotificationArea />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </React.Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n        <PersistGate\n          persistor={persistor}\n          loading={\n            <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n              <ActivityIndicator size=\"large\" />\n            </View>\n        }>\n          <Content />\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\nimport { useFonts, Inter_400Regular, Inter_500Medium, Inter_700Bold } from \"@expo-google-fonts/inter\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  const [fontsLoaded] = Font.useFonts({\n    Inter_400Regular,\n    Inter_500Medium,\n    Inter_700Bold\n  });\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete && fontsLoaded;\n}\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = React.useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","export * from \"./store\";","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AnyResource = {};\n\n/** Autogenerated input type of CreateDropzone */\nexport type CreateDropzoneInput = {\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateDropzone */\nexport type CreateDropzonePayload = {\n  __typename?: 'CreateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateExtra */\nexport type CreateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateExtra */\nexport type CreateExtraPayload = {\n  __typename?: 'CreateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateLoad */\nexport type CreateLoadInput = {\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateLoad */\nexport type CreateLoadPayload = {\n  __typename?: 'CreateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreatePlane */\nexport type CreatePlaneInput = {\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreatePlane */\nexport type CreatePlanePayload = {\n  __typename?: 'CreatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of CreateRig */\nexport type CreateRigInput = {\n  attributes: RigInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateRigInspection */\nexport type CreateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateRigInspection */\nexport type CreateRigInspectionPayload = {\n  __typename?: 'CreateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of CreateRig */\nexport type CreateRigPayload = {\n  __typename?: 'CreateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of CreateSlot */\nexport type CreateSlotInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlot */\nexport type CreateSlotPayload = {\n  __typename?: 'CreateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of CreateSlots */\nexport type CreateSlotsInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlots */\nexport type CreateSlotsPayload = {\n  __typename?: 'CreateSlotsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreateTicket */\nexport type CreateTicketInput = {\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTicket */\nexport type CreateTicketPayload = {\n  __typename?: 'CreateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of CreateTransaction */\nexport type CreateTransactionInput = {\n  attributes: TransactionInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTransaction */\nexport type CreateTransactionPayload = {\n  __typename?: 'CreateTransactionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  transaction?: Maybe<Transaction>;\n};\n\nexport type Credential = {\n  __typename?: 'Credential';\n  accessToken: Scalars['String'];\n  client: Scalars['String'];\n  expiry: Scalars['Int'];\n  tokenType: Scalars['String'];\n  uid: Scalars['String'];\n};\n\n/** Autogenerated input type of DeleteDropzone */\nexport type DeleteDropzoneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteDropzone */\nexport type DeleteDropzonePayload = {\n  __typename?: 'DeleteDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n};\n\n/** Autogenerated input type of DeleteLoad */\nexport type DeleteLoadInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteLoad */\nexport type DeleteLoadPayload = {\n  __typename?: 'DeleteLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of DeletePlane */\nexport type DeletePlaneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeletePlane */\nexport type DeletePlanePayload = {\n  __typename?: 'DeletePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of DeleteSlot */\nexport type DeleteSlotInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteSlot */\nexport type DeleteSlotPayload = {\n  __typename?: 'DeleteSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of DeleteTicket */\nexport type DeleteTicketInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteTicket */\nexport type DeleteTicketPayload = {\n  __typename?: 'DeleteTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\nexport type Dropzone = AnyResource & {\n  __typename?: 'Dropzone';\n  allowedJumpTypes: Array<JumpType>;\n  banner?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Int'];\n  currentUser: DropzoneUser;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  dropzoneUsers: DropzoneUserConnection;\n  extras: Array<Extra>;\n  federation: Federation;\n  id: Scalars['ID'];\n  isCreditSystemEnabled: Scalars['Boolean'];\n  isPublic: Scalars['Boolean'];\n  loads: LoadConnection;\n  /** Get the master log entry for a given date */\n  masterLog: MasterLog;\n  name?: Maybe<Scalars['String']>;\n  planes: Array<Plane>;\n  primaryColor?: Maybe<Scalars['String']>;\n  rigInspectionTemplate?: Maybe<FormTemplate>;\n  /** Get rigs for dropzone */\n  rigs?: Maybe<Array<Rig>>;\n  roles: Array<UserRole>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n  userRoles: Array<UserRole>;\n};\n\n\nexport type DropzoneAllowedJumpTypesArgs = {\n  userId: Array<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUserArgs = {\n  id?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUsersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  permissions?: Maybe<Array<Permission>>;\n  search?: Maybe<Scalars['String']>;\n  licensed?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type DropzoneLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneMasterLogArgs = {\n  date: Scalars['Int'];\n};\n\n\nexport type DropzoneTicketTypesArgs = {\n  isPublic?: Maybe<Scalars['Boolean']>;\n};\n\n/** The connection type for Dropzone. */\nexport type DropzoneConnection = {\n  __typename?: 'DropzoneConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Dropzone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneEdge = {\n  __typename?: 'DropzoneEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Dropzone>;\n};\n\nexport type DropzoneInput = {\n  name: Scalars['String'];\n  banner?: Maybe<Scalars['String']>;\n  federationId: Scalars['Int'];\n  isPublic?: Maybe<Scalars['Boolean']>;\n  primaryColor?: Maybe<Scalars['String']>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  isCreditSystemEnabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DropzoneUser = AnyResource & {\n  __typename?: 'DropzoneUser';\n  /** Get user rigs that have been inspected and marked as OK + dropzone rigs */\n  availableRigs?: Maybe<Array<Rig>>;\n  createdAt: Scalars['Int'];\n  credits?: Maybe<Scalars['Int']>;\n  expiresAt?: Maybe<Scalars['Int']>;\n  hasCredits: Scalars['Boolean'];\n  hasExitWeight: Scalars['Boolean'];\n  hasLicense: Scalars['Boolean'];\n  hasMembership: Scalars['Boolean'];\n  hasReserveInDate: Scalars['Boolean'];\n  hasRigInspection: Scalars['Boolean'];\n  id: Scalars['ID'];\n  notifications?: Maybe<NotificationConnection>;\n  permissions?: Maybe<Array<Permission>>;\n  rigInspections?: Maybe<Array<RigInspection>>;\n  role?: Maybe<UserRole>;\n  transactions?: Maybe<TransactionConnection>;\n  unseenNotifications: Scalars['Int'];\n  updatedAt: Scalars['Int'];\n  user: User;\n};\n\n\nexport type DropzoneUserNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneUserTransactionsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for DropzoneUser. */\nexport type DropzoneUserConnection = {\n  __typename?: 'DropzoneUserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DropzoneUser>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneUserEdge = {\n  __typename?: 'DropzoneUserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DropzoneUser>;\n};\n\nexport type DropzoneUserInput = {\n  expiresAt?: Maybe<Scalars['Int']>;\n  credits?: Maybe<Scalars['Float']>;\n  userRoleId?: Maybe<Scalars['Int']>;\n};\n\nexport type Extra = {\n  __typename?: 'Extra';\n  cost: Scalars['Int'];\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type ExtraInput = {\n  name?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  ticketTypeIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Federation = {\n  __typename?: 'Federation';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type FormTemplate = {\n  __typename?: 'FormTemplate';\n  createdAt: Scalars['Int'];\n  definition?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FormTemplateInput = {\n  name?: Maybe<Scalars['String']>;\n  definition?: Maybe<Scalars['String']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of GrantPermission */\nexport type GrantPermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of GrantPermission */\nexport type GrantPermissionPayload = {\n  __typename?: 'GrantPermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type JumpType = {\n  __typename?: 'JumpType';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type License = AnyResource & {\n  __typename?: 'License';\n  createdAt: Scalars['Int'];\n  federation?: Maybe<Federation>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Load = AnyResource & {\n  __typename?: 'Load';\n  createdAt: Scalars['Int'];\n  dispatchAt?: Maybe<Scalars['Int']>;\n  gca?: Maybe<DropzoneUser>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isFull: Scalars['Boolean'];\n  isOpen: Scalars['Boolean'];\n  isReady: Scalars['Boolean'];\n  loadMaster?: Maybe<DropzoneUser>;\n  loadNumber: Scalars['Int'];\n  maxSlots: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  pilot?: Maybe<DropzoneUser>;\n  plane: Plane;\n  slots?: Maybe<Array<Slot>>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Load. */\nexport type LoadConnection = {\n  __typename?: 'LoadConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LoadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Load>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type LoadEdge = {\n  __typename?: 'LoadEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Load>;\n};\n\nexport type LoadInput = {\n  dispatchAt?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  isOpen?: Maybe<Scalars['Boolean']>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  pilotId?: Maybe<Scalars['Int']>;\n  planeId?: Maybe<Scalars['Int']>;\n  gcaId?: Maybe<Scalars['Int']>;\n  loadMasterId?: Maybe<Scalars['Int']>;\n};\n\nexport type MasterLog = {\n  __typename?: 'MasterLog';\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  dzso?: Maybe<Array<DropzoneUser>>;\n  id: Scalars['ID'];\n  loads?: Maybe<Array<Load>>;\n  notes?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createDropzone?: Maybe<CreateDropzonePayload>;\n  createExtra?: Maybe<CreateExtraPayload>;\n  createLoad?: Maybe<CreateLoadPayload>;\n  createPlane?: Maybe<CreatePlanePayload>;\n  createRig?: Maybe<CreateRigPayload>;\n  createRigInspection?: Maybe<CreateRigInspectionPayload>;\n  createSlot?: Maybe<CreateSlotPayload>;\n  createSlots?: Maybe<CreateSlotsPayload>;\n  createTicketType?: Maybe<CreateTicketPayload>;\n  createTransaction?: Maybe<CreateTransactionPayload>;\n  deleteDropzone?: Maybe<DeleteDropzonePayload>;\n  deleteLoad?: Maybe<DeleteLoadPayload>;\n  deletePlane?: Maybe<DeletePlanePayload>;\n  deleteSlot?: Maybe<DeleteSlotPayload>;\n  deleteTicketType?: Maybe<DeleteTicketPayload>;\n  grantPermission?: Maybe<GrantPermissionPayload>;\n  revokePermission?: Maybe<RevokePermissionPayload>;\n  updateDropzone?: Maybe<UpdateDropzonePayload>;\n  updateDropzoneUser?: Maybe<UpdateDropzoneUserPayload>;\n  updateExtra?: Maybe<UpdateExtraPayload>;\n  updateFormTemplate?: Maybe<UpdateFormTemplatePayload>;\n  updateLoad?: Maybe<UpdateLoadPayload>;\n  updateNotification?: Maybe<UpdateNotificationPayload>;\n  updatePlane?: Maybe<UpdatePlanePayload>;\n  updateRig?: Maybe<UpdateRigPayload>;\n  updateRigInspection?: Maybe<UpdateRigInspectionPayload>;\n  updateRole?: Maybe<UpdateRolePayload>;\n  updateSlot?: Maybe<UpdateSlotPayload>;\n  updateTicketType?: Maybe<UpdateTicketPayload>;\n  updateUser?: Maybe<UpdateUserPayload>;\n  userLogin?: Maybe<UserLoginPayload>;\n  userLogout?: Maybe<UserLogoutPayload>;\n  userResendConfirmation?: Maybe<UserResendConfirmationPayload>;\n  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;\n  userSendPasswordResetWithToken?: Maybe<UserSendPasswordResetWithTokenPayload>;\n  userSignUp?: Maybe<UserSignUpPayload>;\n  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;\n  userUpdatePasswordWithToken?: Maybe<UserUpdatePasswordWithTokenPayload>;\n};\n\n\nexport type MutationCreateDropzoneArgs = {\n  input: CreateDropzoneInput;\n};\n\n\nexport type MutationCreateExtraArgs = {\n  input: CreateExtraInput;\n};\n\n\nexport type MutationCreateLoadArgs = {\n  input: CreateLoadInput;\n};\n\n\nexport type MutationCreatePlaneArgs = {\n  input: CreatePlaneInput;\n};\n\n\nexport type MutationCreateRigArgs = {\n  input: CreateRigInput;\n};\n\n\nexport type MutationCreateRigInspectionArgs = {\n  input: CreateRigInspectionInput;\n};\n\n\nexport type MutationCreateSlotArgs = {\n  input: CreateSlotInput;\n};\n\n\nexport type MutationCreateSlotsArgs = {\n  input: CreateSlotsInput;\n};\n\n\nexport type MutationCreateTicketTypeArgs = {\n  input: CreateTicketInput;\n};\n\n\nexport type MutationCreateTransactionArgs = {\n  input: CreateTransactionInput;\n};\n\n\nexport type MutationDeleteDropzoneArgs = {\n  input: DeleteDropzoneInput;\n};\n\n\nexport type MutationDeleteLoadArgs = {\n  input: DeleteLoadInput;\n};\n\n\nexport type MutationDeletePlaneArgs = {\n  input: DeletePlaneInput;\n};\n\n\nexport type MutationDeleteSlotArgs = {\n  input: DeleteSlotInput;\n};\n\n\nexport type MutationDeleteTicketTypeArgs = {\n  input: DeleteTicketInput;\n};\n\n\nexport type MutationGrantPermissionArgs = {\n  input: GrantPermissionInput;\n};\n\n\nexport type MutationRevokePermissionArgs = {\n  input: RevokePermissionInput;\n};\n\n\nexport type MutationUpdateDropzoneArgs = {\n  input: UpdateDropzoneInput;\n};\n\n\nexport type MutationUpdateDropzoneUserArgs = {\n  input: UpdateDropzoneUserInput;\n};\n\n\nexport type MutationUpdateExtraArgs = {\n  input: UpdateExtraInput;\n};\n\n\nexport type MutationUpdateFormTemplateArgs = {\n  input: UpdateFormTemplateInput;\n};\n\n\nexport type MutationUpdateLoadArgs = {\n  input: UpdateLoadInput;\n};\n\n\nexport type MutationUpdateNotificationArgs = {\n  input: UpdateNotificationInput;\n};\n\n\nexport type MutationUpdatePlaneArgs = {\n  input: UpdatePlaneInput;\n};\n\n\nexport type MutationUpdateRigArgs = {\n  input: UpdateRigInput;\n};\n\n\nexport type MutationUpdateRigInspectionArgs = {\n  input: UpdateRigInspectionInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationUpdateSlotArgs = {\n  input: UpdateSlotInput;\n};\n\n\nexport type MutationUpdateTicketTypeArgs = {\n  input: UpdateTicketInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationUserLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUserResendConfirmationArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetWithTokenArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSignUpArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  confirmSuccessUrl?: Maybe<Scalars['String']>;\n  phone: Scalars['String'];\n  exitWeight: Scalars['Float'];\n  name: Scalars['String'];\n  licenseId?: Maybe<Scalars['Int']>;\n  pushToken?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  currentPassword?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordWithTokenArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  isSeen: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n  notificationType?: Maybe<Scalars['String']>;\n  receivedBy: DropzoneUser;\n  resource?: Maybe<AnyResource>;\n  sentBy?: Maybe<DropzoneUser>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  __typename?: 'NotificationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  __typename?: 'NotificationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type NotificationInput = {\n  isSeen: Scalars['Boolean'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport enum Permission {\n  /** updateDropzone */\n  UpdateDropzone = 'updateDropzone',\n  /** deleteDropzone */\n  DeleteDropzone = 'deleteDropzone',\n  /** createLoad */\n  CreateLoad = 'createLoad',\n  /** updateLoad */\n  UpdateLoad = 'updateLoad',\n  /** deleteLoad */\n  DeleteLoad = 'deleteLoad',\n  /** readLoad */\n  ReadLoad = 'readLoad',\n  /** createSlot */\n  CreateSlot = 'createSlot',\n  /** updateSlot */\n  UpdateSlot = 'updateSlot',\n  /** deleteSlot */\n  DeleteSlot = 'deleteSlot',\n  /** createUserSlot */\n  CreateUserSlot = 'createUserSlot',\n  /** createUserSlotWithSelf */\n  CreateUserSlotWithSelf = 'createUserSlotWithSelf',\n  /** updateUserSlot */\n  UpdateUserSlot = 'updateUserSlot',\n  /** deleteUserSlot */\n  DeleteUserSlot = 'deleteUserSlot',\n  /** createStudentSlot */\n  CreateStudentSlot = 'createStudentSlot',\n  /** updateStudentSlot */\n  UpdateStudentSlot = 'updateStudentSlot',\n  /** deleteStudentSlot */\n  DeleteStudentSlot = 'deleteStudentSlot',\n  /** createTicketType */\n  CreateTicketType = 'createTicketType',\n  /** updateTicketType */\n  UpdateTicketType = 'updateTicketType',\n  /** deleteTicketType */\n  DeleteTicketType = 'deleteTicketType',\n  /** createExtra */\n  CreateExtra = 'createExtra',\n  /** updateExtra */\n  UpdateExtra = 'updateExtra',\n  /** deleteExtra */\n  DeleteExtra = 'deleteExtra',\n  /** readExtra */\n  ReadExtra = 'readExtra',\n  /** createPlane */\n  CreatePlane = 'createPlane',\n  /** updatePlane */\n  UpdatePlane = 'updatePlane',\n  /** deletePlane */\n  DeletePlane = 'deletePlane',\n  /** createRig */\n  CreateRig = 'createRig',\n  /** updateRig */\n  UpdateRig = 'updateRig',\n  /** deleteRig */\n  DeleteRig = 'deleteRig',\n  /** readRig */\n  ReadRig = 'readRig',\n  /** createDropzoneRig */\n  CreateDropzoneRig = 'createDropzoneRig',\n  /** updateDropzoneRig */\n  UpdateDropzoneRig = 'updateDropzoneRig',\n  /** deleteDropzoneRig */\n  DeleteDropzoneRig = 'deleteDropzoneRig',\n  /** readDropzoneRig */\n  ReadDropzoneRig = 'readDropzoneRig',\n  /** readPermissions */\n  ReadPermissions = 'readPermissions',\n  /** updatePermissions */\n  UpdatePermissions = 'updatePermissions',\n  /** createPackjob */\n  CreatePackjob = 'createPackjob',\n  /** updatePackjob */\n  UpdatePackjob = 'updatePackjob',\n  /** deletePackjob */\n  DeletePackjob = 'deletePackjob',\n  /** readPackjob */\n  ReadPackjob = 'readPackjob',\n  /** createFormTemplate */\n  CreateFormTemplate = 'createFormTemplate',\n  /** updateFormTemplate */\n  UpdateFormTemplate = 'updateFormTemplate',\n  /** deleteFormTemplate */\n  DeleteFormTemplate = 'deleteFormTemplate',\n  /** readFormTemplate */\n  ReadFormTemplate = 'readFormTemplate',\n  /** readUser */\n  ReadUser = 'readUser',\n  /** updateUser */\n  UpdateUser = 'updateUser',\n  /** deleteUser */\n  DeleteUser = 'deleteUser',\n  /** createUser */\n  CreateUser = 'createUser',\n  /** actAsPilot */\n  ActAsPilot = 'actAsPilot',\n  /** actAsLoadMaster */\n  ActAsLoadMaster = 'actAsLoadMaster',\n  /** actAsGCA */\n  ActAsGca = 'actAsGCA',\n  /** actAsDZSO */\n  ActAsDzso = 'actAsDZSO',\n  /** actAsRigInspector */\n  ActAsRigInspector = 'actAsRigInspector',\n  /** createUserTransaction */\n  CreateUserTransaction = 'createUserTransaction',\n  /** readUserTransactions */\n  ReadUserTransactions = 'readUserTransactions',\n  /** grantPermission */\n  GrantPermission = 'grantPermission',\n  /** revokePermission */\n  RevokePermission = 'revokePermission'\n}\n\nexport type Plane = AnyResource & {\n  __typename?: 'Plane';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  hours?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  maxSlots?: Maybe<Scalars['Int']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type PlaneInput = {\n  name?: Maybe<Scalars['String']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  hours?: Maybe<Scalars['Int']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get dropzone details */\n  dropzone: Dropzone;\n  /** Get all available dropzones */\n  dropzones: DropzoneConnection;\n  /** Get ticket addons for a dropzone */\n  extras: Array<Extra>;\n  /** Available federations */\n  federations: Array<Federation>;\n  /** Load base64 images as graphql */\n  image?: Maybe<Scalars['String']>;\n  /** Get all jump types */\n  jumpTypes: Array<JumpType>;\n  /** Get all licenses for a federation */\n  licenses: Array<License>;\n  /** Get load by id */\n  load: Load;\n  /** Get loads */\n  loads: LoadConnection;\n  /** Get planes from a dropzone */\n  planes: Array<Plane>;\n  /** Get ticket types for a dropzone */\n  ticketTypes: Array<TicketType>;\n  userCheckPasswordToken: User;\n  userConfirmAccount: User;\n};\n\n\nexport type QueryDropzoneArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryDropzonesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryExtrasArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryImageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryJumpTypesArgs = {\n  allowedForUserId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLicensesArgs = {\n  federationId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLoadArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  dropzoneId: Scalars['Int'];\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPlanesArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryTicketTypesArgs = {\n  dropzoneId: Scalars['Int'];\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryUserCheckPasswordTokenArgs = {\n  resetPasswordToken: Scalars['String'];\n  redirectUrl?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryUserConfirmAccountArgs = {\n  confirmationToken: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n/** Autogenerated input type of RevokePermission */\nexport type RevokePermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of RevokePermission */\nexport type RevokePermissionPayload = {\n  __typename?: 'RevokePermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type Rig = AnyResource & {\n  __typename?: 'Rig';\n  canopySize?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  id: Scalars['ID'];\n  isPublic: Scalars['Boolean'];\n  maintainedAt?: Maybe<Scalars['Int']>;\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  rigType?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n  user?: Maybe<User>;\n};\n\nexport type RigInput = {\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  maintainedAt?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n  /** student / sport / tandem */\n  rigType?: Maybe<Scalars['String']>;\n  isPublic?: Maybe<Scalars['Boolean']>;\n  canopySize?: Maybe<Scalars['Int']>;\n};\n\nexport type RigInspection = {\n  __typename?: 'RigInspection';\n  createdAt: Scalars['Int'];\n  definition: Scalars['String'];\n  dropzoneUser: DropzoneUser;\n  formTemplate: FormTemplate;\n  id: Scalars['ID'];\n  inspectedBy: DropzoneUser;\n  isOk: Scalars['Boolean'];\n  rig?: Maybe<Rig>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type RigInspectionInput = {\n  dropzoneId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  definition?: Maybe<Scalars['String']>;\n  isOk?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Slot = AnyResource & {\n  __typename?: 'Slot';\n  createdAt: Scalars['Int'];\n  dropzoneUser?: Maybe<DropzoneUser>;\n  exitWeight: Scalars['Int'];\n  extras?: Maybe<Array<Extra>>;\n  groupNumber: Scalars['Int'];\n  id: Scalars['ID'];\n  jumpType?: Maybe<JumpType>;\n  load: Load;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n  passengerName?: Maybe<Scalars['String']>;\n  rig?: Maybe<Rig>;\n  ticketType?: Maybe<TicketType>;\n  user?: Maybe<User>;\n  wingLoading?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotInput = {\n  userId?: Maybe<Scalars['Int']>;\n  ticketTypeId?: Maybe<Scalars['Int']>;\n  jumpTypeId?: Maybe<Scalars['Int']>;\n  loadId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n  userGroup?: Maybe<Array<SlotUser>>;\n  passengerName?: Maybe<Scalars['String']>;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotUser = {\n  id: Scalars['Int'];\n  exitWeight: Scalars['Float'];\n  rigId?: Maybe<Scalars['Int']>;\n};\n\nexport type TicketType = AnyResource & {\n  __typename?: 'TicketType';\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  altitude?: Maybe<Scalars['Int']>;\n  cost?: Maybe<Scalars['Float']>;\n  createdAt: Scalars['Int'];\n  currency?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  extras: Array<Extra>;\n  id: Scalars['ID'];\n  isTandem?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type TicketTypeInput = {\n  currency?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  name?: Maybe<Scalars['String']>;\n  altitude?: Maybe<Scalars['Int']>;\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  isTandem?: Maybe<Scalars['Boolean']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  amount: Scalars['Float'];\n  createdAt: Scalars['Int'];\n  dropzoneUser: DropzoneUser;\n  id: Scalars['ID'];\n  message?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Transaction. */\nexport type TransactionConnection = {\n  __typename?: 'TransactionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type TransactionEdge = {\n  __typename?: 'TransactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transaction>;\n};\n\nexport type TransactionInput = {\n  status?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  dropzoneUserId?: Maybe<Scalars['Int']>;\n  amount?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated input type of UpdateDropzone */\nexport type UpdateDropzoneInput = {\n  id: Scalars['Int'];\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzone */\nexport type UpdateDropzonePayload = {\n  __typename?: 'UpdateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserInput = {\n  attributes: DropzoneUserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserPayload = {\n  __typename?: 'UpdateDropzoneUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateExtra */\nexport type UpdateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateExtra */\nexport type UpdateExtraPayload = {\n  __typename?: 'UpdateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateFormTemplate */\nexport type UpdateFormTemplateInput = {\n  attributes: FormTemplateInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateFormTemplate */\nexport type UpdateFormTemplatePayload = {\n  __typename?: 'UpdateFormTemplatePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  formTemplate?: Maybe<FormTemplate>;\n};\n\n/** Autogenerated input type of UpdateLoad */\nexport type UpdateLoadInput = {\n  id: Scalars['Int'];\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateLoad */\nexport type UpdateLoadPayload = {\n  __typename?: 'UpdateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of UpdateNotification */\nexport type UpdateNotificationInput = {\n  attributes: NotificationInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateNotification */\nexport type UpdateNotificationPayload = {\n  __typename?: 'UpdateNotificationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  notification?: Maybe<Notification>;\n};\n\n/** Autogenerated input type of UpdatePlane */\nexport type UpdatePlaneInput = {\n  id: Scalars['Int'];\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdatePlane */\nexport type UpdatePlanePayload = {\n  __typename?: 'UpdatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of UpdateRig */\nexport type UpdateRigInput = {\n  attributes: RigInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateRigInspection */\nexport type UpdateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRigInspection */\nexport type UpdateRigInspectionPayload = {\n  __typename?: 'UpdateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of UpdateRig */\nexport type UpdateRigPayload = {\n  __typename?: 'UpdateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of UpdateRole */\nexport type UpdateRoleInput = {\n  permission: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRole */\nexport type UpdateRolePayload = {\n  __typename?: 'UpdateRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  role?: Maybe<UserRole>;\n};\n\n/** Autogenerated input type of UpdateSlot */\nexport type UpdateSlotInput = {\n  id: Scalars['Int'];\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateSlot */\nexport type UpdateSlotPayload = {\n  __typename?: 'UpdateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of UpdateTicket */\nexport type UpdateTicketInput = {\n  id: Scalars['Int'];\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateTicket */\nexport type UpdateTicketPayload = {\n  __typename?: 'UpdateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of UpdateUser */\nexport type UpdateUserInput = {\n  attributes: UserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateUser */\nexport type UpdateUserPayload = {\n  __typename?: 'UpdateUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type User = AnyResource & {\n  __typename?: 'User';\n  createdAt: Scalars['Int'];\n  dropzoneUsers?: Maybe<Array<DropzoneUser>>;\n  email?: Maybe<Scalars['String']>;\n  exitWeight?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Scalars['String']>;\n  jumpTypes?: Maybe<Array<JumpType>>;\n  license?: Maybe<License>;\n  name?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  rigs?: Maybe<Array<Rig>>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type UserInput = {\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  licenseId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated return type of UserLogin */\nexport type UserLoginPayload = {\n  __typename?: 'UserLoginPayload';\n  authenticatable: User;\n  credentials: Credential;\n};\n\n/** Autogenerated return type of UserLogout */\nexport type UserLogoutPayload = {\n  __typename?: 'UserLogoutPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserResendConfirmation */\nexport type UserResendConfirmationPayload = {\n  __typename?: 'UserResendConfirmationPayload';\n  message: Scalars['String'];\n};\n\nexport type UserRole = {\n  __typename?: 'UserRole';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  dropzoneId: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  permissions: Array<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** Autogenerated return type of UserSendPasswordReset */\nexport type UserSendPasswordResetPayload = {\n  __typename?: 'UserSendPasswordResetPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSendPasswordResetWithToken */\nexport type UserSendPasswordResetWithTokenPayload = {\n  __typename?: 'UserSendPasswordResetWithTokenPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSignUp */\nexport type UserSignUpPayload = {\n  __typename?: 'UserSignUpPayload';\n  authenticatable?: Maybe<User>;\n  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */\n  credentials?: Maybe<Credential>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated return type of UserUpdatePassword */\nexport type UserUpdatePasswordPayload = {\n  __typename?: 'UserUpdatePasswordPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserUpdatePasswordWithToken */\nexport type UserUpdatePasswordWithTokenPayload = {\n  __typename?: 'UserUpdatePasswordWithTokenPayload';\n  authenticatable: User;\n  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */\n  credentials?: Maybe<Credential>;\n};\n","export const tintColorLight = '#2f95dc';\nexport const tintColorDark = '#fff';\nexport const successColor = \"#00C851\";\nexport const errorColor = \"#ff4444\";\nexport const warningColor = \"#FF8800\";\nexport const infoColor = \"#0099CC\";\n\nexport const primaryColor = \"#FF1414\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Permission } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\nexport const QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: Permission): boolean {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId)\n    }\n  });\n\n  const permissions = data?.dropzone?.currentUser?.permissions || [];\n  return permissions?.includes(permission as any) || false;\n}"],"sourceRoot":""}