{"version":3,"sources":["components/NoResults.tsx","components/layout/DialogOrSheet.web.tsx","components/notifications/index.ts","graphql/createQuery.tsx","components/layout/SwipeActions.tsx","components/input/dropdown_select/RigSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/input/chip_select/DropzoneUserChipSelect.tsx","components/input/chip_select/PlaneChipSelect.tsx","components/forms/load/LoadForm.tsx","components/forms/manifest_group/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/manifest_group/ManifestGroupForm.tsx","components/input/chip_select/JumpTypeChipSelect.tsx","components/input/chip_select/TicketTypeChipSelect.tsx","components/forms/manifest/ManifestForm.tsx","components/dialogs/ManifestUser/ManifestUser.web.tsx","components/dialogs/ManifestGroup/UserListSelect.tsx","components/dialogs/ManifestGroup/ManifestGroup.web.tsx","screens/authenticated/manifest/GetStarted.tsx","components/chips/GcaChip.tsx","components/chips/LoadMasterChip.tsx","components/chips/PilotChip.tsx","components/chips/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","components/dialogs/Load.tsx","screens/authenticated/manifest/ManifestScreen.tsx"],"names":["NoResults","title","subtitle","style","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","DialogOrSheet","props","buttonLabel","buttonAction","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","onPress","onClose","button","borderRadius","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","flexDirection","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","previousData","refetch","error","transformedData","React","JSON","stringify","message","showSnackbarErrors","notifications","showSnackbar","variant","SwipeActions","rightAction","disabled","ref","enabled","renderRightActions","progress","dragX","scale","interpolate","inputRange","outputRange","translateX","current","close","View","transform","Text","fontWeight","label","useNativeAnimations","QUERY_RIGS","gql","RigSelect","isMenuOpen","setMenuOpen","currentDropzoneId","useLazyQuery","fetchRigs","userId","dropzoneId","Number","value","autoSelectFirst","dropzone","dropzoneUser","availableRigs","length","onSelect","onDismiss","anchor","Item","make","model","canopySize","description","required","left","Icon","icon","map","rig","key","id","user","QUERY_DROPZONE_USERS","dropzoneUsers","DropzoneUserChipSelect","requiredPermissions","useQueryDropzoneUsers","permissions","Subheader","ChipSelect","items","edges","node","selected","filter","Boolean","isSelected","item","renderItemLabel","dzUser","name","isDisabled","onChangeSelected","first","QUERY_PLANES","PlaneChipSelect","uniqBy","planes","Plane","plane","LoadForm","forms","load","TextInput","field","mode","fields","placeholder","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","gca","pilot","Divider","marginVertical","Checkbox","status","isOpen","marginBottom","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","console","selectedRig","rigs","find","Card","ProgressBar","image","Image","source","uri","size","ScrollView","horizontal","Chip","marginHorizontal","role","license","round","toFixed","text","keyboardType","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","SlotForm","manifestGroup","userIds","users","slotUser","flexShrink","jumpType","includes","ticketType","extras","ticketAddons","extra","some","cost","undefined","newRig","JumpTypeChipSelect","QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES","useTicketTypes","TicketTypeChipSelect","onlyPublicTickets","ManifestForm","currentDropzone","useCurrentDropzone","manifest","isEdit","original","allowedToManifestOthers","useRestriction","Permission","UpdateUserSlot","CreateUserSlot","Affix","isTandem","passengerName","passengerExitWeight","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","extraIds","loadId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","maxHeight","Button","reset","UsersScreen","screens","searchText","setSearchText","search","currentUser","canManifestGroup","canManifestGroupWithSelfOnly","CreateUserSlotWithSelf","Searchbar","contentContainerStyle","paddingTop","edge","selectedUsers","setSelected","setDropzoneUsers","onNext","scrollView","MUTATION_CREATE_SLOTS","mutationCreateSlots","tabIndex","setTabIndex","userGroup","createSlots","sheetRef","snapTo","testID","defaultIndex","onChangeIndex","userListContainer","ManifestGroupForm","buttonContainer","GetStarted","hasPlanes","hasTicketTypes","palette","isPublic","usePalette","separator","lightColor","darkColor","success","fontSize","GCAChip","UpdateLoad","Menu","LoadMasterChip","allowed","slots","slot","PilotChip","PlaneChip","QUERY_LOAD","MUTATION_UPDATE_LOAD","MUTATION_DELETE_SLOT","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","onManifestGroup","mutationUpdateLoad","mutation","mutationDeleteSlot","onDeleteSlot","deleteSlot","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","dispatchAt","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","UpdateSlot","canEditOthers","canRemoveSelf","DeleteSlot","canRemoveOthers","DeleteUserSlot","canManifestSelf","CreateSlot","showManifestButton","isFull","showGroupIcon","opacity","loadNumber","IconButton","overflow","showsHorizontalScrollIndicator","diff","loadMaster","DataTable","Header","numeric","slotGroup","groupNumber","isCurrentUser","Row","onSlotGroupPress","onSlotPress","Cell","Paragraph","slotText","altitude","Array","from","v","i","differenceInMinutes","marginLeft","MUTATION_CREATE_LOAD","LoadDialog","mutationCreateLoad","hasError","onSave","createLoad","snackbar","snapPoints","ManifestScreen","navigation","useNavigation","isFocused","useIsFocused","isSetupComplete","primaryColor","primary","setPrimaryColor","secondaryColor","canCreateLoad","CreateLoad","hasLicense","hasMembership","hasRigInspection","hasReserveInDate","hasExitWeight","hasCredits","setOpen","useWindowDimensions","numColumns","Dimensions","get","loads","keyExtractor","refreshing","onRefresh","refreshControl","RefreshControl","renderItem","index","setFromSlots","navigate","FAB","small"],"mappings":"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","file":"static/js/6.470a7c88.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\n\nexport interface ISwipeAction {\n  label: string;\n  \n  backgroundColor?: string;\n  onPress(): void;\n}\nexport interface ISwipeActions {\n  rightAction?: ISwipeAction;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport default function SwipeActions(props: ISwipeActions) {\n  const { children, rightAction, disabled } = props;\n\n  const ref = React.useRef<any>();\n  const rightActions = (progress: Animated.AnimatedInterpolation, dragX: Animated.AnimatedInterpolation) => {\n    const scale = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1.0, 0]\n    })\n\n    const translateX = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [0, 10]\n    });\n\n    return (\n        <TouchableOpacity\n          onPress={() => {\n            rightAction?.onPress();\n            ref?.current?.close();\n          }}\n        >\n          <Animated.View\n            style={{\n              flexGrow: 1,\n              backgroundColor: rightAction?.backgroundColor,\n              justifyContent: 'center',\n              height: \"100%\",\n              width: 75,\n              transform: [{ translateX }]\n            }}>\n            <Animated.Text\n              style={{\n                color: 'white',\n                paddingHorizontal: 10,\n                fontWeight: '600',\n                transform: [{ scale }]\n              }}>\n              {rightAction?.label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableOpacity>\n    )\n   }\n  return (\n    <Swipeable ref={ref} enabled={!disabled} renderRightActions={rightActions} useNativeAnimations>\n      { children }\n    </Swipeable>\n  )\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Rig, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  React.useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: currentDropzoneId,\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  React.useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            style={{ width: \"100%\" }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useQueryDropzoneUsers from \"../../../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IDropzoneUserChipSelect {\n  value?: DropzoneUser | null;\n  label: string;\n  icon?: string;\n  required?: boolean;\n  requiredPermissions: string[];\n  onSelect(dzuser: DropzoneUser): void;\n}\n\nexport default function DropzoneUserChipSelect(props: IDropzoneUserChipSelect) {\n  const { label, requiredPermissions, icon, required, value } = props;\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: requiredPermissions\n    },\n    onError: (message) =>\n      dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        {label}\n      </List.Subheader>\n      <ChipSelect<DropzoneUser>\n        autoSelectFirst\n        icon={icon || \"account\"}\n        items={data?.edges?.map(({ node }) => node) || []}\n        selected={[props.value].filter(Boolean) as DropzoneUser[]}\n        isSelected={(item) => item.id === value?.id}\n        renderItemLabel={(dzUser) => dzUser?.user.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IPlaneSelect {\n  value?: Plane | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: Plane): void;\n}\n\nconst QUERY_PLANES = gql`\n  query QuerySelectPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChipSelect(props: IPlaneSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n    }\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Aircraft\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.planes || []),\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(Plane) => Plane?.name}\n        isDisabled={(plane) => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Divider, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport PlaneSelect from '../../input/dropdown_select/PlaneSelect';\nimport DropzoneUserSelect from '../../input/dropdown_select/DropzoneUserSelect';\nimport DropzoneUserChipSelect from '../../input/chip_select/DropzoneUserChipSelect';\nimport PlaneChipSelect from '../../input/chip_select/PlaneChipSelect';\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        \n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneChipSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.forms.load.setField([\"plane\", value]));\n            dispatch(actions.forms.load.setField([\"maxSlots\", value.maxSlots]));\n          }}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n\n        \n        <DropzoneUserChipSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"gca\", dzUser]))}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserChipSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"pilot\", dzUser]))}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.forms.load.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../input/dropdown_select/RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(userId: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  React.useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: globalState.currentDropzoneId,\n    },\n    onError: console.error\n  });\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.forms.manifestGroup.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.forms.manifestGroup.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={globalState.currentDropzoneId}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { JumpType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function JumpTypeChipSelect(props: IJumpTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: [Number(props.userId) || null].filter(Boolean) as number[],\n      dropzoneId: Number(currentDropzoneId),\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Jump type\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.allowedJumpTypes || []),\n            ...(data?.jumpTypes || [])\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(jumpType) => jumpType?.name}\n        isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType!.id)}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { TicketType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  onlyPublicTickets?: boolean;\n  onSelect(jt: TicketType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES = gql`\nquery DropzoneUsersAllowedTicketTypes(\n  $dropzoneId: Int!,\n  $onlyPublicTickets: Boolean\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    ticketTypes(isPublic: $onlyPublicTickets) {\n      id\n      name\n      cost\n      isTandem\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n}\n\n`;\n\nconst useTicketTypes = createQuery<{ ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  onlyPublicTickets?: boolean | null\n }>(QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES, {\n   getPayload: (query) => ({\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n   })\n });\n\nexport default function TicketTypeChipSelect(props: ITicketTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading } = useTicketTypes({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      onlyPublicTickets: props.onlyPublicTickets || null,\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={data?.ticketTypes || []}\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(ticketType) => ticketType?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Permission } from '../../../graphql/schema.d';\nimport JumpTypeChipSelect from '../../input/chip_select/JumpTypeChipSelect';\nimport TicketTypeChipSelect from '../../input/chip_select/TicketTypeChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../input/dropdown_select/RigSelect';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nexport default function ManifestForm() {\n  \n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.manifest);\n  React.useEffect(() => {\n    if (state.fields.dropzoneUser?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.manifest.setField([\"exitWeight\", Number(state.fields.dropzoneUser?.value?.user?.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.dropzoneUser.value.user?.rigs?.length) {\n        dispatch(\n          actions.forms.manifest.setField([\"rig\", state.fields.dropzoneUser?.value?.user.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.dropzoneUser?.value?.id]);\n\n  const isEdit = state?.original?.id;\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? Permission.UpdateUserSlot : Permission.CreateUserSlot\n  )\n\n  return ( \n    <> \n      <JumpTypeChipSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.dropzoneUser?.value?.user?.id) || null}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeChipSelect\n        value={state.fields.ticketType.value}\n        required\n        onlyPublicTickets={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.forms.manifest.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.forms.manifest.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      { !state.fields.dropzoneUser ? null :\n        <RigSelect\n          value={state.fields.rig.value}\n          userId={Number(state.fields.dropzoneUser?.value?.user?.id)}\n          dropzoneId={Number(currentDropzone?.dropzone?.id)}\n          onSelect={(value) => dispatch(actions.forms.manifest.setField([\"rig\", value]))}\n        />}\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      {\n        !state.fields.ticketType.value?.isTandem ? null : (\n          <>\n            <List.Subheader>Passenger</List.Subheader>\n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger name\"\n              error={!!state.fields.passengerName.error}\n              value={state.fields.passengerName?.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerName\", newValue]))}\n            />\n            \n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger exit weight\"\n              error={!!state.fields.passengerExitWeight.error}\n              value={state.fields.passengerExitWeight.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerExitWeight\", Number(newValue)]))}\n            />\n          </>\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport SlotForm from \"../../forms/manifest/ManifestForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $dropzoneUserId: Int\n    $exitWeight: Float\n    $passengerName: String\n    $passengerExitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          dropzoneUserId: $dropzoneUserId\n          exitWeight: $exitWeight\n          passengerExitWeight: $passengerExitWeight\n          passengerName: $passengerName\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            passengerName\n            passengerExitWeight\n            ticketType {\n              id\n              name\n              isTandem\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifest);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          dropzoneUserId: Number(state.fields.dropzoneUser?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n          ...!state.fields.ticketType.value?.isTandem\n            ? {}\n            : {\n                passengerName: state.fields.passengerName?.value,\n                passengerExitWeight: state.fields.passengerExitWeight?.value,\n              }\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifest.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifest.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(actions.forms.manifest.setFieldError([\"rig\", message]));\n          case \"dropzone_user\":\n            return dispatch(actions.forms.manifest.setFieldError([\"dropzoneUser\", message]));\n          case \"exit_weight\":\n            return dispatch(actions.forms.manifest.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} style={{ maxHeight: 500 }}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.dropzoneUser?.value?.user?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.ScrollArea>\n          <ScrollView>\n            <SlotForm />\n          </ScrollView>\n        </Dialog.ScrollArea>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.manifest.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, Button, Checkbox, Divider, List, Searchbar } from 'react-native-paper';\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nimport NoResults from '../../../components/NoResults';\nimport { Permission, Query } from '../../../graphql/schema.d';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search, licensed: true) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUserListSelect {\n  onNext(): void;\n}\n\nexport default function UsersScreen(props: IUserListSelect) {\n  const { screens } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const [searchText, setSearchText] = React.useState(\"\");\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      search: searchText,\n    }\n  });\n\n  const { currentUser } = useCurrentDropzone();\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  return (\n    <>\n    <Searchbar\n      value={searchText}\n      onChangeText={setSearchText}\n      placeholder=\"Search skydivers\"\n    />\n    <View style={{ height: 380}}>\n    <ScrollView contentContainerStyle={{ paddingTop: 16 }}>\n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n      <>\n        <List.Item\n          style={{ width: \"100%\"}}\n          key={`user-${edge?.node?.id}`}\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() =>\n            !edge?.node?.user?.image\n              ? <List.Icon icon=\"account\" />\n              : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n          }\n          right={() => \n            <Checkbox\n              status={\n                screens.manifest.selectedUsers?.map(({ id }) => id).includes(edge!.node!.id)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          disabled={\n          // Dont allow removing current user if the user\n            // can only manifest a group with themselves in it\n            edge?.node?.user.id === currentUser?.id && (\n              canManifestGroupWithSelfOnly && !canManifestGroup\n            )  \n          }\n          onPress={\n            () => dispatch(\n              actions.screens.manifest.setSelected(\n                screens.manifest.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                ? screens.manifest.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                : [...screens.manifest.selectedUsers, edge!.node!],\n              )\n            )\n          }\n        />\n        <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n        </>\n      )}\n    </ScrollView>\n    </View>\n    <Button\n      onPress={() => {\n        dispatch(actions.forms.manifestGroup.setDropzoneUsers(screens.manifest.selectedUsers));\n        props.onNext();\n      }}\n      style={styles.button}\n      mode=\"contained\"\n    >\n      Next\n    </Button>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  scrollView: {\n    height: 100,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal } from \"react-native-paper\";\nimport { Tabs, TabScreen, useTabNavigation } from 'react-native-paper-tabs';\nimport BottomSheet, { BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ManifestGroupForm from \"../../forms/manifest_group/ManifestGroupForm\";\nimport UserListSelect from \"./UserListSelect\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction NextStepButton() {\n  const setTab = useTabNavigation();\n\n  return (\n    <Button\n      onPress={() => setTab(1)} \n      style={styles.button}\n    >\n      Next\n    </Button>\n  )\n}\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const { open } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlots?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"ticketType\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        props.onClose();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  \n  const sheetRef = React.useRef<BottomSheet>(null);\n\n  React.useEffect(() => {\n    if (state.fields.ticketType?.value?.isTandem) {\n      sheetRef?.current?.snapTo(0);\n    }\n  }, [state.fields.ticketType?.value?.isTandem])\n\n  React.useEffect(() => {\n    if (open) {\n      sheetRef?.current?.snapTo(1);\n    } else {\n      sheetRef?.current?.close();\n      props.onClose();\n    }\n  }, [open]);\n\n  const snapPoints = React.useMemo(() => [0, 550], []);\n\n  return (\n    <Portal>\n      <Dialog\n        visible={!!props.open}\n        onDismiss={props.onClose}\n       >\n         <View style={{ backgroundColor: \"white\"}} testID=\"manifest-group-sheet\">\n            <View pointerEvents={(state.fields.users?.value?.length || 0) > 0 ? undefined : \"none\"}>\n              <Tabs defaultIndex={tabIndex} mode=\"fixed\" onChangeIndex={setTabIndex}>\n                <TabScreen label=\"Create group\" ><View /></TabScreen>\n                <TabScreen label=\"Configure jump\"><View /></TabScreen>\n              </Tabs>\n            </View>\n            \n            {\n              tabIndex === 0\n                ? (\n                  <View style={styles.userListContainer}>\n                    <UserListSelect onNext={() => setTabIndex(1)} />\n                  </View>\n                ) : (\n                  <ScrollView contentContainerStyle={{ paddingBottom: 200, flexGrow: 1}}>\n                    <ManifestGroupForm />\n                    <View style={styles.buttonContainer}>\n                      <Button onPress={onManifest} loading={mutationData.loading} mode=\"contained\" style={styles.button}>\n                        Save\n                      </Button>\n                    </View>\n                  </ScrollView>\n                )\n            }\n          </View>\n        </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  buttonContainer: {\n    paddingHorizontal: 16,\n    backgroundColor: \"white\",\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  userListContainer: {\n    height: \"100%\",\n    backgroundColor: \"white\",\n    width: \"100%\",\n    padding: 16,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingBottom: 32,\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 15,\n    borderTopRightRadius: 15,\n    height: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryGCAUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.user?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`gca-chip-${edge?.node?.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport { Slot, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  value?: DropzoneUser | null;\n  slots: Slot[];\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"shield-account\">\n      {props.value?.user?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-account\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <Menu.Item\n            key={`lm-chip-${slot.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.dropzoneUser);\n            }}\n            title={\n              slot?.dropzoneUser?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryPilotUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.user?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.user?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`pilot-select-${edge!.node!.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Permission, Query } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPlaneChipSelect {\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryChipPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <Menu.Item\n            key={`lm-plane-chip-${plane.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, IconButton, Menu, Paragraph, ProgressBar, Text } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport GCAChip from '../../../components/chips/GcaChip';\nimport LoadMasterChip from '../../../components/chips/LoadMasterChip';\nimport PilotChip from '../../../components/chips/PilotChip';\nimport PlaneChip from '../../../components/chips/PlaneChip';\n\nimport { View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Permission, Plane, Slot, DropzoneUser } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport SwipeActions from '../../../components/layout/SwipeActions';\n\ninterface ILoadCard {\n  load: Load;\n  onManifestGroup(): void;\n  onSlotGroupPress(slots: Slot[]): void;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        \n        dropzoneUser {\n          id\n          user {\n            id\n            name\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_SLOT = gql`\nmutation DeleteSlot($id: Int!) {\n  deleteSlot(input: { id: $id }) {\n    slot {\n      id\n      load {\n        id\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }  \n      }\n    }\n  }\n}\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const { load, onManifest, onManifestGroup } = props;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n  const currentDropzone = useCurrentDropzone();\n  const { currentUser } = currentDropzone;\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const [mutationDeleteSlot, mutationDelete] = useMutation<Mutation>(MUTATION_DELETE_SLOT);\n\n  const onDeleteSlot = React.useCallback(async (slot: Slot) => {\n    try {\n      const result = await mutationDeleteSlot({\n        variables: {\n          id: Number(slot.id)\n        }\n      });\n\n      if (result?.data?.deleteSlot?.errors) {\n        dispatch(\n          actions.notifications.showSnackbar({\n            message: result.data.deleteSlot.errors[0],\n            variant: \"error\"\n          })\n        );\n      }\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePilot = React.useCallback(async (pilot: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  \n  const canUpdateLoad = useRestriction(Permission.UpdateLoad);\n  \n  const canEditSelf = useRestriction(Permission.UpdateSlot);\n  const canEditOthers = useRestriction(Permission.UpdateUserSlot);\n  \n  const canRemoveSelf = useRestriction(Permission.DeleteSlot);\n  const canRemoveOthers = useRestriction(Permission.DeleteUserSlot);\n  \n  const canManifestSelf = useRestriction(Permission.CreateSlot);\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  const showManifestButton = canManifestSelf && data?.load?.isOpen && !data?.load?.isFull;\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  const showGroupIcon = (canManifestGroup || canManifestGroupWithSelfOnly) && !data?.load?.hasLanded && (!data?.load?.dispatchAt || data?.load.dispatchAt > (new Date().getTime() / 1000));\n\n  return (\n  <Card testID=\"load-card\" style={{ margin: 16, opacity: data?.load?.hasLanded ? 0.5 : 1.0 }} elevation={3}>\n    <Card.Title\n      style={{ justifyContent: \"space-between\"}}\n      title={\n        <View style={{ width: \"100%\", flex: 1, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n          <Text>{`Load ${data?.load?.loadNumber || 0}`}</Text>\n          <View style={{ flexGrow: 1 }} />\n          { showGroupIcon && (\n            <IconButton\n              icon=\"account-group\"\n              testID=\"manifest-group-button\"\n              onPress={() => {\n                dispatch(actions.forms.manifestGroup.reset());\n                dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n\n                if (canManifestGroupWithSelfOnly && !canManifestGroup) {\n                  // Automatically add current user to selection\n                  dispatch(actions.screens.manifest.setSelected([currentUser]));\n                  dispatch(actions.forms.manifestGroup.setDropzoneUsers([currentUser]));\n                }\n\n                if (onManifestGroup) {\n                  onManifestGroup();\n                }\n              }}\n            />\n          )}\n        </View>\n      }\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          <PlaneChip\n            value={data?.load?.plane}\n            onSelect={async (plane) => {\n              if ((data?.load?.slots?.length || 0) > (plane.maxSlots || 0)) {\n                const diff = (data?.load?.slots?.length || 0) - (plane.maxSlots || 0);\n\n                dispatch(\n                  actions.notifications.showSnackbar({\n                    message: `You need to take ${diff} people off the load to fit on this plane`,\n                    variant: \"warning\",\n                  })\n                );\n              } else {\n                await updatePlane(plane);\n                refetch();\n              }\n            }}\n          />\n          <GCAChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.gca}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.pilot}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            value={data?.load?.loadMaster}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              const slotGroup = data?.load?.slots?.filter(({ groupNumber }) => groupNumber && groupNumber === slot.groupNumber);\n              const isCurrentUser = slot?.user?.id === currentUser?.id;\n\n              return (\n                <SwipeActions\n                  disabled={\n                    (isCurrentUser && !canRemoveSelf) || (!isCurrentUser && !canRemoveOthers)\n                  }\n                  key={`slot-${slot.id}`}\n                  rightAction={{\n                    label: \"Delete\",\n                    backgroundColor: \"red\",\n                    onPress: () => onDeleteSlot(slot),\n                  }}\n                >\n                  <DataTable.Row\n                    testID=\"slot-row\"\n                    disabled={!!data?.load?.hasLanded}\n                    onPress={() => {\n                      if (slot.user?.id === currentUser?.id) {\n                        if (canEditSelf) {\n                          if (slotGroup?.length) {\n                            props.onSlotGroupPress(slotGroup!)\n                          } else {\n                            props.onSlotPress(slot);\n                          }\n                        }\n                      } else if (canEditOthers) {\n                        if (slotGroup?.length) {\n                          props.onSlotGroupPress(slotGroup!)\n                        } else {\n                          props.onSlotPress(slot);\n                        }\n                      }\n                    }}\n                    pointerEvents=\"none\"\n                  >\n                    <DataTable.Cell>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.dropzoneUser?.user?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.jumpType?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {((slot?.ticketType?.altitude || 14000) / 1000)}k\n                      </Paragraph>\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                </SwipeActions>\n              )\n            })\n          }\n          {\n            Array.from({length: (data?.load?.maxSlots || 0) - (data?.load?.slots?.length || 0)}, (v, i) => i).map((i) =>\n              <DataTable.Row key={`${load.id}-empty-slot-${i}`} testID=\"slot-row\">\n                <DataTable.Cell><Paragraph style={styles.slotText}>- Available -</Paragraph></DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"black\", padding: 8 }}>\n          <Paragraph style={{ color: \"#FFFFFF\" }}>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)} testID={ isExpanded ? \"show-less\" : \"show-more\" }>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)} testID=\"dispatch-cancel\">\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button\n                    mode=\"outlined\"\n                    onPress={() => setDispatchOpen(true)}\n                    testID=\"dispatch-button\"\n                  >\n                    Dispatch\n                  </Button>\n                }\n              >\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button\n                style={{ marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => {\n                  if (!data?.load?.loadMaster?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a load master before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n\n                  if (!data?.load?.pilot?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a pilot before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n                  onLanded();\n                }}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                testID=\"manifest-button\"\n                onPress={() => onManifest()}\n                disabled={!showManifestButton || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  slotText: {\n    fontSize: 12\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { actions, useAppSelector, useAppDispatch } from '../../redux';\nimport { actions as snackbar } from \"../../components/notifications\";\n\nimport { Load, Mutation } from '../../graphql/schema';\nimport LoadForm from '../forms/load/LoadForm';\nimport DialogOrSheet from '../layout/DialogOrSheet';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\ninterface ILoadDialog {\n  open: boolean;\n  onClose(): void;\n  onSuccess(load: Load): void;\n}\nexport default function LoadDialog(props: ILoadDialog) {\n  const { open, onClose, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.load);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const dispatch = useAppDispatch();\n  const [mutationCreateLoad, mutation] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: currentDropzoneId,\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(pilot.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.forms.load.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.forms.load.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.forms.load.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.forms.load.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.forms.load.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.forms.load.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            onSuccess(result.data.createLoad.load);\n            dispatch(actions.forms.load.reset());\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <DialogOrSheet\n      open={open}\n      onClose={onClose}\n      buttonAction={onSave}\n      buttonLabel=\"Create\"\n      snapPoints={[\"30%\", 650]}\n      loading={mutation.loading}\n      title=\"New Load\"\n    >\n      <LoadForm />\n    </DialogOrSheet>\n  );\n}\n","import { useIsFocused, useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Dimensions, RefreshControl, StyleSheet, useWindowDimensions } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserSheet from '../../../components/dialogs/ManifestUser/ManifestUser';\nimport ManifestGroupSheet from '../../../components/dialogs/ManifestGroup/ManifestGroup';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Load, Permission } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\nimport LoadDialog from '../../../components/dialogs/Load';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const forms = useAppSelector(state => state.forms);\n  const dispatch = useAppDispatch();\n  const { dropzone, currentUser, loading, refetch } = useCurrentDropzone();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!dropzone?.planes?.length;\n  const hasTicketTypes = !!dropzone?.ticketTypes?.length;\n  const isPublic = !!dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (dropzone?.primaryColor && dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(actions.global.setPrimaryColor(dropzone.primaryColor));\n    }\n\n    if (dropzone?.secondaryColor && dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(actions.global.setPrimaryColor(dropzone.secondaryColor));\n    }\n  }, [\n    dropzone?.primaryColor,\n    dropzone?.secondaryColor\n  ])\n\n  const canCreateLoad = useRestriction(Permission.CreateLoad);\n\n  const onManifest = React.useCallback((load: Load) => {\n    \n    if (!currentUser.hasLicense) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You need to select a license on your user profile\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasMembership) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your membership is out of date\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasRigInspection) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs to be inspected before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasReserveInDate) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs a reserve repack\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasExitWeight) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Update your exit weight on your profile before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasCredits) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You have no credits on your account\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    dispatch(actions.forms.manifest.setOpen(true));\n    dispatch(\n      actions.forms.manifest.setField([\"dropzoneUser\", currentUser])\n    );\n    dispatch(\n      actions.forms.manifest.setField([\"load\", load])\n    );\n  }, [JSON.stringify(dropzone?.currentUser)]);\n\n\n  const { width } = useWindowDimensions(); \n\n  const numColumns = Math.ceil(width / 400) || 1;\n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        testID=\"loads\"\n                        keyExtractor={(item) => `load-${item?.node?.id}`}\n                        key={`loads-columns-${numColumns}`}\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={numColumns}\n                        data={dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        refreshControl={\n                          <RefreshControl refreshing={loading} onRefresh={() => refetch()} />\n                        }\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              onSlotPress={(slot) => {\n                                dispatch(actions.forms.manifest.setOpen(slot));\n                                dispatch(\n                                  actions.forms.manifest.setField([\"load\", edge.node!])\n                                );\n                              }}\n                              onSlotGroupPress={(slots) => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setFromSlots(slots));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                                navigation.navigate(\"ManifestGroupScreen\");\n                              }}\n                              onManifest={() => {\n                                \n                                onManifest(edge.node!)\n                              }}\n                              onManifestGroup={() => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setOpen(true));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => dispatch(actions.forms.load.setOpen(true))}\n            label=\"New load\"\n          />\n        )}\n      </View>\n      <ManifestUserSheet\n        open={forms.manifest.open}\n        onClose={() => dispatch(actions.forms.manifest.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifest.setOpen(false))}\n      />\n      <ManifestGroupSheet\n        open={forms.manifestGroup.open}\n        onClose={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n      />\n\n      <LoadDialog\n        onSuccess={() => {\n          dispatch(actions.forms.load.setOpen(false));\n          refetch();\n        }}\n        open={forms.load.open}\n        onClose={() => dispatch(actions.forms.load.setOpen(false))}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"sourceRoot":""}