{"version":3,"sources":["components/forms/credits/slice.tsx","components/forms/dropzone/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/plane/slice.tsx","components/forms/rig/slice.tsx","components/forms/rig_inspection/slice.tsx","components/forms/rig_inspection_template/slice.tsx","components/forms/manifest/slice.tsx","components/forms/manifest_group/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/user/slice.tsx","components/dialogs/UserWizard/slice.tsx","components/dialogs/DropzoneWizard/slice.tsx","components/forms/slice.ts","screens/authenticated/users/slice.ts","screens/unauthenticated/login/slice.ts","screens/authenticated/manifest/slice.ts","screens/unauthenticated/signup/slice.ts","screens/slice.ts","redux/store.ts","components/Themed.tsx","graphql/hooks/useCurrentDropzone.ts","components/layout/ScrollableScreen.tsx","components/notifications/slice.ts","components/input/dropdown_select/FederationSelect.tsx","components/input/colorpicker/ColorPickerDialog.tsx","components/input/colorpicker/ColorPicker.tsx","components/input/colorpicker/index.ts","components/theme_preview/Phone.tsx","components/theme_preview/Web.tsx","graphql/hooks/useMutationUpdateUser.ts","redux/global.ts","hooks/useColorScheme.web.ts","assets/images/logo.png","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","components/input/chip_select/ChipSelect.tsx","graphql/schema.d.ts","components/NoResults.tsx","components/notifications/Notifications.tsx","components/input/date_picker/DatePicker.web.tsx","components/chips/GcaChip.tsx","components/chips/PilotChip.tsx","components/chips/PlaneChip.tsx","components/input/chip_select/LicenseChipSelect.tsx","hooks/usePalette.ts","components/chips/LoadMasterChip.tsx","screens/authenticated/manifest/Countdown.tsx","components/forms/dropzone/DropzoneForm.tsx","components/permissions/PermissionListItem.tsx","hooks/useRestriction.ts","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","screens/authenticated/load/SlotCard.tsx","screens/authenticated/load/ActionButton.tsx","screens/authenticated/load/Header.tsx","screens/authenticated/load/InfoGrid.tsx","screens/authenticated/load/LoadScreen.tsx","navigation/SetupWarning.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","navigation/tabs/notifications.tsx","navigation/tabs/profile.tsx","navigation/tabs/settings.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","screens/unauthenticated/signup/ConfirmUserScreen.tsx","navigation/RootNavigator.tsx","components/wizard/Pagination.tsx","components/wizard/Wizard.tsx","components/wizard/WizardScreen.tsx","components/wizard/WizardCompleteStep.tsx","components/dialogs/UserWizard/steps/Federation.tsx","components/dialogs/UserWizard/steps/Rig.tsx","components/dialogs/UserWizard/steps/ReserveRepack.tsx","components/dialogs/UserWizard/steps/Wingloading.tsx","graphql/hooks/useMutationUpdateRig.tsx","graphql/hooks/useMutationCreateRig.ts","components/dialogs/UserWizard/UserWizardScreen.tsx","components/dialogs/DropzoneWizard/steps/Name.tsx","components/dialogs/DropzoneWizard/steps/Aircraft.tsx","components/dialogs/DropzoneWizard/steps/Theming.tsx","components/dialogs/DropzoneWizard/steps/Permissions.tsx","components/dialogs/DropzoneWizard/steps/TicketType.tsx","graphql/hooks/useMutationUpdateDropzone.ts","graphql/hooks/useMutationCreatePlane.tsx","graphql/hooks/useMutationUpdatePlane.tsx","graphql/hooks/useMutationCreateTicketType.ts","graphql/hooks/useMutationUpdateTicketType.ts","components/dialogs/DropzoneWizard/DropzoneWizard.tsx","App.tsx","hooks/useCachedResources.ts","redux/index.ts","graphql/createMutation.tsx","assets/fonts/SpaceMono-Regular.ttf","constants/Colors.ts"],"names":["initialState","original","open","fields","amount","value","error","status","message","createSlice","name","reducers","setField","state","action","payload","field","setFieldError","setOpen","reset","federation","secondaryColor","primaryColor","banner","isCreditSystemEnabled","isPublic","key","typedKey","role","expiresAt","registration","minSlots","maxSlots","hours","nextMaintenanceHours","make","model","serial","repackExpiresAt","canopySize","rigType","ok","setOk","index","item","map","idx","setFields","JSON","parse","console","log","definition","err","jumpType","extras","load","rig","ticketType","dropzoneUser","exitWeight","passengerName","passengerExitWeight","users","setFromSlots","slot","id","Number","rigId","find","i","setDropzoneUsers","dzUser","availableRigs","user","cost","altitude","allowManifestingSelf","isTandem","email","phone","rigs","license","setFederation","complete","dropzone","undefined","extra","credits","plane","rigInspection","rigInspectionTemplate","manifest","manifestGroup","userWizard","dropzoneWizard","isSearchVisible","searchText","setSearchText","setSearchVisible","password","setEmail","setPassword","setEmailError","setPasswordError","selectedUsers","display","setSelected","setDisplayStyle","passwordConfirmation","login","signup","initialStateGlobal","initialStateNotification","persistConfig","storage","Platform","OS","require","default","AsyncStorage","whitelist","screenReducers","Object","keys","screens","reduce","obj","reducer","formReducers","forms","screenActions","actions","global","globalSlice","notifications","notificationSlice","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","useThemeColor","props","colorName","theme","useColorScheme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor","QUERY_DROPZONE","gql","useCurrentDropzone","dropzoneId","currentDropzoneId","pushToken","expoPushToken","currentDropzone","useQuery","variables","earliestTimestamp","startOfDay","Date","getTime","fetchPolicy","mutationUpdateUser","useMutationUpdateUser","onSuccess","onError","React","userId","data","currentUser","remoteToken","localToken","loading","called","mutate","ref","height","useWindowDimensions","children","contentContainerStyle","rest","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","styles","container","colors","surface","content","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","queue","hideSnackbar","slice","showSnackbar","push","QUERY_FEDERATIONS","FederationSelect","isMenuOpen","setMenuOpen","federations","length","onSelect","stringify","Subheader","onDismiss","visible","anchor","onPress","mode","disabled","minWidth","Item","title","ColorPickerDialog","onChange","onClose","Portal","Dialog","Title","Content","padding","sliderComponent","SliderComponent","defaultColor","hideSliders","Actions","Button","current","getColor","width","marginBottom","subheader","paddingLeft","COLOR_PRESETS","justifyContent","flexDirection","card","marginVertical","fontSize","fontWeight","textAlign","colorBox","margin","ColorPicker","helperText","isCustomColor","includes","isDialogOpen","setDialogOpen","Card","flexWrap","TouchableRipple","Surface","borderWidth","borderColor","MaterialIcons","size","HelperText","type","label","marginTop","previewContainer","borderRadius","hairlineWidth","alignSelf","previewAppBar","position","top","borderTopRightRadius","borderTopLeftRadius","previewTabBar","bottom","borderBottomRightRadius","borderBottomLeftRadius","previewLoadCard","marginHorizontal","previewLoadCard2","previewLoadCard3","previewButton","right","PhonePreview","left","WebPreview","MUTATION_UPDATE_USER","createMutation","getPayload","result","updateUser","fieldErrorMap","exit_weight","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","primary","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","permissions","credentials","isDarkMode","setCredentials","setUser","setExpoPushToken","setPermissions","setPrimaryColor","setAccentColor","accent","setDropzone","toggleDarkMode","logout","module","exports","ticketTypeIds","ticketTypes","gca","dispatchAt","isOpen","loadMaster","pilot","ChipSelect","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","some","isEqual","xorBy","LoadState","Permission","NoResults","subtitle","empty","fab","MyComponent","dispatch","palette","usePalette","notification","variantStyle","info","success","warning","testID","duration","variant","DatePicker","date","description","timestamp","format","Icon","selectedDays","onDayClick","QUERY_PERMISSION_USER","GCAChip","small","useRestriction","UpdateLoad","selectedColor","textStyle","dropzoneUsers","edges","edge","node","QUERY_DROPZONE_USERS","PilotChip","QUERY_PLANES","PlaneChip","allowed","planes","QUERY_LICENSES","LicenseChipSelect","federationId","licenses","filter","Boolean","first","colorScheme","LoadMasterChip","slots","CountdownCircleTimer","select","ios","then","android","web","Countdown","end","difference","diff","fractionFiveMinutes","fractionTenMinutes","fractionTwentyMinutes","isPlaying","isAfter","strokeWidth","remainingTime","animatedColor","seconds","Math","round","minutes","secondsToMinutes","formattedSeconds","formattedMinutes","DropzoneForm","onPickImage","a","async","getDocumentAsync","multiple","uri","Cover","source","resizeMode","onChangeText","newValue","required","MUTATION_UPDATE_ROLE","PermissionListItem","permissionName","canChangePermissions","GrantPermission","useMutation","mutationUpdatePermission","onValueChange","roleId","enabled","optimisticResponse","updateRole","errors","QUERY_PERMISSIONS","permission","httpLink","createHttpLink","Constants","url","Apollo","errorLink","graphQLErrors","networkError","operation","response","extensions","code","authLink","setContext","_","headers","accessToken","tokenType","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","prefixes","Linking","config","confirm","path","params","account_confirmation_success","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","TouchableOpacity","replace","linkText","paddingVertical","SlotCard","onDelete","elevation","image","Image","Badge","marginRight","e","preventDefault","Chip","wingLoading","toFixed","MUTATION_UPDATE_LOAD","ActionButton","isExpanded","setExpanded","mutationUpdateLoad","updateCall","dispatchTime","addMinutes","ceil","cancelLoad","onLanded","hasLanded","onManifest","hasLicense","hasMembership","hasRigInspection","hasReserveInDate","hasExitWeight","hasCredits","canManifestSelf","CreateSlot","canManifestGroup","CreateUserSlot","canManifestGroupWithSelfOnly","CreateUserSlotWithSelf","Open","BoardingCall","isFull","showManifestButton","showGroupIcon","Landed","createCallAction","callActions","manifestActions","workflowActions","InFlight","FAB","Group","fabStyle","marginLeft","onStateChange","UserHeader","onEdit","canEdit","IconButton","avatarContainer","titleContainer","loadNumber","Paragraph","paragraph","paddingTop","InfoGrid","Divider","divider","titleStyle","bold","descriptionStyle","verticalDivider","AvailableSlotCard","maxHeight","borderStyle","opacity","QUERY_LOAD","MUTATION_DELETE_SLOT","route","useRoute","refetch","mutationDeleteSlot","onDeleteSlot","deleteSlot","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","canEditSelf","UpdateSlot","canEditOthers","UpdateUserSlot","canRemoveSelf","DeleteSlot","canRemoveOthers","DeleteUserSlot","useNavigation","Array","from","occupiedSlots","horizontal","showsHorizontalScrollIndicator","Cancelled","weight","keyExtractor","Dimensions","get","numColumns","refreshing","onRefresh","refreshControl","RefreshControl","renderItem","slotGroup","groupNumber","onSlotGroupPress","navigate","onSlotPress","separator","slotText","Warning","SetupWarning","isRigSetUp","isExitWeightDefined","isMembershipInDate","isReserveInDate","isRigInspectionComplete","onSetupWizard","missing","join","QUERY_CURRENT_USER","AppBar","previous","scene","hideWarnings","contextMenuOpen","setContextMenuOpen","useLazyQuery","loadData","Appbar","Header","BackAction","goBack","descriptor","options","headerRight","tintColor","Menu","isRigInspected","rigInspections","inspection","isRepackInDate","ManifestScreen","CreateLoadScreen","ManifestGroupScreen","ManifestGroupUserSelectScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","NotificationsScreen","Profile","Notifications","UpdateUserScreen","ProfileTab","initialParams","SettingsScreen","TicketTypeSettingsScreen","CreatePlaneScreen","UpdatePlaneScreen","UpdateDropzoneScreen","PlanesScreen","RigInspectionTemplateScreen","DropzoneRigsScreen","DropzonePermissionScreen","DropzoneMasterLogScreen","CreateExtraScreen","UpdateExtraScreen","ExtrasScreen","Settings","SettingsTab","UsersScreen","SearchableAppBar","RigInspectionScreen","searchVisible","onSearch","text","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","ReadUser","canUpdateDropzone","UpdateDropzone","canUpdatePlane","UpdatePlane","canUpdateTicketTypes","UpdateTicketType","canUpdateExtras","UpdateExtra","canUpdatePermissions","canUpdateDzRigs","UpdateDropzoneRig","canUpdateRigInspectionTemplate","UpdateFormTemplate","shouldShowSettings","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","MaterialCommunityIcons","unmountOnBlur","NotificationTab","UsersTab","QUERY_DROPZONES","screen","SafeAreaView","FlatList","dropzones","ListEmptyComponent","shouldPushRoute","dzIcon","MUTATION_CREATE_DROPZONE","createDropzone","validates","isRequired","useMutationCreateDropzone","onFieldError","ScrollableScreen","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","emailRegex","RegExp","hasError","test","userLogin","authenticatable","logo","KeyboardAvoidingView","behavior","TextInput","secureTextEntry","labelStyle","buttonLabel","button","textButtonLabel","textButton","maxWidth","MUTATION_USER_SIGNUP","userSignUp","isEmail","SignupScreen","useMutationSignUp","onSignUp","textContentType","passwordRules","licenseId","successColor","errorIcon","warningColor","ConfirmUserScreen","createDrawerNavigator","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","WizardPagination","paginationIndex","icons","bridgeLength","pagination","hasCustomIcon","defaultIcon","iconDone","bridge","bridgeDone","WizardContext","count","setIndex","Wizard","Provider","scrollToIndex","animated","showPagination","PaginationComponent","scrollEnabled","autoplay","onChangeIndex","prevIndex","wizardScreen","buttonBack","buttons","WizardScreen","onBack","backButtonLabel","nextButtonLabel","onNext","screenWidth","scrollRef","scrollTo","y","flatten","minHeight","WizardCompleteStep","FederationWizardSceen","RigWizardScreen","isOtherMake","setIsOtherMake","pointerEvents","ReserveRepackWizardScreen","time","cardTitle","cardValue","slider","sliderControl","wingLoadingCardLeft","wingLoadingCardRight","WingloadingWizardScreen","rigForm","userForm","setCanopySize","setWeight","toString","minimumValue","maximumValue","step","minimumTrackTintColor","maximumTrackTintColor","onSlidingComplete","w","MUTATION_UPDATE_RIG","updateRig","MUTATION_CREATE_RIG","createRig","modal","absoluteFillObject","paddingRight","UserWizardScreen","mutationUpdateRig","useMutationUpdateRig","mutationCreateRig","useMutationCreateRig","onFederationNext","onRigNext","onReserveRepackNext","onWingloadingNext","Modal","dismissable","Federation","Rig","ReserveRepack","Wingloading","NameAndFederationWizardSceen","AircraftWizardScreen","setMinSlots","setMaxSlots","QUERY_DROPZONE_PERMISSIONS","PermissionWizardScreen","dropzoneForm","queryRoles","roles","capitalize","TicketTypeWizardScreen","altitudeMenuOpen","setAltitudeMenuOpen","price","setPrice","contentStyle","MUTATION_UPDATE_DROPZONE","updateDropzone","MUTATION_CREATE_PLANE","createPlane","MUTATION_UPDATE_PLANE","MUTATION_CREATE_TICKET_TYPE","createTicketType","MUTATION_UPDATE_TICKET_TYPE","updateTicketType","DropzoneWizardScreen","aircraft","ticket","mutationCreateDropzone","mutationUpdateDropzone","useMutationUpdateDropzone","mutationCreatePlane","useMutationCreatePlane","mutationUpdatePlane","useMutationUpdatePlane","mutationCreateTicketType","useMutationCreateTicketType","mutationUpdateTicketType","useMutationUpdateTicketType","onBasicInfoNext","onThemingNext","onAircraftNext","onTicketTypeNext","Name","Theming","Aircraft","TicketType","notificationListener","responseListener","onOutsideLink","intendedRoute","URI","isDevice","existingStatus","finalStatus","warn","token","importance","MAX","vibrationPattern","registerForPushNotificationsAsync","request","body","addEventListener","removeEventListener","fallback","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","DropzoneWizard","App","isLoadingComplete","setLoadingComplete","Font","Inter_400Regular","Inter_500Medium","Inter_700Bold","fontsLoaded","SplashScreen","Ionicons","font","useCachedResources","ActivityIndicator","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","pattern","callback","mutation","opts","mopts","hasErrors","forEach","x","variable","validator","validate","fieldErrors","fieldName","errorColor","background","tint","tabIconDefault","tabIconSelected"],"mappings":"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","file":"static/js/app.eff79343.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser, Maybe, Transaction } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Transaction,\n  | \"amount\"\n  | \"status\"\n  | \"message\"\n>;\n\ninterface IDropzoneEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Transaction[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    amount: {\n      value: null,\n      error: null,\n    },\n    status: {\n      value: \"deposit\",\n      error: null,\n    },\n    message: {\n      value: \"\",\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/credits',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && \"error\" in (state.fields[field as T])) {\n        state.fields[field as T].error = error;\n      }\n    },\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<DropzoneUser | boolean>) => {\n      \n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && \"error\" in (state.fields[field as T])) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneUserEditState = {\n  original: null,\n  open: false,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/dropzoneUser',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneUserEditState, action: PayloadAction<boolean | DropzoneUser>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema.d\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IPlaneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IPlaneEditState, action: PayloadAction<boolean | Plane>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.hours.value = action.payload.hours!;\n        state.fields.minSlots.value = action.payload.minSlots!;\n        state.fields.maxSlots.value = action.payload.maxSlots!;\n        state.fields.name.value = action.payload.name!;\n        state.fields.registration.value = action.payload.registration!;\n        state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n      }\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n  | \"rigType\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IRigEditState = {\n  original: null,\n  open: false,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n    rigType: {\n      value: \"sport\",\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IRigEditState, action: PayloadAction<boolean | Rig>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldItem } from \"../rig_inspection_template/slice\";\n\n\n\ninterface IRigInspectionEditState {\n  fields: FieldItem[],\n  open: boolean;\n  ok: boolean;\n}\n\nexport const initialState: IRigInspectionEditState = {\n  fields: [],\n  open: false,\n  ok: false\n};\n\n\nexport default createSlice({\n  name: 'forms/rigInspection',\n  initialState,\n  reducers: {\n\n    setOk: (state: IRigInspectionEditState, action: PayloadAction<boolean>) => {\n      state.ok = action.payload;\n    },\n    setField: (state: IRigInspectionEditState, action: PayloadAction<[number, FieldItem]>) => {\n      const [index, item] = action.payload;\n      state.fields = state.fields.map((field, idx) => idx === index ? item : field);\n    },\n\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<string>) => {\n      try {\n        state.fields = JSON.parse(action.payload)\n      } catch (error) {\n        console.log(action.payload);\n        console.error(\"Failed to read rig inspection template\", error.message, action.payload);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.ok = initialState.ok;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, FormTemplate } from \"../../../graphql/schema.d\";\n\n\nexport interface FieldItem {\n  label: string;\n  description?: string;\n  isRequired?: boolean;\n  valueType: \"integer\" | \"boolean\" | \"date\" | \"string\";\n  value?: number | boolean | string;\n}\n\ninterface IRigInspectionEditState {\n  original: FormTemplate | null;\n  fields: FieldItem[],\n}\n\nexport const initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'forms/rigInspection',\n  initialState,\n  reducers: {\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<FieldItem[]>) => {\n      state.fields = action.payload;\n    },\n\n    setOpen: (state: IRigInspectionEditState, action: PayloadAction<FormTemplate>) => {\n      state.original = action.payload;\n\n      try {\n        state.fields = JSON.parse(action.payload.definition!);\n      } catch(err) {\n        console.log(\"Invalid json: \", action.payload.definition);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"dropzoneUser\"\n  | \"exitWeight\"\n  | \"extras\"\n  | \"passengerExitWeight\"\n  | \"passengerName\"\n>\n\ninterface ISlotEditState {\n  original: Slot | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Fields[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    dropzoneUser: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n    passengerName: {\n      value: null,\n      error: null,\n    },\n    passengerExitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifest',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | Slot>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { pick, pickBy } from \"lodash\";\nimport { SlotUser, Slot, DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ninterface IFields extends Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"extras\"\n> {\n  users: SlotUser[];\n}\n\ninterface ISlotEditState {\n  original: IFields | null;\n  open: boolean;\n  fields: {\n    [K in keyof IFields] - ?: {\n      value: IFields[K] | null;\n      error: string | null;\n    }\n  },\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    users: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifestGroup',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      \n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setFromSlots: (state: ISlotEditState, action: PayloadAction<Slot[]>) => {\n      state.fields.users.value = action.payload.map((slot) => ({\n          id: Number(slot.dropzoneUser?.id),\n          rigId: Number(slot.rig?.id),\n          exitWeight: Number(slot.exitWeight),\n        })\n      ) as SlotUser[];\n\n      state.fields.jumpType.value = action.payload.find(i => i)?.jumpType;\n      state.fields.load.value = action.payload.find(i => i)?.load!;\n      state.fields.extras.value = action.payload.find(i => i)?.extras;\n    },\n\n    setDropzoneUsers: (state: ISlotEditState, action: PayloadAction<DropzoneUser[]>) => {\n      state.fields.users.value = action.payload.map<SlotUser>((dzUser) => ({\n          id: Number(dzUser.id),\n          rigId: Number(dzUser?.availableRigs?.find(({ id }) => id)?.id),\n          exitWeight: Number(dzUser?.user?.exitWeight),\n        })\n      ) as SlotUser[];\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | IFields>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nexport const initialState: ITicketTypeEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/ticketType',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ITicketTypeEditState, action: PayloadAction<boolean | TicketType>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.altitude.value = action.payload.altitude!;\n        state.fields.cost.value = action.payload.cost!;\n        state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  open: boolean;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IUserEditState = {\n  original: null,\n  open: false,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/user',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserEditState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.federation.value = action.payload.license?.federation!;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig, User } from \"../../../graphql/schema.d\";\n\ninterface IUserWizardState {\n  open: boolean;\n  fields: {\n    user: {\n      value: User;\n      error: string | null;\n    },\n    rig: {\n      value: Rig;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IUserWizardState = {\n  open: false,\n  fields: {\n    user: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/userWizard',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IUserWizardState[\"fields\"]>(state: IUserWizardState, action: PayloadAction<[T, IUserWizardState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n    },\n    setFieldError: <T extends  keyof IUserWizardState[\"fields\"]>(state: IUserWizardState, action: PayloadAction<[T, IUserWizardState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserWizardState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.fields = initialState.fields;\n      } else {\n        state.fields.user.value = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IUserWizardState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone } from \"../../../graphql/schema.d\";\ninterface IDropzoneWizardState {\n  open: boolean;\n  complete: boolean;\n  fields: {\n    dropzone: {\n      value: Dropzone;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IDropzoneWizardState = {\n  open: false,\n  complete: false,\n  fields: {\n    dropzone: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzoneWizard',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IDropzoneWizardState[\"fields\"]>(state: IDropzoneWizardState, action: PayloadAction<[T, IDropzoneWizardState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n    },\n    setFieldError: <T extends  keyof IDropzoneWizardState[\"fields\"]>(state: IDropzoneWizardState, action: PayloadAction<[T, IDropzoneWizardState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneWizardState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.fields = initialState.fields;\n      } else {\n        state.fields.dropzone.value = action.payload;\n        state.open = true;\n      }\n    },\n\n    complete: (state: IDropzoneWizardState, action: PayloadAction<boolean | undefined>) => {\n      state.complete = action.payload !== undefined ? action.payload : true;\n    },\n    \n    reset: (state: IDropzoneWizardState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n\n","import * as credits from \"./credits/slice\";\nimport * as dropzone from \"./dropzone/slice\";\nimport * as dropzoneUser from \"./dropzone_user/slice\";\nimport * as extra from \"./extra/slice\";\nimport * as load from \"./load/slice\";\nimport * as plane from \"./plane/slice\";\nimport * as rig from \"./rig/slice\";\nimport * as rigInspection from \"./rig_inspection/slice\";\nimport * as rigInspectionTemplate from \"./rig_inspection_template/slice\";\nimport * as manifest from \"./manifest/slice\";\nimport * as manifestGroup from \"./manifest_group/slice\";\nimport * as ticketType from \"./ticket_type/slice\";\nimport * as user from \"./user/slice\";\nimport * as userWizard from \"../dialogs/UserWizard/slice\";\nimport * as dropzoneWizard from \"../dialogs/DropzoneWizard/slice\";\n\nexport const initialState = {\n  credits: credits.initialState,\n  dropzone: dropzone.initialState,\n  dropzoneUser: dropzoneUser.initialState,\n  extra: extra.initialState,\n  load: load.initialState,\n  plane: plane.initialState,\n  rig: rig.initialState,\n  rigInspection: rigInspection.initialState,\n  rigInspectionTemplate: rigInspectionTemplate.initialState,\n  manifest: manifest.initialState,\n  manifestGroup: manifestGroup.initialState,\n  ticketType: ticketType.initialState,\n  user: user.initialState,\n  userWizard: userWizard.initialState,\n  dropzoneWizard: dropzoneWizard.initialState,\n}\nexport const reducers = {\n  credits: credits.default,\n  dropzone: dropzone.default,\n  dropzoneUser: dropzoneUser.default,\n  extra: extra.default,\n  load: load.default,\n  plane: plane.default,\n  rig: rig.default,\n  rigInspection: rigInspection.default,\n  rigInspectionTemplate: rigInspectionTemplate.default,\n  manifest: manifest.default,\n  manifestGroup: manifestGroup.default,\n  ticketType: ticketType.default,\n  user: user.default,\n  userWizard: userWizard.default,\n  dropzoneWizard: dropzoneWizard.default,\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nexport const initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'screens/user',\n  initialState,\n  reducers: {\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IManifestScreenState {\n  isSearchVisible: boolean;\n  selectedUsers: DropzoneUser[];\n  searchText: string;\n  display: \"list\" | \"cards\";\n}\n\nexport const initialState: IManifestScreenState = {\n  isSearchVisible: false,\n  selectedUsers: [],\n  searchText: \"\",\n  display: \"list\",\n};\n\n\nexport default createSlice({\n  name: 'manifestScreen',\n  initialState,\n  reducers: {\n    setSelected: (state: IManifestScreenState, action: PayloadAction<DropzoneUser[]>) => {\n      state.selectedUsers = action.payload;\n    },\n    setSearchText: (state: IManifestScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IManifestScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n\n    setDisplayStyle: (state: IManifestScreenState, action: PayloadAction<\"cards\" | \"list\">) => {\n      state.display = action.payload;\n    },\n    \n    reset: (state: IManifestScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema.d\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport * as users from \"./authenticated/users/slice\";\nimport * as login from \"./unauthenticated/login/slice\";\nimport * as manifest from \"./authenticated/manifest/slice\";\nimport * as signup from \"./unauthenticated/signup/slice\";\n\nexport const initialState = {\n  manifest: manifest.initialState,\n  users: users.initialState,\n  login: login.initialState,\n  signup: signup.initialState,\n}\nexport const reducers = {\n  manifest: manifest.default,\n  users: users.default,\n  login: login.default,\n  signup: signup.default,\n}","import { combineReducers, configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { reducers as forms, initialState as initialStateForms } from \"../components/forms/slice\";\nimport { reducers as screens, initialState as initialStateScreens } from \"../screens/slice\";\n\n\nimport globalSlice, { initialState as initialStateGlobal } from \"./global\";\nimport notificationSlice, { initialState as initialStateNotification } from \"../components/notifications/slice\";\n\nexport const initialState = {\n  forms: initialStateForms,\n  screens: initialStateScreens,\n  global: initialStateGlobal,\n  notifications: initialStateNotification,\n} as RootState;\n\nconst persistConfig = {\n  key: 'open-manifest.0.9.1',\n  storage: Platform.OS === \"web\" || false ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconst screenReducers = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].reducer }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"reducer\"]\n};\nconst formReducers = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].reducer }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"reducer\"]\n};\n\nexport const screenActions = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].actions }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"actions\"]\n};\nexport const formActions = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].actions }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"actions\"]\n};\n\nexport const actions = {\n  forms: formActions,\n  screens: screenActions,\n  global: globalSlice.actions,\n  notifications: notificationSlice.actions,\n};\n\nexport const rootReducer = combineReducers({\n  global: globalSlice.reducer,\n  notifications: notificationSlice.reducer,\n  screens: combineReducers(screenReducers),\n  forms: combineReducers(formReducers),\n});\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\n\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useMutationUpdateUser from \"./useMutationUpdateUser\";\n\nexport const QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        credits\n        hasCredits\n        hasExitWeight\n        hasMembership\n        hasReserveInDate\n        hasRigInspection\n        hasLicense\n        permissions\n        expiresAt\n\n        role {\n          id\n          name\n        }\n\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              amount\n            }\n          }\n        }\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          pushToken\n\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            loadNumber\n            isOpen\n            maxSlots\n            state\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function useCurrentDropzone() {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const pushToken = useAppSelector(state => state.global.expoPushToken);\n  const dispatch = useAppDispatch();\n\n  const currentDropzone = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: dropzoneId,\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: () => null,\n    onError: () => null,\n  });\n\n  // Update remote push token if we have a local token, but no\n  // token saved on the server. This is done so that the server\n  // is able to send us push notifications\n  React.useEffect(() => {\n    const userId = currentDropzone?.data?.dropzone?.currentUser?.user?.id;\n    const remoteToken = currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken;\n    const localToken = pushToken;\n\n    if (!currentDropzone.loading && currentDropzone.called) {\n      if (localToken && localToken !== remoteToken) {\n        mutationUpdateUser.mutate({\n          id: Number(userId),\n          pushToken: localToken,\n        })\n      }\n    }\n\n  }, [pushToken, currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken]);\n\n  return {\n    ...currentDropzone,\n    dropzone: currentDropzone?.data?.dropzone,\n    currentUser: currentDropzone?.data?.dropzone?.currentUser,\n  }\n}","import * as React from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default React.forwardRef<ScrollView, IScrollableScreen>((props, ref) => {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n  const { style, children, contentContainerStyle, ...rest } = props;\n\n\n  return (\n    <ScrollView\n      {...rest}\n      ref={ref}\n      keyboardDismissMode=\"on-drag\"\n      keyboardShouldPersistTaps=\"handled\"\n      contentInsetAdjustmentBehavior=\"always\"\n      style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, style]}\n      contentContainerStyle={[styles.content, contentContainerStyle]}\n    >\n      {children}\n    </ScrollView>\n  )\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\" | \"warning\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport const initialState = { queue: [] } as INotificationState;\nexport default createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { List, Menu, TextInput } from \"react-native-paper\";\nimport { Federation, Query } from \"../../../graphql/schema.d\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  React.useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      \n      anchor={\n        <TouchableOpacity onPress={() => { setMenuOpen(true); }}>\n          <TextInput\n            mode=\"outlined\"\n            disabled\n            style={{ minWidth: 200 }}\n            value={\n              props.value?.name || \"Please select federation\"\n            }\n          />\n        </TouchableOpacity>\n      }>\n      {\n        data?.federations?.map((federation) => \n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n            key={`federation-select-${federation.id}`}\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Portal, Dialog } from 'react-native-paper';\nimport { TriangleColorPicker } from \"react-native-color-picker\";\nimport SliderComponent from \"@react-native-community/slider\";\n\ninterface IColorPickerDialog {\n  open: boolean;\n  value: string;\n  onChange(color: string): void;\n  onClose(): void;\n}\nexport default function ColorPickerDialog(props: IColorPickerDialog) {\n  const { value, onChange, open, onClose } = props;\n\n  const ref = React.useRef<TriangleColorPicker>();\n  return (\n    <Portal>\n      <Dialog\n        visible={!!open}\n        onDismiss={() => onClose()}\n      >\n          <Dialog.Title>Custom color</Dialog.Title>\n          <Dialog.Content style={{ padding: 20, height: 400 }}>\n            { /* @ts-ignore */ }\n            <TriangleColorPicker\n              style={{ flex: 1 }}\n              sliderComponent={SliderComponent as any}\n              defaultColor={value}\n              hideSliders\n              ref={ref}\n            />\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={() => onClose()}>Cancel</Button>\n            <Button\n              onPress={() => {\n                onChange(ref.current.getColor());\n              }}\n            >\n              Save\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Card, HelperText, List, Surface, TouchableRipple } from \"react-native-paper\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport ColorPickerDialog from \"./ColorPickerDialog\";\n\nconst COLOR_PRESETS = [\n  \"#000000\",\n  \"#AAAAAA\",\n  \"#DDDDDD\",\n  \"#FF1414\",\n  \"#D6116B\",\n  \"#B70E97\",\n  \"#6718AC\",\n  \"#1E47AB\",\n  \"#11839E\",\n  \"#0DA583\",\n  \"#10C626\",\n  \"#92EA12\",\n  \"#FF8B14\",\n  \"#FFB214\",\n];\n\ninterface IColorPicker {\n  title: string;\n  helperText: string;\n  value: string;\n  error?: string;\n  onChange(color: string): void;\n}\n\nfunction ColorPicker(props: IColorPicker) {\n  const { value, title, helperText, onChange, error } = props;\n\n  const isCustomColor = !COLOR_PRESETS.includes(value);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  return (\n    <>\n    <ColorPickerDialog\n      open={isDialogOpen}\n      value={value}\n      onChange={(color) => {\n        onChange(color);\n        setDialogOpen(false);\n      }}\n      onClose={() => setDialogOpen(false)}\n    />\n    <Card style={styles.card}>\n      <List.Subheader>{title}</List.Subheader>\n      \n      <Card.Content style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n        {\n          COLOR_PRESETS.map((color) =>\n          <TouchableRipple onPress={() => onChange(color)}>\n            <Surface style={[styles.colorBox, { backgroundColor: color }, color === value ? { borderWidth: 2, borderColor: \"black\" } : {}]}>\n            </Surface>\n          </TouchableRipple>\n          )\n        }\n        <TouchableRipple onPress={() => setDialogOpen(true)}>\n          <Surface style={[styles.colorBox, { backgroundColor: isCustomColor ? value : \"#FFFFFF\" }, isCustomColor ? { borderWidth: 2, borderColor: \"black\" } : {}]}>\n            <MaterialIcons name=\"add\" size={1} />\n          </Surface>\n        </TouchableRipple>\n      </Card.Content>\n      <HelperText type={!!error ? \"error\" : \"info\"}>\n        { error || helperText }\n      </HelperText>\n    </Card>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16, height: 200 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 10, textAlign: \"center\" },\n\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }\n});\n\nexport default ColorPicker;","import ColorPicker from \"./ColorPicker\";\n\nexport default ColorPicker;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Surface } from \"react-native-paper\";\n\ninterface IPhonePreview {\n  primaryColor?: string;\n  secondaryColor?: string;\n}\n\nfunction PhonePreview(props: IPhonePreview) {\n\n  const { primaryColor, secondaryColor } = props;\n\n  return (\n    <View>\n      <Surface style={styles.previewContainer}>\n        <View style={[styles.previewAppBar, { backgroundColor: primaryColor }]} />\n        <View style={[styles.previewLoadCard]} />\n        <View style={[styles.previewLoadCard2]} />\n        <View style={[styles.previewLoadCard3]} />\n        <View style={[styles.previewButton, { backgroundColor: secondaryColor }]} />\n        <View style={[styles.previewTabBar, { backgroundColor: primaryColor }]} />\n      </Surface>\n      <Text style={styles.label}>Phone</Text>\n    </View>\n          \n  )\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"white\",\n    fontSize: 16,\n    marginTop: 8\n  },\n  previewContainer: {\n    height: 200,\n    width: 100,\n    borderRadius: 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#CCCCCC\",\n    alignSelf: \"center\"\n  },\n\n  previewAppBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: 0,\n    borderTopRightRadius: 5,\n    borderTopLeftRadius: 5,\n  },\n  previewTabBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    bottom: 0,\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n  },\n  previewLoadCard: {\n    width: \"96%\",\n    borderRadius: 2,\n    height: \"20%\",\n    marginVertical: \"2%\",\n    marginHorizontal: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n  },\n  previewLoadCard2: {\n    width: \"96%\",\n    height: \"20%\",\n    borderRadius: 2,\n    backgroundColor: \"#DDDDDD\",\n    marginVertical: \"2%\",\n    marginHorizontal: \"2%\",\n    position: \"absolute\",\n    top: \"37%\",\n  },\n  previewLoadCard3: {\n    width: \"96%\",\n    height: \"20%\",\n    borderRadius: 2,\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    marginHorizontal: \"2%\",\n    position: \"absolute\",\n    top: \"59%\",\n  },\n  previewButton: {\n    width: \"35%\",\n    height: \"6%\",\n    position: \"absolute\",\n    bottom: 22,\n    right: 5,\n    borderRadius: 5,\n    backgroundColor: \"#DDDDDD\",\n  },\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default PhonePreview;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Surface } from \"react-native-paper\";\n\ninterface IWebPreview {\n  primaryColor?: string;\n  secondaryColor?: string;\n}\n\nfunction WebPreview(props: IWebPreview) {\n\n  const { primaryColor, secondaryColor } = props;\n\n  return (\n    <View>\n    <Surface style={styles.previewContainer}>\n      <View style={[styles.previewAppBar, { backgroundColor: primaryColor }]} />\n      <View style={[styles.previewLoadCard]} />\n      <View style={[styles.previewLoadCard2]} />\n      <View style={[styles.previewLoadCard3]} />\n      <View style={[styles.previewButton, { backgroundColor: secondaryColor }]} />\n      <View style={[styles.previewTabBar, { backgroundColor: primaryColor }]} />\n    </Surface>\n      <Text style={styles.label}>Web</Text>\n    </View>\n          \n  )\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"white\",\n    fontSize: 16,\n    marginTop: 8\n  },\n  previewContainer: {\n    height: 100,\n    width: 170,\n    borderRadius: 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#CCCCCC\",\n    alignSelf: \"center\"\n  },\n\n  previewAppBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: 0,\n    borderTopRightRadius: 5,\n    borderTopLeftRadius: 5,\n  },\n  previewTabBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    bottom: 0,\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n  },\n  previewLoadCard: {\n    width: \"30%\",\n    height: \"60%\",\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"2%\"\n  },\n  previewLoadCard2: {\n    width: \"30%\",\n    height: \"60%\",\n    backgroundColor: \"#DDDDDD\",\n    marginVertical: \"2%\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"35%\"\n  },\n  previewLoadCard3: {\n    width: \"30%\",\n    height: \"60%\",\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"68%\"\n  },\n  previewButton: {\n    width: \"12%\",\n    height: \"6%\",\n    position: \"absolute\",\n    bottom: 15,\n    right: 8,\n    borderRadius: 5,\n    backgroundColor: \"#DDDDDD\",\n  },\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default WebPreview;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateUserArgs, UpdateUserPayload, UserSignUpPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $pushToken: String,\n    $nickname: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        pushToken: $pushToken\n        name: $name,\n        phone: $phone,\n        email: $email,\n        nickname: $nickname,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      user {\n        id\n        name\n        exitWeight\n        email\n        pushToken\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateUserArgs[\"input\"][\"attributes\"], UpdateUserPayload>(\n  MUTATION_UPDATE_USER, {\n    getPayload: (result) => result.updateUser,\n    fieldErrorMap: {\n      license: \"licenseId\",\n      exit_weight: \"exitWeight\",\n    },\n  }\n);","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n    primary: \"#333333\",\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n    primary: \"#333333\",\n  },\n};\n\ninterface IGlobalState {\n\n  currentDropzoneId: number;\n  // @deprecated\n  currentUser: User | null;\n  credentials: Credential | null;\n  // @deprecated\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  expoPushToken: string;\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nexport const initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  currentDropzoneId: null,\n  permissions: [],\n  credentials: null,\n  expoPushToken: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setExpoPushToken: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.expoPushToken = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone | null>) => {\n      state.currentDropzone = action.payload;\n      state.currentDropzoneId = action.payload?.id ? Number(action.payload?.id) : null;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"static/media/logo.6fa2ed95.png\";","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema.d\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nexport const initialState: IExtraEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/extra',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IExtraEditState, action: PayloadAction<boolean | Extra>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n        state.fields.cost.value = action.payload.cost;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ILoadEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/load',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ILoadEditState, action: PayloadAction<boolean | Load>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AnyResource = {};\n\n/** Autogenerated input type of CreateDropzone */\nexport type CreateDropzoneInput = {\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateDropzone */\nexport type CreateDropzonePayload = {\n  __typename?: 'CreateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateExtra */\nexport type CreateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateExtra */\nexport type CreateExtraPayload = {\n  __typename?: 'CreateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateLoad */\nexport type CreateLoadInput = {\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateLoad */\nexport type CreateLoadPayload = {\n  __typename?: 'CreateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreatePlane */\nexport type CreatePlaneInput = {\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreatePlane */\nexport type CreatePlanePayload = {\n  __typename?: 'CreatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of CreateRig */\nexport type CreateRigInput = {\n  attributes: RigInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateRigInspection */\nexport type CreateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateRigInspection */\nexport type CreateRigInspectionPayload = {\n  __typename?: 'CreateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of CreateRig */\nexport type CreateRigPayload = {\n  __typename?: 'CreateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of CreateSlot */\nexport type CreateSlotInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlot */\nexport type CreateSlotPayload = {\n  __typename?: 'CreateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of CreateSlots */\nexport type CreateSlotsInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlots */\nexport type CreateSlotsPayload = {\n  __typename?: 'CreateSlotsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreateTicket */\nexport type CreateTicketInput = {\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTicket */\nexport type CreateTicketPayload = {\n  __typename?: 'CreateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of CreateTransaction */\nexport type CreateTransactionInput = {\n  attributes: TransactionInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTransaction */\nexport type CreateTransactionPayload = {\n  __typename?: 'CreateTransactionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  transaction?: Maybe<Transaction>;\n};\n\nexport type Credential = {\n  __typename?: 'Credential';\n  accessToken: Scalars['String'];\n  client: Scalars['String'];\n  expiry: Scalars['Int'];\n  tokenType: Scalars['String'];\n  uid: Scalars['String'];\n};\n\n/** Autogenerated input type of DeleteDropzone */\nexport type DeleteDropzoneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteDropzone */\nexport type DeleteDropzonePayload = {\n  __typename?: 'DeleteDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n};\n\n/** Autogenerated input type of DeleteLoad */\nexport type DeleteLoadInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteLoad */\nexport type DeleteLoadPayload = {\n  __typename?: 'DeleteLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of DeletePlane */\nexport type DeletePlaneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeletePlane */\nexport type DeletePlanePayload = {\n  __typename?: 'DeletePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of DeleteSlot */\nexport type DeleteSlotInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteSlot */\nexport type DeleteSlotPayload = {\n  __typename?: 'DeleteSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of DeleteTicket */\nexport type DeleteTicketInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteTicket */\nexport type DeleteTicketPayload = {\n  __typename?: 'DeleteTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\nexport type Dropzone = AnyResource & {\n  __typename?: 'Dropzone';\n  allowedJumpTypes: Array<JumpType>;\n  banner?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Int'];\n  currentUser: DropzoneUser;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  dropzoneUsers: DropzoneUserConnection;\n  extras: Array<Extra>;\n  federation: Federation;\n  id: Scalars['ID'];\n  isCreditSystemEnabled: Scalars['Boolean'];\n  isPublic: Scalars['Boolean'];\n  loads: LoadConnection;\n  /** Get the master log entry for a given date */\n  masterLog: MasterLog;\n  name?: Maybe<Scalars['String']>;\n  planes: Array<Plane>;\n  primaryColor?: Maybe<Scalars['String']>;\n  rigInspectionTemplate?: Maybe<FormTemplate>;\n  /** Get rigs for dropzone */\n  rigs?: Maybe<Array<Rig>>;\n  roles: Array<UserRole>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n  userRoles: Array<UserRole>;\n};\n\n\nexport type DropzoneAllowedJumpTypesArgs = {\n  userId: Array<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUserArgs = {\n  id?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUsersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  permissions?: Maybe<Array<Permission>>;\n  search?: Maybe<Scalars['String']>;\n  licensed?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type DropzoneLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneMasterLogArgs = {\n  date: Scalars['Int'];\n};\n\n\nexport type DropzoneTicketTypesArgs = {\n  isPublic?: Maybe<Scalars['Boolean']>;\n};\n\n/** The connection type for Dropzone. */\nexport type DropzoneConnection = {\n  __typename?: 'DropzoneConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Dropzone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneEdge = {\n  __typename?: 'DropzoneEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Dropzone>;\n};\n\nexport type DropzoneInput = {\n  name: Scalars['String'];\n  banner?: Maybe<Scalars['String']>;\n  federationId: Scalars['Int'];\n  isPublic?: Maybe<Scalars['Boolean']>;\n  primaryColor?: Maybe<Scalars['String']>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  isCreditSystemEnabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DropzoneUser = AnyResource & {\n  __typename?: 'DropzoneUser';\n  /** Get user rigs that have been inspected and marked as OK + dropzone rigs */\n  availableRigs?: Maybe<Array<Rig>>;\n  createdAt: Scalars['Int'];\n  credits?: Maybe<Scalars['Int']>;\n  dropzone: Dropzone;\n  expiresAt?: Maybe<Scalars['Int']>;\n  hasCredits: Scalars['Boolean'];\n  hasExitWeight: Scalars['Boolean'];\n  hasLicense: Scalars['Boolean'];\n  hasMembership: Scalars['Boolean'];\n  hasReserveInDate: Scalars['Boolean'];\n  hasRigInspection: Scalars['Boolean'];\n  id: Scalars['ID'];\n  notifications?: Maybe<NotificationConnection>;\n  permissions?: Maybe<Array<Permission>>;\n  rigInspections?: Maybe<Array<RigInspection>>;\n  role?: Maybe<UserRole>;\n  transactions?: Maybe<TransactionConnection>;\n  unseenNotifications: Scalars['Int'];\n  updatedAt: Scalars['Int'];\n  user: User;\n};\n\n\nexport type DropzoneUserNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneUserTransactionsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for DropzoneUser. */\nexport type DropzoneUserConnection = {\n  __typename?: 'DropzoneUserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DropzoneUser>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneUserEdge = {\n  __typename?: 'DropzoneUserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DropzoneUser>;\n};\n\nexport type DropzoneUserInput = {\n  expiresAt?: Maybe<Scalars['Int']>;\n  credits?: Maybe<Scalars['Float']>;\n  userRoleId?: Maybe<Scalars['Int']>;\n};\n\nexport type Extra = {\n  __typename?: 'Extra';\n  cost: Scalars['Int'];\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type ExtraInput = {\n  name?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  ticketTypeIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Federation = {\n  __typename?: 'Federation';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type FormTemplate = {\n  __typename?: 'FormTemplate';\n  createdAt: Scalars['Int'];\n  definition?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FormTemplateInput = {\n  name?: Maybe<Scalars['String']>;\n  definition?: Maybe<Scalars['String']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of GrantPermission */\nexport type GrantPermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of GrantPermission */\nexport type GrantPermissionPayload = {\n  __typename?: 'GrantPermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type JumpType = {\n  __typename?: 'JumpType';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type License = AnyResource & {\n  __typename?: 'License';\n  createdAt: Scalars['Int'];\n  federation?: Maybe<Federation>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Load = AnyResource & {\n  __typename?: 'Load';\n  createdAt: Scalars['Int'];\n  dispatchAt?: Maybe<Scalars['Int']>;\n  gca?: Maybe<DropzoneUser>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isFull: Scalars['Boolean'];\n  isOpen: Scalars['Boolean'];\n  isReady: Scalars['Boolean'];\n  loadMaster?: Maybe<DropzoneUser>;\n  loadNumber: Scalars['Int'];\n  maxSlots: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  pilot?: Maybe<DropzoneUser>;\n  plane: Plane;\n  slots?: Maybe<Array<Slot>>;\n  state: LoadState;\n  updatedAt: Scalars['Int'];\n  weight: Scalars['Int'];\n};\n\n/** The connection type for Load. */\nexport type LoadConnection = {\n  __typename?: 'LoadConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LoadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Load>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type LoadEdge = {\n  __typename?: 'LoadEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Load>;\n};\n\nexport type LoadInput = {\n  dispatchAt?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  isOpen?: Maybe<Scalars['Boolean']>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  pilotId?: Maybe<Scalars['Int']>;\n  planeId?: Maybe<Scalars['Int']>;\n  gcaId?: Maybe<Scalars['Int']>;\n  loadMasterId?: Maybe<Scalars['Int']>;\n  state?: Maybe<LoadState>;\n};\n\nexport enum LoadState {\n  /** open */\n  Open = 'open',\n  /** boarding_call */\n  BoardingCall = 'boarding_call',\n  /** in_flight */\n  InFlight = 'in_flight',\n  /** landed */\n  Landed = 'landed',\n  /** cancelled */\n  Cancelled = 'cancelled'\n}\n\nexport type MasterLog = {\n  __typename?: 'MasterLog';\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  dzso?: Maybe<Array<DropzoneUser>>;\n  id: Scalars['ID'];\n  loads?: Maybe<Array<Load>>;\n  notes?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createDropzone?: Maybe<CreateDropzonePayload>;\n  createExtra?: Maybe<CreateExtraPayload>;\n  createLoad?: Maybe<CreateLoadPayload>;\n  createPlane?: Maybe<CreatePlanePayload>;\n  createRig?: Maybe<CreateRigPayload>;\n  createRigInspection?: Maybe<CreateRigInspectionPayload>;\n  createSlot?: Maybe<CreateSlotPayload>;\n  createSlots?: Maybe<CreateSlotsPayload>;\n  createTicketType?: Maybe<CreateTicketPayload>;\n  createTransaction?: Maybe<CreateTransactionPayload>;\n  deleteDropzone?: Maybe<DeleteDropzonePayload>;\n  deleteLoad?: Maybe<DeleteLoadPayload>;\n  deletePlane?: Maybe<DeletePlanePayload>;\n  deleteSlot?: Maybe<DeleteSlotPayload>;\n  deleteTicketType?: Maybe<DeleteTicketPayload>;\n  grantPermission?: Maybe<GrantPermissionPayload>;\n  revokePermission?: Maybe<RevokePermissionPayload>;\n  updateDropzone?: Maybe<UpdateDropzonePayload>;\n  updateDropzoneUser?: Maybe<UpdateDropzoneUserPayload>;\n  updateExtra?: Maybe<UpdateExtraPayload>;\n  updateFormTemplate?: Maybe<UpdateFormTemplatePayload>;\n  updateLoad?: Maybe<UpdateLoadPayload>;\n  updateNotification?: Maybe<UpdateNotificationPayload>;\n  updatePlane?: Maybe<UpdatePlanePayload>;\n  updateRig?: Maybe<UpdateRigPayload>;\n  updateRigInspection?: Maybe<UpdateRigInspectionPayload>;\n  updateRole?: Maybe<UpdateRolePayload>;\n  updateSlot?: Maybe<UpdateSlotPayload>;\n  updateTicketType?: Maybe<UpdateTicketPayload>;\n  updateUser?: Maybe<UpdateUserPayload>;\n  userLogin?: Maybe<UserLoginPayload>;\n  userLogout?: Maybe<UserLogoutPayload>;\n  userResendConfirmation?: Maybe<UserResendConfirmationPayload>;\n  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;\n  userSendPasswordResetWithToken?: Maybe<UserSendPasswordResetWithTokenPayload>;\n  userSignUp?: Maybe<UserSignUpPayload>;\n  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;\n  userUpdatePasswordWithToken?: Maybe<UserUpdatePasswordWithTokenPayload>;\n};\n\n\nexport type MutationCreateDropzoneArgs = {\n  input: CreateDropzoneInput;\n};\n\n\nexport type MutationCreateExtraArgs = {\n  input: CreateExtraInput;\n};\n\n\nexport type MutationCreateLoadArgs = {\n  input: CreateLoadInput;\n};\n\n\nexport type MutationCreatePlaneArgs = {\n  input: CreatePlaneInput;\n};\n\n\nexport type MutationCreateRigArgs = {\n  input: CreateRigInput;\n};\n\n\nexport type MutationCreateRigInspectionArgs = {\n  input: CreateRigInspectionInput;\n};\n\n\nexport type MutationCreateSlotArgs = {\n  input: CreateSlotInput;\n};\n\n\nexport type MutationCreateSlotsArgs = {\n  input: CreateSlotsInput;\n};\n\n\nexport type MutationCreateTicketTypeArgs = {\n  input: CreateTicketInput;\n};\n\n\nexport type MutationCreateTransactionArgs = {\n  input: CreateTransactionInput;\n};\n\n\nexport type MutationDeleteDropzoneArgs = {\n  input: DeleteDropzoneInput;\n};\n\n\nexport type MutationDeleteLoadArgs = {\n  input: DeleteLoadInput;\n};\n\n\nexport type MutationDeletePlaneArgs = {\n  input: DeletePlaneInput;\n};\n\n\nexport type MutationDeleteSlotArgs = {\n  input: DeleteSlotInput;\n};\n\n\nexport type MutationDeleteTicketTypeArgs = {\n  input: DeleteTicketInput;\n};\n\n\nexport type MutationGrantPermissionArgs = {\n  input: GrantPermissionInput;\n};\n\n\nexport type MutationRevokePermissionArgs = {\n  input: RevokePermissionInput;\n};\n\n\nexport type MutationUpdateDropzoneArgs = {\n  input: UpdateDropzoneInput;\n};\n\n\nexport type MutationUpdateDropzoneUserArgs = {\n  input: UpdateDropzoneUserInput;\n};\n\n\nexport type MutationUpdateExtraArgs = {\n  input: UpdateExtraInput;\n};\n\n\nexport type MutationUpdateFormTemplateArgs = {\n  input: UpdateFormTemplateInput;\n};\n\n\nexport type MutationUpdateLoadArgs = {\n  input: UpdateLoadInput;\n};\n\n\nexport type MutationUpdateNotificationArgs = {\n  input: UpdateNotificationInput;\n};\n\n\nexport type MutationUpdatePlaneArgs = {\n  input: UpdatePlaneInput;\n};\n\n\nexport type MutationUpdateRigArgs = {\n  input: UpdateRigInput;\n};\n\n\nexport type MutationUpdateRigInspectionArgs = {\n  input: UpdateRigInspectionInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationUpdateSlotArgs = {\n  input: UpdateSlotInput;\n};\n\n\nexport type MutationUpdateTicketTypeArgs = {\n  input: UpdateTicketInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationUserLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUserResendConfirmationArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetWithTokenArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSignUpArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  confirmSuccessUrl?: Maybe<Scalars['String']>;\n  phone: Scalars['String'];\n  exitWeight: Scalars['Float'];\n  name: Scalars['String'];\n  licenseId?: Maybe<Scalars['Int']>;\n  pushToken?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  currentPassword?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordWithTokenArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  isSeen: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n  notificationType?: Maybe<Scalars['String']>;\n  receivedBy: DropzoneUser;\n  resource?: Maybe<AnyResource>;\n  sentBy?: Maybe<DropzoneUser>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  __typename?: 'NotificationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  __typename?: 'NotificationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type NotificationInput = {\n  isSeen: Scalars['Boolean'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport enum Permission {\n  /** updateDropzone */\n  UpdateDropzone = 'updateDropzone',\n  /** deleteDropzone */\n  DeleteDropzone = 'deleteDropzone',\n  /** createLoad */\n  CreateLoad = 'createLoad',\n  /** updateLoad */\n  UpdateLoad = 'updateLoad',\n  /** deleteLoad */\n  DeleteLoad = 'deleteLoad',\n  /** readLoad */\n  ReadLoad = 'readLoad',\n  /** createSlot */\n  CreateSlot = 'createSlot',\n  /** updateSlot */\n  UpdateSlot = 'updateSlot',\n  /** deleteSlot */\n  DeleteSlot = 'deleteSlot',\n  /** createUserSlot */\n  CreateUserSlot = 'createUserSlot',\n  /** createUserSlotWithSelf */\n  CreateUserSlotWithSelf = 'createUserSlotWithSelf',\n  /** updateUserSlot */\n  UpdateUserSlot = 'updateUserSlot',\n  /** deleteUserSlot */\n  DeleteUserSlot = 'deleteUserSlot',\n  /** createStudentSlot */\n  CreateStudentSlot = 'createStudentSlot',\n  /** updateStudentSlot */\n  UpdateStudentSlot = 'updateStudentSlot',\n  /** deleteStudentSlot */\n  DeleteStudentSlot = 'deleteStudentSlot',\n  /** createTicketType */\n  CreateTicketType = 'createTicketType',\n  /** updateTicketType */\n  UpdateTicketType = 'updateTicketType',\n  /** deleteTicketType */\n  DeleteTicketType = 'deleteTicketType',\n  /** createExtra */\n  CreateExtra = 'createExtra',\n  /** updateExtra */\n  UpdateExtra = 'updateExtra',\n  /** deleteExtra */\n  DeleteExtra = 'deleteExtra',\n  /** readExtra */\n  ReadExtra = 'readExtra',\n  /** createPlane */\n  CreatePlane = 'createPlane',\n  /** updatePlane */\n  UpdatePlane = 'updatePlane',\n  /** deletePlane */\n  DeletePlane = 'deletePlane',\n  /** createRig */\n  CreateRig = 'createRig',\n  /** updateRig */\n  UpdateRig = 'updateRig',\n  /** deleteRig */\n  DeleteRig = 'deleteRig',\n  /** readRig */\n  ReadRig = 'readRig',\n  /** createDropzoneRig */\n  CreateDropzoneRig = 'createDropzoneRig',\n  /** updateDropzoneRig */\n  UpdateDropzoneRig = 'updateDropzoneRig',\n  /** deleteDropzoneRig */\n  DeleteDropzoneRig = 'deleteDropzoneRig',\n  /** readDropzoneRig */\n  ReadDropzoneRig = 'readDropzoneRig',\n  /** readPermissions */\n  ReadPermissions = 'readPermissions',\n  /** updatePermissions */\n  UpdatePermissions = 'updatePermissions',\n  /** createPackjob */\n  CreatePackjob = 'createPackjob',\n  /** updatePackjob */\n  UpdatePackjob = 'updatePackjob',\n  /** deletePackjob */\n  DeletePackjob = 'deletePackjob',\n  /** readPackjob */\n  ReadPackjob = 'readPackjob',\n  /** createFormTemplate */\n  CreateFormTemplate = 'createFormTemplate',\n  /** updateFormTemplate */\n  UpdateFormTemplate = 'updateFormTemplate',\n  /** deleteFormTemplate */\n  DeleteFormTemplate = 'deleteFormTemplate',\n  /** readFormTemplate */\n  ReadFormTemplate = 'readFormTemplate',\n  /** readUser */\n  ReadUser = 'readUser',\n  /** updateUser */\n  UpdateUser = 'updateUser',\n  /** deleteUser */\n  DeleteUser = 'deleteUser',\n  /** createUser */\n  CreateUser = 'createUser',\n  /** actAsPilot */\n  ActAsPilot = 'actAsPilot',\n  /** actAsLoadMaster */\n  ActAsLoadMaster = 'actAsLoadMaster',\n  /** actAsGCA */\n  ActAsGca = 'actAsGCA',\n  /** actAsDZSO */\n  ActAsDzso = 'actAsDZSO',\n  /** actAsRigInspector */\n  ActAsRigInspector = 'actAsRigInspector',\n  /** createUserTransaction */\n  CreateUserTransaction = 'createUserTransaction',\n  /** readUserTransactions */\n  ReadUserTransactions = 'readUserTransactions',\n  /** grantPermission */\n  GrantPermission = 'grantPermission',\n  /** revokePermission */\n  RevokePermission = 'revokePermission'\n}\n\nexport type Plane = AnyResource & {\n  __typename?: 'Plane';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  hours?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  maxSlots?: Maybe<Scalars['Int']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type PlaneInput = {\n  name?: Maybe<Scalars['String']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  hours?: Maybe<Scalars['Int']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get dropzone details */\n  dropzone: Dropzone;\n  /** Get all available dropzones */\n  dropzones: DropzoneConnection;\n  /** Get ticket addons for a dropzone */\n  extras: Array<Extra>;\n  /** Available federations */\n  federations: Array<Federation>;\n  /** Load base64 images as graphql */\n  image?: Maybe<Scalars['String']>;\n  /** Get all jump types */\n  jumpTypes: Array<JumpType>;\n  /** Get all licenses for a federation */\n  licenses: Array<License>;\n  /** Get load by id */\n  load: Load;\n  /** Get loads */\n  loads: LoadConnection;\n  /** Get planes from a dropzone */\n  planes: Array<Plane>;\n  /** Get ticket types for a dropzone */\n  ticketTypes: Array<TicketType>;\n  userCheckPasswordToken: User;\n  userConfirmAccount: User;\n};\n\n\nexport type QueryDropzoneArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryDropzonesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryExtrasArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryImageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryJumpTypesArgs = {\n  allowedForUserId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLicensesArgs = {\n  federationId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLoadArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  dropzoneId: Scalars['Int'];\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPlanesArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryTicketTypesArgs = {\n  dropzoneId: Scalars['Int'];\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryUserCheckPasswordTokenArgs = {\n  resetPasswordToken: Scalars['String'];\n  redirectUrl?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryUserConfirmAccountArgs = {\n  confirmationToken: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n/** Autogenerated input type of RevokePermission */\nexport type RevokePermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of RevokePermission */\nexport type RevokePermissionPayload = {\n  __typename?: 'RevokePermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type Rig = AnyResource & {\n  __typename?: 'Rig';\n  canopySize?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  id: Scalars['ID'];\n  isPublic: Scalars['Boolean'];\n  maintainedAt?: Maybe<Scalars['Int']>;\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  rigType?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n  user?: Maybe<User>;\n};\n\nexport type RigInput = {\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  maintainedAt?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n  /** student / sport / tandem */\n  rigType?: Maybe<Scalars['String']>;\n  isPublic?: Maybe<Scalars['Boolean']>;\n  canopySize?: Maybe<Scalars['Int']>;\n};\n\nexport type RigInspection = {\n  __typename?: 'RigInspection';\n  createdAt: Scalars['Int'];\n  definition: Scalars['String'];\n  dropzoneUser: DropzoneUser;\n  formTemplate: FormTemplate;\n  id: Scalars['ID'];\n  inspectedBy: DropzoneUser;\n  isOk: Scalars['Boolean'];\n  rig?: Maybe<Rig>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type RigInspectionInput = {\n  dropzoneId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  definition?: Maybe<Scalars['String']>;\n  isOk?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Slot = AnyResource & {\n  __typename?: 'Slot';\n  createdAt: Scalars['Int'];\n  dropzoneUser?: Maybe<DropzoneUser>;\n  exitWeight: Scalars['Int'];\n  extras?: Maybe<Array<Extra>>;\n  groupNumber: Scalars['Int'];\n  id: Scalars['ID'];\n  jumpType?: Maybe<JumpType>;\n  load: Load;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n  passengerName?: Maybe<Scalars['String']>;\n  rig?: Maybe<Rig>;\n  ticketType?: Maybe<TicketType>;\n  user?: Maybe<User>;\n  wingLoading?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotInput = {\n  dropzoneUserId?: Maybe<Scalars['Int']>;\n  ticketTypeId?: Maybe<Scalars['Int']>;\n  jumpTypeId?: Maybe<Scalars['Int']>;\n  loadId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n  userGroup?: Maybe<Array<SlotUser>>;\n  passengerName?: Maybe<Scalars['String']>;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotUser = {\n  id: Scalars['Int'];\n  exitWeight: Scalars['Float'];\n  rigId?: Maybe<Scalars['Int']>;\n};\n\nexport type TicketType = AnyResource & {\n  __typename?: 'TicketType';\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  altitude?: Maybe<Scalars['Int']>;\n  cost?: Maybe<Scalars['Float']>;\n  createdAt: Scalars['Int'];\n  currency?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  extras: Array<Extra>;\n  id: Scalars['ID'];\n  isTandem?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type TicketTypeInput = {\n  currency?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  name?: Maybe<Scalars['String']>;\n  altitude?: Maybe<Scalars['Int']>;\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  isTandem?: Maybe<Scalars['Boolean']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Transaction = AnyResource & {\n  __typename?: 'Transaction';\n  amount: Scalars['Float'];\n  createdAt: Scalars['Int'];\n  dropzoneUser: DropzoneUser;\n  id: Scalars['ID'];\n  message?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Transaction. */\nexport type TransactionConnection = {\n  __typename?: 'TransactionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type TransactionEdge = {\n  __typename?: 'TransactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transaction>;\n};\n\nexport type TransactionInput = {\n  status?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  dropzoneUserId?: Maybe<Scalars['Int']>;\n  amount?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated input type of UpdateDropzone */\nexport type UpdateDropzoneInput = {\n  id: Scalars['Int'];\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzone */\nexport type UpdateDropzonePayload = {\n  __typename?: 'UpdateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserInput = {\n  attributes: DropzoneUserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserPayload = {\n  __typename?: 'UpdateDropzoneUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateExtra */\nexport type UpdateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateExtra */\nexport type UpdateExtraPayload = {\n  __typename?: 'UpdateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateFormTemplate */\nexport type UpdateFormTemplateInput = {\n  attributes: FormTemplateInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateFormTemplate */\nexport type UpdateFormTemplatePayload = {\n  __typename?: 'UpdateFormTemplatePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  formTemplate?: Maybe<FormTemplate>;\n};\n\n/** Autogenerated input type of UpdateLoad */\nexport type UpdateLoadInput = {\n  id: Scalars['Int'];\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateLoad */\nexport type UpdateLoadPayload = {\n  __typename?: 'UpdateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of UpdateNotification */\nexport type UpdateNotificationInput = {\n  attributes: NotificationInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateNotification */\nexport type UpdateNotificationPayload = {\n  __typename?: 'UpdateNotificationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  notification?: Maybe<Notification>;\n};\n\n/** Autogenerated input type of UpdatePlane */\nexport type UpdatePlaneInput = {\n  id: Scalars['Int'];\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdatePlane */\nexport type UpdatePlanePayload = {\n  __typename?: 'UpdatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of UpdateRig */\nexport type UpdateRigInput = {\n  attributes: RigInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateRigInspection */\nexport type UpdateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRigInspection */\nexport type UpdateRigInspectionPayload = {\n  __typename?: 'UpdateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of UpdateRig */\nexport type UpdateRigPayload = {\n  __typename?: 'UpdateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of UpdateRole */\nexport type UpdateRoleInput = {\n  permission: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRole */\nexport type UpdateRolePayload = {\n  __typename?: 'UpdateRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  role?: Maybe<UserRole>;\n};\n\n/** Autogenerated input type of UpdateSlot */\nexport type UpdateSlotInput = {\n  id: Scalars['Int'];\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateSlot */\nexport type UpdateSlotPayload = {\n  __typename?: 'UpdateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of UpdateTicket */\nexport type UpdateTicketInput = {\n  id: Scalars['Int'];\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateTicket */\nexport type UpdateTicketPayload = {\n  __typename?: 'UpdateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of UpdateUser */\nexport type UpdateUserInput = {\n  attributes: UserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateUser */\nexport type UpdateUserPayload = {\n  __typename?: 'UpdateUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type User = AnyResource & {\n  __typename?: 'User';\n  createdAt: Scalars['Int'];\n  dropzoneUsers?: Maybe<Array<DropzoneUser>>;\n  email?: Maybe<Scalars['String']>;\n  exitWeight?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Scalars['String']>;\n  jumpTypes?: Maybe<Array<JumpType>>;\n  license?: Maybe<License>;\n  name?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  rigs?: Maybe<Array<Rig>>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type UserInput = {\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  licenseId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated return type of UserLogin */\nexport type UserLoginPayload = {\n  __typename?: 'UserLoginPayload';\n  authenticatable: User;\n  credentials: Credential;\n};\n\n/** Autogenerated return type of UserLogout */\nexport type UserLogoutPayload = {\n  __typename?: 'UserLogoutPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserResendConfirmation */\nexport type UserResendConfirmationPayload = {\n  __typename?: 'UserResendConfirmationPayload';\n  message: Scalars['String'];\n};\n\nexport type UserRole = {\n  __typename?: 'UserRole';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  dropzoneId: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  permissions: Array<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** Autogenerated return type of UserSendPasswordReset */\nexport type UserSendPasswordResetPayload = {\n  __typename?: 'UserSendPasswordResetPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSendPasswordResetWithToken */\nexport type UserSendPasswordResetWithTokenPayload = {\n  __typename?: 'UserSendPasswordResetWithTokenPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSignUp */\nexport type UserSignUpPayload = {\n  __typename?: 'UserSignUpPayload';\n  authenticatable?: Maybe<User>;\n  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */\n  credentials?: Maybe<Credential>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated return type of UserUpdatePassword */\nexport type UserUpdatePasswordPayload = {\n  __typename?: 'UserUpdatePasswordPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserUpdatePasswordWithToken */\nexport type UserUpdatePasswordWithTokenPayload = {\n  __typename?: 'UserUpdatePasswordWithTokenPayload';\n  authenticatable: User;\n  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */\n  credentials?: Maybe<Credential>;\n};\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\ninterface INoResults {\n  title: string;\n  subtitle: string;\n  color?: string;\n}\nexport default function NoResults({ title, color, subtitle }: INoResults) {\n  return (\n    <View style={styles.empty}>\n      <Title style={{ color }}>{title}</Title>\n      <Paragraph style={{ color, textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\",\n    backgroundColor: \"transparent\",\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    backgroundColor: \"transparent\",\n    height: \"100%\"\n  }\n});","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      testID=\"snackbar-message\"\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\n\nexport default MyComponent;","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  small?: boolean;\n  backgroundColor?: string;\n  color?: string;\n\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nexport const QUERY_PERMISSION_USER = gql`\n  query QueryGCAUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const { small, color, backgroundColor } = props;\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PERMISSION_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip\n      mode=\"outlined\"\n      icon=\"radio-handheld\"\n      selectedColor={color}\n      style={{ \n        marginHorizontal: 4,\n        backgroundColor,\n        height: small ? 25 : undefined,\n        alignItems: \"center\",\n        borderColor: color ? color : undefined,\n      }}\n      textStyle={{ color, fontSize: small ? 12 : undefined }}\n    >\n      {props.value?.user?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          selectedColor={color}\n          onPress={() => setMenuOpen(true)}\n          style={{ \n            marginHorizontal: 4,\n            backgroundColor,\n            height: small ? 25 : undefined,\n            alignItems: \"center\",\n            borderColor: color ? color : undefined,\n          }}\n          textStyle={{ color, fontSize: small ? 12 : undefined }}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`gca-chip-${edge?.node?.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  small?: boolean;\n  backgroundColor?: string;\n  color?: string;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryPilotUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const { small, color, backgroundColor } = props;\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip\n      mode=\"outlined\"\n      icon=\"radio-handheld\"\n      selectedColor={color}\n      style={{ \n        marginHorizontal: 4,\n        backgroundColor,\n        height: small ? 25 : undefined,\n        alignItems: \"center\",\n        borderColor: color ? color : undefined,\n      }}\n      textStyle={{ color, fontSize: small ? 12 : undefined }}\n    >\n      {props.value?.user?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-airplane\"\n          selectedColor={color}\n          style={{ \n            marginHorizontal: 4,\n            backgroundColor,\n            height: small ? 25 : undefined,\n            alignItems: \"center\",\n            borderColor: color ? color : undefined,\n          }}\n          textStyle={{ color, fontSize: small ? 12 : undefined }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.user?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`pilot-select-${edge!.node!.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Avatar, Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Permission, Query } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPlaneChipSelect {\n  value?: Plane | null;\n  small?: boolean;\n  backgroundColor?: string;\n  color?: string;\n\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryChipPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const { small, color, backgroundColor } = props;\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip\n      mode=\"outlined\"\n      icon=\"airplane-takeoff\"\n      selectedColor={color}\n      style={{\n        marginHorizontal: 4,\n        backgroundColor,\n        height: small ? 25 : undefined,\n        alignItems: \"center\"\n      }}\n      textStyle={{\n        color,\n        fontSize: small ? 12 : undefined\n      }}\n    >\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          selectedColor={color}\n          style={{ \n            marginHorizontal: 4,\n            backgroundColor,\n            height: small ? 25 : undefined,\n            alignItems: \"center\",\n            borderColor: color ? color : undefined,\n            \n          }}\n\n          textStyle={{ color, fontSize: small ? 12 : undefined }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <Menu.Item\n            key={`lm-plane-chip-${plane.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { License, Query } from \"../../../graphql/schema.d\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseChipSelect(props: ILicenseSelect) {\n\n  const { data } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        License\n      </List.Subheader>\n      <ChipSelect<License>\n        autoSelectFirst\n        icon=\"ticket-account\"\n        items={data?.licenses || []}\n        selected={[props.value].filter(Boolean) as License[]}\n        isSelected={(item) => item.id === props.value?.id}\n        renderItemLabel={(license) => license?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport { Slot, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  value?: DropzoneUser | null;\n  small?: boolean;\n  backgroundColor?: string;\n  color?: string;\n\n  slots: Slot[];\n  onSelect(user: DropzoneUser): void;\n}\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const { small, color, backgroundColor } = props;\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip\n      mode=\"outlined\"\n      icon=\"shield-account\"\n      selectedColor={color}\n      style={{ \n        marginHorizontal: 4,\n        backgroundColor,\n        height: small ? 25 : undefined,\n        alignItems: \"center\",\n        borderColor: color ? color : undefined,\n      }}\n      textStyle={{ color, fontSize: small ? 12 : undefined }}\n    >\n      {props.value?.user?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-account\"\n          selectedColor={color}\n          style={{ \n            marginHorizontal: 4,\n            backgroundColor,\n            height: small ? 25 : undefined,\n            alignItems: \"center\",\n            borderColor: color ? color : undefined,\n          }}\n          textStyle={{ color, fontSize: small ? 12 : undefined }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <Menu.Item\n            key={`lm-chip-${slot.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.dropzoneUser);\n            }}\n            title={\n              slot?.dropzoneUser?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import * as React from \"react\";\nimport { Animated, Platform } from \"react-native\";\nimport diff from \"date-fns/differenceInSeconds\";\nimport secondsToMinutes from \"date-fns/secondsToMinutes\";\nimport isAfter from \"date-fns/isAfter\";\n\nconst CountdownCircleTimer = Platform.select({\n  ios: React.lazy(() => import('react-native-countdown-circle-timer').then(({ CountdownCircleTimer }) => ({ default: CountdownCircleTimer }))),\n  android: React.lazy(() => import('react-native-countdown-circle-timer').then(({ CountdownCircleTimer }) => ({ default: CountdownCircleTimer }))),\n  web: React.lazy(() => import('react-countdown-circle-timer').then(({ CountdownCircleTimer }) => ({ default: CountdownCircleTimer }))),\n});\n\ninterface ICountdownProps {\n  end: Date;\n  size?: number;\n}\nexport default function Countdown(props: ICountdownProps) {\n\n  const { end, size } = props;\n  const difference = diff(end, new Date());\n  const fractionFiveMinutes = 5 / difference;\n  const fractionTenMinutes = 10 / difference;\n  const fractionTwentyMinutes = 10 / difference;\n  return (\n    <CountdownCircleTimer\n      isPlaying={isAfter(end, new Date())}\n      duration={\n        difference || 1\n      }\n      colors={[\n        ['#004777', fractionTwentyMinutes],\n        ['#F7B801', fractionTenMinutes],\n        ['#A30000', fractionFiveMinutes],\n      ]}\n      size={size || 50}\n      strokeWidth={2}\n    >\n      {({ remainingTime, animatedColor }) => {\n        const seconds = Math.round(remainingTime % 60);\n        const minutes = secondsToMinutes(remainingTime);\n        const formattedSeconds = seconds < 10\n          ? `0${seconds}`\n          : seconds;\n        const formattedMinutes = minutes < 10\n          ? `0${minutes}`\n          : minutes;\n        return (\n          <Animated.Text style={{ color: animatedColor, fontSize: 16 }}>\n            {formattedMinutes}:{formattedSeconds}\n          </Animated.Text>\n        );\n      }}\n    </CountdownCircleTimer>\n  );\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport ColorPicker from \"../../input/colorpicker\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { PhonePreview, WebPreview } from '../../theme_preview';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\n\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = React.useState(false);\n  const [colorPicker, setColorPicker] = React.useState<\"primary\" | \"secondary\" | null>(null);\n\n  React.useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.forms.dropzone.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.forms.dropzone.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Card style={styles.card}>\n        <Card.Title title=\"Banner\" />\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={styles.card}>\n        <List.Subheader>Name</List.Subheader>\n        <TextInput\n          mode=\"outlined\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n        <FederationSelect\n          value={state.fields.federation.value}\n          onSelect={(value) => dispatch(actions.forms.dropzone.setField([\"federation\", value]))}\n          required\n        />\n        <HelperText type={!!state.fields.federation.error ? \"error\" : \"info\"}>\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n      </Card>\n        \n\n      \n      <Card style={styles.card}>\n        <Card.Title title=\"Branding\" />\n        <Card.Content style={{ flexDirection: \"row\", justifyContent: \"space-evenly\", alignItems: \"flex-end\", width: \"100%\" }}>\n        <PhonePreview\n          primaryColor={state.fields.primaryColor.value}\n          secondaryColor={state.fields.secondaryColor.value}\n        />\n\n        <WebPreview\n          primaryColor={state.fields.primaryColor.value}\n          secondaryColor={state.fields.secondaryColor.value}\n        />\n        </Card.Content>\n      </Card>\n        \n      <ColorPicker\n        title=\"Primary color\"\n        helperText=\"Primary color is used for elements like the title bar and the tab bar\"\n        error={state.fields.primaryColor.error}\n        onChange={(color) => dispatch(actions.forms.dropzone.setField([\"primaryColor\", color]))}\n        value={state.fields.primaryColor.value}\n      />\n\n      <ColorPicker\n        title=\"Accent color\"\n        helperText=\"Accent color is used for highlights, like buttons and loading bars\"\n        error={state.fields.secondaryColor.error}\n        onChange={(color) => dispatch(actions.forms.dropzone.setField([\"secondaryColor\", color]))}\n        value={state.fields.secondaryColor.value}\n      />\n\n      <Card style={styles.card}>\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n      </Card>\n      <Card style={styles.card}>\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Switch } from \"react-native-paper\";\nimport { Mutation, Permission, UserRole } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { actions, useAppDispatch } from \"../../redux\";\n\ninterface IPermissionListItem {\n  title: string;\n  description?: string;\n  role: UserRole;\n  permissionName: string;\n}\n\nconst MUTATION_UPDATE_ROLE = gql`\n  mutation UpdateRole($roleId: Int!, $permissionName: String!, $enabled: Boolean!) {\n    updateRole(input: {\n      id: $roleId,\n      permission: $permissionName,\n      enabled: $enabled\n    }) {\n      role {\n        id\n        name\n        permissions\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function PermissionListItem(props: IPermissionListItem) {\n  const { title, description, role, permissionName } = props;\n  const canChangePermissions = useRestriction(Permission.GrantPermission);\n  const [mutationUpdatePermission, mutation] = useMutation<Mutation>(MUTATION_UPDATE_ROLE);\n  const dispatch = useAppDispatch();\n\n  return (\n    <List.Item\n      disabled={!canChangePermissions}\n      style={{ width: \"100%\" }}\n      right={() =>\n        <Switch\n          value={role.permissions.includes(permissionName)}\n          onValueChange={async () => {\n            const result = await mutationUpdatePermission({\n              variables: {\n                roleId: Number(role.id),\n                permissionName,\n                enabled: !role.permissions.includes(permissionName)\n              },\n              optimisticResponse: {\n                updateRole: {\n                  role: {\n                    ...role,\n                    permissions: !role.permissions.includes(permissionName)\n                      ? role.permissions.filter((name) => name !== permissionName)\n                      : [...role.permissions, permissionName]\n                  }\n                }\n              }\n            });\n\n            if (result?.data?.updateRole?.errors?.length) {\n              result?.data?.updateRole?.errors?.map((message) =>\n                dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n              );\n              return;\n            }\n          }}\n        />\n      }\n      {...{ title, description }}\n    />\n  );\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Permission } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\nexport const QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: Permission): boolean {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId)\n    }\n  });\n\n  const permissions = data?.dropzone?.currentUser?.permissions || [];\n  return permissions?.includes(permission as any) || false;\n}","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport * as React from 'react';\nimport Constants from \"expo-constants\";\nimport { actions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = React.useMemo(() =>\n    onError(({ graphQLErrors, networkError, operation, response }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `Session expired`, variant: \"error\" })\n        )\n        dispatch(\n          actions.global.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors && process.env.EXPO_ENV !== 'production') {\n        graphQLErrors.map((err) => {\n          const { message, locations, path, stack, source, name, nodes } = err;\n          dispatch(\n            actions.notifications.showSnackbar({ message: `[GraphQL error]: ${message}, ${JSON.stringify(locations)}, ${path}`, variant: \"error\" })\n          )\n          console.error(\n            `[GraphQL error]: ${message}, ${JSON.stringify(locations)}, ${path}, ${name}, ${nodes}`\n          );\n          console.error(JSON.stringify(err));\n          console.error(operation);\n        });\n      }\n      if (networkError) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = React.useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = React.useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [\n    Linking.makeUrl('/'),\n    \"https://openmanifest.org\",\n    \"openmanifest://\",\n    \"http://localhost:19006\"\n  ],\n  config: {\n    screens: {\n      confirm: {\n        path: \"/confirm\",\n        params: {\n          account_confirmation_success: undefined,\n        }\n      },\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          \n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as React from \"react\";\nimport { Text } from \"react-native\";\nimport { Avatar, Badge, Card, Chip } from \"react-native-paper\";\nimport { Slot } from \"../../../graphql/schema\";\n\ninterface ISlotCardProps {\n  slot: Slot;\n  onPress?(slot: Slot): void;\n  onDelete?(slot: Slot): void;\n}\n\nexport default function SlotCard(props: ISlotCardProps) {\n  const { slot, onPress, onDelete } = props;\n\n  return (\n    <Card onPress={() => onPress(slot)} elevation={3} style={{ marginVertical: 4 }}>\n      <Card.Title\n        title={slot?.dropzoneUser?.user.name}\n        left={() =>\n          slot?.dropzoneUser?.user?.image\n          ? <Avatar.Image source={{ uri: slot?.dropzoneUser?.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n        right={() =>\n          !onDelete ? null :\n          <Badge style={{ position: \"absolute\", marginTop: -45, marginRight: -45 }} onPress={(e) => { e.preventDefault(); onDelete?.(slot); }}>\n            -\n          </Badge>\n        }\n      />\n      <Card.Content style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\n        <Chip style={{ margin: 2, height: 25, padding: 0, alignItems: \"center\" }} textStyle={{ fontSize: 12 }} icon=\"lock\" mode=\"outlined\" disabled>\n          {slot?.dropzoneUser?.role?.name}\n        </Chip>\n        <Chip style={{ margin: 2, height: 25, padding: 0, alignItems: \"center\" }} textStyle={{ fontSize: 12 }} icon=\"ticket-account\" mode=\"outlined\" disabled>\n          {slot?.dropzoneUser?.user?.license?.name}\n        </Chip>\n        <Chip style={{ margin: 2, height: 25, padding: 0, alignItems: \"center\" }} textStyle={{ fontSize: 12 }} icon=\"human-handsup\" mode=\"outlined\" disabled>\n          {slot?.jumpType?.name}\n        </Chip>\n        <Chip style={{ margin: 2, height: 25, padding: 0, alignItems: \"center\" }} textStyle={{ fontSize: 12 }} icon=\"arrow-up-bold\" mode=\"outlined\" disabled>\n          {slot?.ticketType?.name}\n        </Chip>\n        {\n          !slot.wingLoading\n            ? null\n            : <Chip\n                style={{ margin: 2, height: 25, padding: 0, alignItems: \"center\" }}\n                textStyle={{ fontSize: 12 }}\n                icon=\"escalator-down\"\n                mode=\"outlined\"\n                disabled\n              >\n                {slot.wingLoading.toFixed(2)}\n              </Chip>\n                \n          }\n      </Card.Content>\n    </Card>\n  );\n}","import { gql, useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { FAB, Portal } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nimport { Load, Mutation, Permission, LoadState } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\n\ninterface ILoadActionButtonProps {\n  load: Load;\n}\n\n\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      state,\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        \n        dropzoneUser {\n          id\n          user {\n            id\n            name\n            exitWeight\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n    $state: LoadState\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n        state: $state\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        state\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_SLOT = gql`\nmutation DeleteSlot($id: Int!) {\n  deleteSlot(input: { id: $id }) {\n    slot {\n      id\n      load {\n        id\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }  \n      }\n    }\n  }\n}\n`;\n\n\nexport default function ActionButton(props: ILoadActionButtonProps) {\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n\n  const { load } = props;\n  \n  const currentDropzone = useCurrentDropzone();\n  const { currentUser } = currentDropzone;\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null,\n          state: dispatchTime ? \"boarding_call\" : \"open\"\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const cancelLoad = React.useCallback(async () => {\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          state: \"canceled\",\n          dispatchAt: null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n          state: \"landed\"\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onManifest = React.useCallback((load: Load) => {\n    \n    if (!currentUser.hasLicense) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You need to select a license on your user profile\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasMembership) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your membership is out of date\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasRigInspection) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs to be inspected before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasReserveInDate) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs a reserve repack\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasExitWeight) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Update your exit weight on your profile before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasCredits) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You have no credits on your account\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    dispatch(actions.forms.manifest.setOpen(true));\n    dispatch(\n      actions.forms.manifest.setField([\"dropzoneUser\", currentUser])\n    );\n    dispatch(\n      actions.forms.manifest.setField([\"load\", load])\n    );\n  }, [JSON.stringify(currentUser)]);\n\n  \n  const canUpdateLoad = useRestriction(Permission.UpdateLoad);\n  \n  const canManifestSelf = useRestriction(Permission.CreateSlot);\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  const isOpen = [LoadState.Open, LoadState.BoardingCall].includes(load.state);\n  const isFull = (load?.slots?.length || 0) >= (load?.maxSlots || load?.plane?.maxSlots || 0);\n  const showManifestButton = isOpen && !isFull && canManifestSelf && !load?.slots?.some((slot) => slot.dropzoneUser?.id === currentUser?.id);\n\n  const showGroupIcon = (canManifestGroup || canManifestGroupWithSelfOnly) && load?.state !== LoadState.Landed && (!load?.dispatchAt || load.dispatchAt > (new Date().getTime() / 1000));\n\n  const createCallAction = React.useCallback((minutes: number) =>\n    () => {\n      setExpanded(false);\n      updateCall(minutes);\n    }\n  , [updateCall]);\n\n  const callActions = [\n    { label: '20 minute call', onPress: createCallAction(20), icon: \"airplane-takeoff\" },\n    { label: '15 minute call', onPress: createCallAction(15), icon: \"airplane-takeoff\" },\n    { label: '10 minute call', onPress: createCallAction(10), icon: \"airplane-takeoff\" },\n  ];\n\n  const manifestActions = [\n    !showManifestButton ? null : {\n      label: 'Manifest me',\n      icon: \"account\",\n      onPress: () => onManifest(load),\n    },\n    !showGroupIcon ? null : {\n      label: 'Manifest group',\n      icon: \"account-group\",\n      onPress: () => {\n        dispatch(actions.forms.manifestGroup.reset());\n        dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n\n        if (canManifestGroupWithSelfOnly && !canManifestGroup) {\n          // Automatically add current user to selection\n          dispatch(actions.screens.manifest.setSelected([currentUser]));\n          dispatch(actions.forms.manifestGroup.setDropzoneUsers([currentUser]));\n        }\n\n        dispatch(actions.forms.manifestGroup.setOpen(true));\n        dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n      },\n    },\n  ].filter(Boolean);\n  \n  \n  const workflowActions = [\n    ![\n      LoadState.BoardingCall,\n    ].includes(load.state) ? null :{ label: \"Cancel boarding call\", icon: \"airplane-off\", onPress: createCallAction(null) },\n    ![\n      LoadState.Open\n    ].includes(load.state) ? null :{ label: \"Cancel load\", icon: \"delete-sweep\", onPress: () => cancelLoad() },\n    ![\n      LoadState.BoardingCall,\n      LoadState.InFlight,\n    ].includes(load.state) ? null : { label: \"Mark as Landed\", icon: \"airplane-landing\", onPress: () => onLanded() },\n  ].filter(Boolean);\n\n  return (\n    <Portal>\n      <FAB.Group\n        visible\n        open={isExpanded}\n        icon={isExpanded ? 'close' : 'plus'}\n        fabStyle={{\n          marginLeft: 16,\n          marginBottom: 32,\n        }}\n        actions={[\n          ...isOpen ? manifestActions : [],\n          ...[\n            LoadState.Open,\n          ].includes(load?.state) ? callActions : [],\n          ...workflowActions,\n        ]}\n        onStateChange={({ open }) => setExpanded(open)}\n      />\n    </Portal>\n  );\n}\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, IconButton, Paragraph, Title } from 'react-native-paper';\n\nimport { useAppSelector } from '../../../redux';\nimport { Load } from '../../../graphql/schema';\nimport { isAfter } from 'date-fns/esm';\nimport Countdown from '../manifest/Countdown';\n\n\ninterface ILoadHeader {\n  load?: Load;\n  canEdit?: boolean;\n  children?: React.ReactNode;\n  onEdit?(): void;\n}\nexport default function UserHeader(props: ILoadHeader) {\n  const { load, onEdit, canEdit, children } = props;\n  const { theme } = useAppSelector(state => state.global);\n  return (\n      <View style={[styles.container, { backgroundColor: theme.colors.primary }]}>\n        <View style={styles.actions}>\n        {\n          !canEdit ? null : (\n            <IconButton\n              icon=\"pencil\"\n              size={20}\n              color={theme.colors.surface}\n              onPress={() => onEdit ? onEdit() : null}\n            />\n          )}\n        </View>\n        <View style={styles.avatarContainer}>\n          <View style={{ flex: 1/3 }}>\n            {\n              load.dispatchAt && isAfter(load.dispatchAt * 1000, new Date())\n                ? <Countdown end={new Date(load.dispatchAt * 1000)} size={80} />\n                : <Avatar.Icon\n                    size={80}\n                    icon=\"shield-airplane\"\n                    color={theme.colors.primary}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n              }\n          </View>\n          <View style={styles.titleContainer}>\n            <Title style={styles.title}>Load #{load?.loadNumber}</Title>\n            <Paragraph style={styles.paragraph}>{load?.name}</Paragraph>\n          </View>\n        </View>\n\n        {children}\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    paddingTop: 16\n  },\n  actions: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\"\n  },\n  avatarContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  titleContainer: {\n    paddingLeft: 48,\n    flex: 2/3,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  title: {\n    color: \"white\"\n  },\n  paragraph: {\n    color: \"white\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Divider, List } from 'react-native-paper';\n\ninterface IInfoGrid {\n  items: Array<{ title: string, value: string, onPress?(): void; bold?: boolean }>;\n}\nexport default function InfoGrid(props: IInfoGrid) {\n  const { items } = props;\n  const flex = 1 / items.length;\n\n  return (\n    <>\n      <Divider style={styles.divider} />\n      <View style={styles.container}>\n        {\n          items.map((item, i) =>\n          <>\n            <View style={{ flex }} key={`info-grid-${i}`}>\n              <List.Item\n                titleStyle={[styles.title, {\n                  fontWeight: item.bold !== false ? \"bold\" : undefined\n                }]}\n                title={item.value}\n                descriptionStyle={styles.description}\n                description={item.title}\n                onPress={item.onPress}\n              />\n            </View>\n            {i === items.length - 1 ? null : <Divider key={`info-grid-divider-${i}`} style={styles.verticalDivider} />}\n          </>\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n container: { width: \"100%\", flexDirection: \"row\" },\n  divider: {\n    height: StyleSheet.hairlineWidth,\n    width: '100%',\n    backgroundColor: \"white\",\n  },\n  verticalDivider: {\n    width: StyleSheet.hairlineWidth,\n    height: '100%',\n    backgroundColor: \"white\",\n  },\n  title: {\n    textAlign: \"center\",\n    color: \"white\",\n  },\n  description: {\n    textAlign: \"center\",\n    color: \"white\",\n  }\n});\n","import { gql, useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { Dimensions, RefreshControl, StyleSheet } from 'react-native';\nimport { FlatList, ScrollView } from 'react-native-gesture-handler';\nimport { Button, Card, DataTable, IconButton, Menu, Paragraph, ProgressBar, Text } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport GCAChip from '../../../components/chips/GcaChip';\nimport LoadMasterChip from '../../../components/chips/LoadMasterChip';\nimport PilotChip from '../../../components/chips/PilotChip';\nimport PlaneChip from '../../../components/chips/PlaneChip';\n\nimport { View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Permission, Plane, Slot, DropzoneUser, LoadState } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport SlotCard from \"./SlotCard\";\nimport ActionButton from './ActionButton';\nimport Header from './Header';\nimport InfoGrid from './InfoGrid';\nimport { useNavigation, useRoute } from '@react-navigation/core';\n\ninterface ILoadScreenProps {\n  load: Load;\n  onManifestGroup(): void;\n  onSlotGroupPress(slots: Slot[]): void;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\nfunction AvailableSlotCard() {\n\n  return (\n    <Card\n      style={{\n        maxHeight: 150,\n        flexGrow:1,\n        borderWidth: 1,\n        borderStyle: \"dashed\",\n        opacity: 0.5,\n        margin: 4,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    }}>\n      <Card.Title title=\"Available\" style={{ alignSelf: \"center\", justifyContent: \"center\" }} titleStyle={{ textAlign: \"center\" }} />\n    </Card>\n  )\n}\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      state\n      weight\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        wingLoading\n        groupNumber\n        \n        dropzoneUser {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n            exitWeight\n            license {\n              id\n              name\n            }\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_SLOT = gql`\nmutation DeleteSlot($id: Int!) {\n  deleteSlot(input: { id: $id }) {\n    slot {\n      id\n      load {\n        id\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }  \n      }\n    }\n  }\n}\n`;\n\n\nexport default function LoadScreen(props: ILoadScreenProps) {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n  const route = useRoute<{ key: string, name: string, params: { load: Load }}>();\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(route.params.load.id),\n    },\n    // pollInterval: 30000,\n  });\n\n  const load = data?.load || route.params.load;\n  const currentDropzone = useCurrentDropzone();\n  const { currentUser } = currentDropzone;\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const [mutationDeleteSlot, mutationDelete] = useMutation<Mutation>(MUTATION_DELETE_SLOT);\n\n  const onDeleteSlot = React.useCallback(async (slot: Slot) => {\n    try {\n      const result = await mutationDeleteSlot({\n        variables: {\n          id: Number(slot.id)\n        }\n      });\n\n      if (result?.data?.deleteSlot?.errors) {\n        dispatch(\n          actions.notifications.showSnackbar({\n            message: result.data.deleteSlot.errors[0],\n            variant: \"error\"\n          })\n        );\n      }\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePilot = React.useCallback(async (pilot: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  \n  const canUpdateLoad = useRestriction(Permission.UpdateLoad);\n  \n  const canEditSelf = useRestriction(Permission.UpdateSlot);\n  const canEditOthers = useRestriction(Permission.UpdateUserSlot);\n  \n  const canRemoveSelf = useRestriction(Permission.DeleteSlot);\n  const canRemoveOthers = useRestriction(Permission.DeleteUserSlot);\n  \n  const canManifestSelf = useRestriction(Permission.CreateSlot);\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  const showManifestButton = canManifestSelf && data?.load?.isOpen && !data?.load?.isFull;\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  const navigation = useNavigation();\n\n  const slots: Array<Slot | null> = Array.from({ length: (load?.maxSlots || 0) }).map((_, index) => (load?.slots?.length || 0) > index ? load.slots[index] : null);\n\n  const maxSlots = (load?.maxSlots || load?.plane?.maxSlots || 0);\n  const occupiedSlots = (load?.slots?.length || 0);\n  const availableSlots = maxSlots - occupiedSlots;\n\n  return (\n    <View style={{ flexGrow: 1 }}>\n      <Header load={load}>\n      <ScrollView horizontal showsHorizontalScrollIndicator={false} style={{ marginVertical: 8 }}>\n          <PlaneChip\n            value={data?.load?.plane}\n            onSelect={async (plane) => {\n              if ((data?.load?.slots?.length || 0) > (plane.maxSlots || 0)) {\n                const diff = (data?.load?.slots?.length || 0) - (plane.maxSlots || 0);\n\n                dispatch(\n                  actions.notifications.showSnackbar({\n                    message: `You need to take ${diff} people off the load to fit on this plane`,\n                    variant: \"warning\",\n                  })\n                );\n              } else {\n                await updatePlane(plane);\n                refetch();\n              }\n            }}\n            small\n            backgroundColor=\"transparent\"\n            color=\"white\"\n          />\n          <GCAChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.gca}\n            onSelect={updateGCA}\n            small\n            backgroundColor=\"transparent\"\n            color=\"white\"\n          />\n          <PilotChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.pilot}\n            onSelect={updatePilot}\n            small\n            backgroundColor=\"transparent\"\n            color=\"white\"\n          />\n          <LoadMasterChip\n            value={data?.load?.loadMaster}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n            small\n            backgroundColor=\"transparent\"\n            color=\"white\"\n          />\n        </ScrollView>\n        <InfoGrid\n          items={[\n            {\n              title: \"Status\",\n              value: {\n                [LoadState.Open]: \"Open\",\n                [LoadState.BoardingCall]: \"On call\",\n                [LoadState.Cancelled]: \"Cancelled\",\n                [LoadState.InFlight]: \"In air\",\n                [LoadState.Landed]: \"Landed\"\n              }[load?.state]\n            },\n            { title: \"Slots\", value: `${occupiedSlots}/${maxSlots}` },\n            {\n              title: \"Weight\",\n              value: `${load?.weight || 0}kg`\n            },\n          ]}\n        />\n\n      </Header>\n      <FlatList\n        testID=\"slots\"\n        keyExtractor={(item, idx) => `slot-${item?.id || idx}`}\n        style={{ flex: 1, height: Dimensions.get('window').height }}\n        contentContainerStyle={{ flexGrow: 1, paddingBottom: 100, margin: 8 }}\n        numColumns={1}\n        horizontal={false}\n        data={slots}\n        refreshing={loading}\n        onRefresh={refetch}\n        refreshControl={\n          <RefreshControl refreshing={loading} onRefresh={() => refetch()} />\n        }\n        renderItem={({ item: node, index }) =>\n          node === null\n            ? <AvailableSlotCard key={`empty-slot-${index}`} />\n            : (\n                <SlotCard\n                  key={`slot-${node.id}`}\n                  slot={node}\n                  onDelete={\n                    (currentUser.id === node.dropzoneUser.id && canRemoveSelf) ||\n                    canRemoveOthers ? onDeleteSlot : undefined\n                  }\n                  onPress={(slot) => {\n                    const slotGroup = load?.slots?.filter(({ groupNumber }) => groupNumber && groupNumber === slot.groupNumber);\n                    const onSlotGroupPress = () => {\n                      dispatch(actions.forms.manifestGroup.reset());\n                      dispatch(actions.forms.manifestGroup.setFromSlots(slotGroup));\n                      dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n                      navigation.navigate(\"ManifestGroupScreen\");\n                    };\n                    const onSlotPress = () => {\n                      dispatch(actions.forms.manifest.setOpen(slot));\n                      dispatch(\n                        actions.forms.manifest.setField([\"load\", load])\n                      );\n                    };\n\n                    if (slot.user?.id === currentUser?.id) {\n                      if (canEditSelf) {\n                        if (slotGroup?.length) {\n                          onSlotGroupPress()\n                        } else {\n                          onSlotPress();\n                        }\n                      }\n                    } else if (canEditOthers) {\n                      if (slotGroup?.length) {\n                        onSlotGroupPress()\n                      } else {\n                        onSlotPress();\n                      }\n                    }\n                    \n                  }}\n                />\n        )}\n    />\n    <ActionButton load={load} />\n  </View>                    \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  slotText: {\n    fontSize: 12\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from \"react\";\nimport { Paragraph, Button} from \"react-native-paper\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\n\n\ninterface ISetupWarning {\n  credits: number;\n  loading: boolean;\n  isRigSetUp: boolean;\n  isRigInspectionComplete: boolean;\n  isCreditSystemEnabled: boolean;\n  isExitWeightDefined: boolean;\n  isReserveInDate: boolean;\n  isMembershipInDate: boolean;\n  onSetupWizard?(): void;\n}\n\nfunction Warning(props: { title: string, action?: () => void }) {\n  const { action, title } = props;\n  return (\n    <View style={styles.warning}>\n      <Paragraph style={{ color: \"white\",  }}>\n        {title}\n      </Paragraph>\n      {!action ? null : (\n        <Button onPress={action}>\n          Fix\n        </Button>\n      )}\n    </View>\n  );\n}\n\nexport default function SetupWarning(props: ISetupWarning) {\n  const { credits, loading, isCreditSystemEnabled, isRigSetUp, isExitWeightDefined, isMembershipInDate, isReserveInDate, isRigInspectionComplete, onSetupWizard } = props;\n\n  if (props.loading) {\n    return null;\n  }\n  \n  const navigation = useNavigation();\n  \n\n  if (!isExitWeightDefined || !isRigSetUp) {\n    const missing = [\n      !isExitWeightDefined ? \"exit weight\" : null,\n      !isRigSetUp ? \"equipment\" : null,\n    ].filter(Boolean);\n\n    return (\n      <Warning\n        title={`You need to define ${missing.join(\"and\")} in your profile`}\n        action={() => onSetupWizard()}\n      />\n    );\n  } else if (!isMembershipInDate) {\n    return (\n      <Warning\n        title=\"Your membership seems to be out of date\"\n      />\n    )\n  } else if (!isRigInspectionComplete) {\n    return (\n      <Warning\n        title={`Your rig must be inspected before you can manifest at this dropzone`}\n      />\n    );\n  } else if (!isReserveInDate) {\n    return (\n      <Warning\n        title={`Your reserve repack is due. You cannot manifest if your repack is out of date.`}\n      />\n    );\n  } else if (isCreditSystemEnabled && !credits && !loading) {\n    return (\n      <Warning\n        title=\"You'll need to top up on credits before you can manifest\"\n      />\n    );\n  }\n\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"black\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n","import * as React from \"react\";\nimport { Appbar, Menu, IconButton, Divider, Chip } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { StyleSheet } from \"react-native\";\nimport SetupWarning from \"./SetupWarning\";\n\nconst QUERY_CURRENT_USER = gql`\n  query QueryDropzone($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      isCreditSystemEnabled\n\n      currentUser {\n        id\n        credits\n        expiresAt\n        \n        rigInspections {\n          id\n          rig {\n            id\n            repackExpiresAt\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface IAppBarProps extends StackHeaderProps {\n  hideWarnings?: boolean;\n}\n\n\nfunction AppBar(props: IAppBarProps) {\n  const { navigation, previous, scene, hideWarnings } = props;\n  const [contextMenuOpen, setContextMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [loadData, { data, loading }] = useLazyQuery<Query>(QUERY_CURRENT_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId)\n    }\n  });\n\n  React.useEffect(() => {\n    if (currentDropzoneId) {\n      loadData();\n    }\n  }, [loadData, currentDropzoneId])\n  \n  const showCredits = !!data?.dropzone?.isCreditSystemEnabled;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} titleStyle={{ fontWeight: \"bold\" }} />\n\n      { scene.descriptor.options.headerRight\n        ? scene.descriptor.options.headerRight({ tintColor: \"white\" })\n        : (\n          <Chip mode=\"outlined\">\n            {`$${data?.dropzone?.currentUser?.credits || 0}`}\n          </Chip>\n        )}\n      <Menu\n        onDismiss={() => setContextMenuOpen(false)}\n        visible={contextMenuOpen}\n        anchor={\n          <IconButton\n            icon=\"dots-vertical\"\n            color=\"#FFFFFF\"\n            onPress={() => setContextMenuOpen(true)}\n          />\n      }>\n        <Menu.Item\n          title=\"Change dropzone\"\n          icon=\"radar\"\n          onPress={() => {\n            navigation.replace(\"DropzonesScreen\");\n            setContextMenuOpen(false);\n          }}\n        />\n        <Divider />\n        <Menu.Item\n          title=\"Log out\"\n          icon=\"logout\"\n          onPress={() => {\n            dispatch(actions.global.logout());\n            setContextMenuOpen(false);\n          }}\n        />\n      </Menu>\n    </Appbar.Header>\n    { hideWarnings ? null : (\n      <SetupWarning\n        credits={data?.dropzone?.currentUser?.credits || 0}\n        loading={loading}\n        isCreditSystemEnabled={!!data?.dropzone?.isCreditSystemEnabled}\n        isExitWeightDefined={!!data?.dropzone?.currentUser?.user?.exitWeight}\n        isMembershipInDate={!!data?.dropzone?.currentUser?.expiresAt && data?.dropzone?.currentUser?.expiresAt > (new Date().getTime() / 1000)}\n        isReserveInDate={\n          !!data?.dropzone?.currentUser?.user?.rigs?.some((rig) => {\n            const isRigInspected = data.dropzone?.currentUser?.rigInspections?.map((inspection) => inspection?.rig?.id === rig.id);\n            const isRepackInDate = (rig.repackExpiresAt || 0) > (new Date().getTime() / 1000);\n            return isRigInspected && isRepackInDate;\n          })\n        }\n        isRigInspectionComplete={!!data?.dropzone?.currentUser?.rigInspections?.length}\n        isRigSetUp={!!data?.dropzone?.currentUser?.user?.rigs?.length}\n        onSetupWizard={() => {\n          const currentUser = data?.dropzone?.currentUser;\n\n          if (currentUser) {\n            dispatch(actions.forms.user.setOpen(currentUser.user));\n            if (currentUser?.user?.rigs?.length) {\n              dispatch(actions.forms.rig.setOpen(currentUser.user.rigs[0]));\n            }\n  \n            dispatch(actions.forms.userWizard.setOpen(currentUser.user));\n          }\n        }}\n      />\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { DropzoneUser, Slot } from '../../graphql/schema';\nimport { useAppSelector } from '../../redux';\nimport LoadScreen from \"../../screens/authenticated/load/LoadScreen\";\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nconst ManifestGroupScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupScreen'));\nconst ManifestGroupUserSelectScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupUserSelectScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  CreateLoadScreen: undefined;\n  LoadScreen: undefined;\n  ManifestGroupUserSelectScreen: undefined;\n  ManifestGroupScreen: {\n    users?: DropzoneUser[];\n    slots?: Slot[]\n    loadId?: number\n  };\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n      <Manifest.Screen name=\"LoadScreen\" component={LoadScreen} options={{ title: \"Load\" }}/>\n      <Manifest.Screen name=\"ManifestGroupScreen\" component={ManifestGroupScreen} options={{ title: \"Manifest group\" }}/>\n      <Manifest.Screen name=\"ManifestGroupUserSelectScreen\" component={ManifestGroupUserSelectScreen} options={{ title: \"Select users\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\n\nconst NotificationsScreen = React.lazy(() => import('../../screens/authenticated/notifications/NotificationsScreen'));\n\nexport type IProfileTabParams = {\n  NotificationsScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function Notifications() {\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"NotificationsScreen\"\n        component={NotificationsScreen}\n        options={{ title: \"Notifications\" }}\n      />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nconst UpdateUserScreen = React.lazy(() => import('../../screens/authenticated/profile/UpdateUserScreen'));\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentUser } = useCurrentDropzone();\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst SettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/SettingsScreen'));\nconst TicketTypeSettingsScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/TicketTypesScreen'));\nconst CreatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/CreatePlaneScreen'));\nconst UpdatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/UpdatePlaneScreen'));\nconst UpdateDropzoneScreen = React.lazy(() => import('../../screens/authenticated/dropzones/UpdateDropzoneScreen'));\nconst PlanesScreen = React.lazy(() => import('../../screens/authenticated/planes/PlanesScreen'));\nconst RigInspectionTemplateScreen = React.lazy(() => import('../../screens/authenticated/settings/RigInspectionTemplateScreen'));\nconst DropzoneRigsScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneRigsScreen'));\nconst DropzonePermissionScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzonePermissionScreen'));\nconst DropzoneMasterLogScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneMasterLogScreen'));\n\n\nconst CreateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/CreateExtraScreen'));\nconst UpdateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/UpdateExtraScreen'));\nconst ExtrasScreen = React.lazy(() => import('../../screens/authenticated/extras/ExtrasScreen'));\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n  RigInspectionTemplateScreen: undefined;\n  DropzoneRigsScreen: undefined;\n  DropzonePermissionScreen: undefined;\n  DropzoneMasterLogScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} options={{ title: \"Basic settings\" }} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n      <Settings.Screen name=\"RigInspectionTemplateScreen\" component={RigInspectionTemplateScreen} options={{ title: \"Rig Inspection Form\" }} />\n      <Settings.Screen name=\"DropzoneRigsScreen\" component={DropzoneRigsScreen} options={{ title: \"Dropzone rigs\" }} />\n      <Settings.Screen name=\"DropzonePermissionScreen\" component={DropzonePermissionScreen} options={{ title: \"Permissions\" }} />\n      <Settings.Screen\n        name=\"DropzoneMasterLogScreen\"\n        component={DropzoneMasterLogScreen}\n        options={{ title: \"Master log\"}}\n        />\n    </Settings.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst UsersScreen = React.lazy(() => import('../../screens/authenticated/users/UsersScreen'));\nconst SearchableAppBar = React.lazy(() => import('../../screens/authenticated/users/AppBar'));\nconst RigInspectionScreen = React.lazy(() => import('../../screens/authenticated/rig/RigInspectionScreen'));\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nimport { actions, useAppDispatch, useAppSelector } from '../../redux';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: {\n    select?: boolean;\n    loadId: number;\n    onSelect?(): void;\n  };\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.screens.users);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(actions.screens.users.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(actions.screens.users.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport NotificationTab from \"./tabs/notifications\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useRestriction from '../hooks/useRestriction';\nimport { Permission } from '../graphql/schema.d';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Notifications: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(Permission.ReadUser);\n\n  const canUpdateDropzone = useRestriction(Permission.UpdateDropzone);\n  const canUpdatePlane = useRestriction(Permission.UpdatePlane);\n  const canUpdateTicketTypes = useRestriction(Permission.UpdateTicketType);\n  const canUpdateExtras = useRestriction(Permission.UpdateExtra);\n  const canUpdatePermissions = useRestriction(Permission.GrantPermission);\n  const canUpdateDzRigs = useRestriction(Permission.UpdateDropzoneRig);\n  const canUpdateRigInspectionTemplate = useRestriction(Permission.UpdateFormTemplate);\n\n  const shouldShowSettings = canUpdateDropzone\n  || canUpdatePlane\n  || canUpdateTicketTypes\n  || canUpdateExtras\n  || canUpdatePermissions\n  || canUpdateDzRigs\n  || canUpdateRigInspectionTemplate;\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n        style: {\n          backgroundColor: theme.colors.primary,\n        }\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Notifications\"\n        component={NotificationTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"bell\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n\n     \n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { shouldShowSettings && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions, View } from 'react-native';\nimport { Card, Title, FAB, Avatar } from 'react-native-paper';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema.d\";\n\nimport { useNavigation } from '@react-navigation/core';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport NoResults from '../../../components/NoResults';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          primaryColor,\n          secondaryColor,\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const dropzoneWizard = useAppSelector(state => state.forms.dropzoneWizard);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n  React.useEffect(() => {\n    \n    if (dropzoneWizard.complete && !dropzoneWizard.open && globalState.currentDropzoneId) {\n      \n      // @ts-ignore\n      navigation.replace(\"Authenticated\", { screen: \"HomeScreen\"});\n\n      // Reset complete flag to prevent navigating again\n      dispatch(actions.forms.dropzoneWizard.complete(false));\n    }\n  }, [dropzoneWizard.open, dropzoneWizard.complete]);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1, width: \"100%\" }}\n        contentContainerStyle={{ flexGrow: 1, width: \"100%\", paddingBottom: 100 }}\n        ListEmptyComponent={() =>\n          <NoResults\n            title=\"No dropzones?\"\n            subtitle=\"You can set one up!\"\n            color=\"#FFFFFF\"\n          />\n        }\n        renderItem={({ item }) => {\n          return (\n            <Card\n              style={{\n                width: (Dimensions.get(\"window\").width / 2) - 32,\n                margin: 8\n              }}\n              onPress={async ()=> {\n                if (item?.node) {\n                  const shouldPushRoute = !!globalState.currentDropzoneId; \n                  dispatch(\n                    actions.global.setDropzone(item.node)\n                  );\n\n                  if (shouldPushRoute) {\n                    // @ts-ignore\n                    navigation.replace(\"Authenticated\", { screen: \"HomeScreen\"});\n                  }\n                }\n              }}\n            >\n              {\n                item?.node?.banner\n                  ? <Card.Cover source={{ uri: item?.node?.banner as string }} />\n                  : <View style={[styles.dzIcon, { backgroundColor: item.node.primaryColor }]}>\n                      <Avatar.Icon style={{ backgroundColor: item.node.secondaryColor }} icon=\"airplane-takeoff\" />\n                    </View>\n              }\n\n              <Card.Content>\n                <Title>{item?.node?.name}</Title>\n              </Card.Content>\n            </Card>\n          )\n        }}\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => {\n          dispatch(actions.forms.plane.reset());\n          dispatch(actions.forms.ticketType.reset());\n          dispatch(actions.forms.dropzone.reset());\n          dispatch(actions.forms.dropzoneWizard.setOpen(true));\n        }}\n        label=\"Create dropzone\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\",\n    flexGrow: 1,\n    backgroundColor: \"#FF1414\",\n  },\n  dzIcon: {\n    height: 150,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  fab: {\n    position: 'absolute',\n    margin: 32,\n    right: 16,\n    bottom: 0,\n    backgroundColor: \"#FFFFFF\"\n  },\n  empty: {\n    flex: 1,\n    backgroundColor: \"#FF1414\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String,\n  $federationId: Int!\n  $primaryColor: String\n  $secondaryColor: String\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId, primaryColor: $primaryColor, secondaryColor: $secondaryColor }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner?: string,\n  federationId: number,\n  primaryColor: string,\n  secondaryColor: string,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\n\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\n\nexport default function CreateDropzoneScreen() {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(actions.notifications.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(actions.global.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { Image, KeyboardAvoidingView, StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { View } from '../../../components/Themed';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Mutation } from '../../../graphql/schema';\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\n\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.screens.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = React.useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              actions.global.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              actions.global.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(actions.notifications.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Image source={logo} style={{ height: 300, width: \"100%\" }} resizeMode=\"contain\" />\n      <KeyboardAvoidingView style={styles.fields} behavior=\"padding\">\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" labelStyle={styles.buttonLabel} style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button labelStyle={styles.textButtonLabel} style={styles.textButton} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: primaryColor,\n    paddingTop: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  \n  fields: {\n    marginBottom: 10,\n    marginTop: -50,\n    maxWidth: 400,\n    width: \"100%\",\n    paddingHorizontal: 56,\n    backgroundColor: \"transparent\"\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  textButton: {\n    marginTop: 10,\n    backgroundColor: \"transparent\",\n    color: \"white\",\n    width: \"100%\"\n  },\n  textButtonLabel: {\n    color: \"#FFFFFF\",\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $pushToken: String\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      pushToken: $pushToken,\n      licenseId: $licenseId,\n      confirmSuccessUrl: \"https://openmanifest.org/confirm/\"\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { Image, KeyboardAvoidingView, StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\nimport { useNavigation } from '@react-navigation/core';\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.screens.signup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      // Reset the form and redirect to login screen with a snackbar\n      dispatch(\n        actions.notifications.showSnackbar({ message: \"A confirmation link has been sent to your email\", variant: \"success\" })\n      );\n\n      navigation.navigate(\"LoginScreen\");\n      // Credentials are received on login only now. Return\n      return;\n      if (payload.credentials) {\n        dispatch(\n          actions.global.setCredentials(payload.credentials)\n        );\n        dispatch(\n          actions.global.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.screens.signup.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen style={styles.container} contentContainerStyle={styles.content}>\n      <KeyboardAvoidingView style={styles.fields} behavior=\"position\">\n        <Image source={logo} style={{ width: \"100%\", height: 200 }} resizeMode=\"contain\" />\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          labelStyle={styles.buttonLabel} \n          style={styles.button}\n          onPress={() =>\n            onSignUp({\n              pushToken: globalState.expoPushToken,\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </KeyboardAvoidingView>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: primaryColor,\n  },\n  content: {\n    paddingHorizontal: 60,\n    alignItems: \"center\",\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    flexGrow: 1,\n    maxWidth: 400,\n    backgroundColor: \"transparent\"\n  },\n  field: {\n    marginBottom: 8,\n    backgroundColor: \"white\",\n    borderColor: \"white\",\n    color: \"white\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\nimport UserWizardScreen from '../screens/user_wizard/UserWizardScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { StyleSheet, Text, View } from \"react-native\";\nimport { useRoute } from \"@react-navigation/core\";\nimport * as React from \"react\";\nimport { Avatar } from \"react-native-paper\";\nimport { successColor, warningColor } from \"../../../constants/Colors\";\n\n\nfunction ConfirmUserScreen() {\n\n  const route = useRoute<{\n    key: string,\n    name: string,\n    params?: { account_confirmation_success?: string }\n  }>();\n\n  return (\n    route?.params?.account_confirmation_success === \"true\" ?\n      <View style={styles.container}>\n        <Avatar.Icon icon=\"check\" style={styles.icon} />\n        <Text style={styles.title}>All done!</Text>\n        <Text style={styles.subtitle}>You can now log in</Text>\n      </View>\n    : <View style={styles.container}>\n        <Avatar.Icon icon=\"close\" style={styles.errorIcon} />\n        <Text style={styles.title}>Oops!</Text>\n        <Text style={styles.subtitle}>Something went wrong. Please contact support</Text>\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { \n    flexGrow: 1,\n    backgroundColor: \"#FF0000\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  icon: {\n    backgroundColor: successColor,\n    marginBottom: 16,\n  },\n  errorIcon: {\n    backgroundColor: warningColor,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 38,\n    color: \"#FFFFFF\",\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: 26,\n    color: \"#FFFFFF\",\n    textAlign: \"center\",\n  },\n});\n\nexport default ConfirmUserScreen;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\n\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport DropzonesScreen from '../screens/authenticated/dropzones/DropzonesScreen';\nimport ConfirmUserScreen from \"../screens/unauthenticated/signup/ConfirmUserScreen\";\n\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  confirm: { account_confirmation_success?: boolean };\n  Dropzones: undefined;\n  DropzonesScreen: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\nconst Drawer = createDrawerNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n                globalState.currentDropzone\n                  ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                    <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n          )\n        }\n      <Stack.Screen name=\"confirm\" component={ConfirmUserScreen} />\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      \n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from \"react\";\nimport { View, StyleSheet, Dimensions } from \"react-native\";\nimport { Avatar } from \"react-native-paper\";\nimport { PaginationProps } from \"react-native-swiper-flatlist\";\nimport { successColor } from \"../../constants/Colors\";\n\ninterface IWizardPagination extends PaginationProps {\n  icons?: string[];\n}\nexport default function WizardPagination(props: IWizardPagination) {\n  const { size, paginationIndex, icons } = props;\n\n  const { width } = Dimensions.get('window');\n  const screenWidth = width > 500 ? 500 : width;\n  \n  const bridgeLength = (screenWidth - (48 * 2) - (size * 30)) / size;\n\n  return (\n    <View style={styles.pagination}>\n      {\n        Array.from({ length: size }).map((_, index) => {\n          const hasCustomIcon = icons && icons.length > index;\n          const isPast = index < paginationIndex;\n          const isCurrent = index == paginationIndex;\n          let defaultIcon = isPast\n            ? \"check\" : \"\";\n          defaultIcon = isCurrent ? \"pencil\" : defaultIcon;\n\n          return (\n            <React.Fragment key={index}>\n              <Avatar.Icon\n                icon={\n                  hasCustomIcon\n                    ? icons[index]\n                    : defaultIcon\n                }\n                size={30}\n                style={[\n                  styles.icon,\n                  paginationIndex > index ? styles.iconDone : undefined\n                ]}\n              />\n              {\n                size - 1 > index\n                  ? <View style={[styles.bridge, { width: bridgeLength }, paginationIndex > index ? styles.bridgeDone : undefined]} />\n                  : null\n              }\n            </React.Fragment>\n          );\n        })\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pagination: {\n    flexDirection: \"row\",\n    position: \"absolute\",\n    top: 100,\n    alignSelf: \"center\",\n  },\n  bridge: {\n    height: 10,\n    marginTop: 10,\n    marginLeft: -2,\n    width: 50,\n    backgroundColor: \"white\",\n  },\n  bridgeDone: {\n    backgroundColor: successColor,\n  },\n  icon: {\n    backgroundColor: \"white\",\n    marginLeft: -1\n  },\n  iconDone: {\n    backgroundColor: successColor,\n    marginLeft: -1,\n  },\n});","import * as React from \"react\";\nimport { Dimensions, StyleSheet, View } from \"react-native\";\nimport { Button } from \"react-native-paper\";\nimport { SwiperFlatList } from 'react-native-swiper-flatlist';\nimport { useAppSelector } from \"../../redux\";\nimport WizardPagination from \"./Pagination\";\n\ninterface IWizardProps {\n  children: React.ReactNode;\n  \n  icons?: string[];\n}\n\ninterface IWizardContext {\n  count: number,\n  index: number,\n  setIndex(idx: number): void;\n}\n\nexport const WizardContext = React.createContext<IWizardContext>({\n  index: 0,\n  count: 0,\n  setIndex: () => null\n} as IWizardContext)\n\nfunction Wizard(props: IWizardProps) {\n  const { children, icons } = props;\n  const [index, setIndex] = React.useState(0);\n  const ref = React.useRef<SwiperFlatList>(null);\n  const count = React.Children.count(children);\n\n  return (\n    <WizardContext.Provider\n      value={{\n        index,\n        count,\n        setIndex: (idx) => {\n          // @ts-ignore\n          ref.current?.scrollToIndex({ index: idx, animated: true });\n        }\n      }}\n    >\n      <View style={[styles.container]}>\n        <SwiperFlatList\n          showPagination\n          index={index}\n          PaginationComponent={(props) => \n            <WizardPagination {...props} icons={icons} />\n          }\n          numColumns={1}\n          scrollEnabled={false}\n          autoplay={false}\n          ref={ref}\n          onChangeIndex={({ index, prevIndex }) => {\n            setIndex(index || 0);\n          }}\n        >\n          {children}\n        </SwiperFlatList>\n      </View>\n    </WizardContext.Provider>\n  );\n}\n\nconst { width } = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  \n  container: {\n    width,\n    flex: 1,\n    paddingBottom: 0\n  },\n});\n\nexport default Wizard;","import * as React from \"react\";\nimport { Dimensions, View, StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Title } from \"react-native-paper\";\nimport { SafeAreaViewProps } from \"react-native-safe-area-context\";;\nimport ScrollableScreen from \"../layout/ScrollableScreen\";\nimport { WizardContext } from \"./Wizard\";\n\nexport interface IWizardScreenProps extends SafeAreaViewProps {\n  title?: string;\n  loading?: boolean;\n  backButtonLabel?: string;\n  nextButtonLabel?: string;\n  \n  onBack(currentIndex: number, setIndex: (idx: number) => void): void;\n  onNext(currentIndex: number, setIndex: (idx: number) => void): void;\n}\nexport function WizardScreen(props: IWizardScreenProps) {\n  const { title, loading, onBack, backButtonLabel, nextButtonLabel, onNext } = props;\n  const { width, height } = Dimensions.get('window');\n  const screenWidth = width > 500 ? 500 : width;\n\n  const { index, setIndex } = React.useContext(WizardContext);\n\n  const scrollRef = React.useRef<ScrollView>();\n\n  React.useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTo({ y: 0, animated: false });\n      console.log(\"Scrolling \", props.title, \" to 0\");\n    } else {\n      console.log(\"No ref\");\n    }\n  }, [index]);\n\n  return (\n    <View style={StyleSheet.flatten([styles.wizardScreen, { width }, props.style])}>\n      <ScrollableScreen\n        style={[styles.container, { width: screenWidth }]}\n        contentContainerStyle={[styles.content, { minHeight: height }]}\n        // @ts-ignore\n        ref={scrollRef}\n      >\n        <Title style={styles.title}>{title}</Title>\n        { props.children }\n\n        <View style={styles.buttons}>\n        <Button\n          key={`button-next-${index}`}\n          loading={loading}\n          mode=\"contained\"\n          color=\"#FFFFFF\"\n          disabled={loading}\n          style={styles.button}\n          onPress={async () => {\n            console.log(\"onNext with index\", index);\n            onNext(index, setIndex);\n          }}\n        >\n          {\n            nextButtonLabel\n          }\n        </Button>\n\n        {\n          !onBack\n            ? null\n            : (\n              <Button\n                key={`button-${index}`}\n                mode=\"text\"\n                disabled={loading}\n                color=\"#FFFFFF\"\n                style={styles.buttonBack}\n                onPress={async () => {\n                  onBack(index, setIndex);\n                }}\n              >\n                {\n                  backButtonLabel\n                }\n              </Button>     \n            )\n        }\n        </View>\n      </ScrollableScreen>\n    </View>\n  )\n}\n\n\n\nconst styles = StyleSheet.create({\n  wizardScreen: {\n    justifyContent: \"center\",\n  },\n  container: {\n    backgroundColor: \"#FF1414\",\n    paddingHorizontal: 32,\n    alignSelf: \"center\"\n  },\n  content: { paddingTop: 200, flexGrow: 1, paddingBottom: 0 },\n  title: {\n    position: \"absolute\",\n    top: 140,\n    marginBottom: 50,\n    color: \"white\",\n    fontSize: 24, \n    fontWeight: \"bold\", \n    textAlign: \"center\",\n    alignSelf: \"center\"\n  },\n  button: {\n    alignSelf: \"center\",\n    width: \"100%\",\n  },\n  buttonBack: {\n    alignSelf: \"center\",\n    width: \"100%\",\n    marginHorizontal: 48\n  },\n  buttons: {\n    alignSelf: \"flex-end\",\n    alignItems: \"flex-end\",\n    flexGrow: 1,\n    justifyContent: \"flex-end\",\n    width: \"100%\",\n    maxWidth: 404,\n    marginBottom: 100,\n  }\n});\n\nexport default WizardScreen;","import * as React from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\nimport { Avatar, HelperText, Paragraph } from \"react-native-paper\";\nimport { successColor } from \"../../constants/Colors\";\nimport WizardScreen, { IWizardScreenProps } from \"./WizardScreen\";\n\ninterface IWizardCompleteStep extends IWizardScreenProps {\n  subtitle?: string;\n}\n\nfunction WizardCompleteStep(props: IWizardCompleteStep) {\n  const { title, subtitle, ...rest } = props;\n  return (\n    <WizardScreen style={styles.container} {...rest}>\n      <View style={styles.content}>\n        \n        <Avatar.Icon\n          icon=\"check\"\n          size={150}\n          style={styles.icon}\n        />\n        <Text style={styles.title}>{title}</Text>\n        <Paragraph style={styles.subtitle}>{subtitle}</Paragraph>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  subtitle: {\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  title: {\n    fontSize: 26,\n    color: \"white\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n  },\n  content: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexGrow: 1,\n    alignSelf: \"center\"\n  },\n  icon: {\n    marginVertical: 32,\n    backgroundColor: successColor,\n  },\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n    backgroundColor: \"transparent\"\n  },\n});\n\nexport default WizardCompleteStep;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, Title } from \"react-native-paper\";\nimport LicenseChipSelect from \"../../../input/chip_select/LicenseChipSelect\";\nimport FederationSelect from \"../../../input/dropdown_select/FederationSelect\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction FederationWizardSceen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"What license do you have?\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <FederationSelect\n            value={state?.fields?.license?.value?.federation || state.federation.value}\n            onSelect={(value) => dispatch(actions.forms.user.setFederation(value))}\n            required\n          />\n          <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n            { state.federation.error || \"\" }\n          </HelperText>\n        </Card>\n\n        <Card style={{ padding: 16 }}>\n          { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n            <>\n              <LicenseChipSelect\n                value={state.fields.license.value}\n                federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n                onSelect={(value) => dispatch(actions.forms.user.setField([\"license\", value]))}\n                required\n              />\n              <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n                { state.fields.license.error || \"\" }\n              </HelperText>\n            </>\n          )}\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 100,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  } \n});\n\nexport default FederationWizardSceen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { Card, HelperText, List, Menu, TextInput, Title } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction RigWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const [isOtherMake, setIsOtherMake] = React.useState(false);\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"What're you jumping?\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Container manufacturer</List.Subheader>\n          <Menu\n            onDismiss={() => setMenuOpen(false)}\n            visible={isMenuOpen}\n            anchor={\n              <TouchableOpacity onPress={() => setMenuOpen(true)}>\n              <TextInput\n                pointerEvents=\"box-only\"\n                style={styles.field}\n                mode=\"outlined\"\n                error={!!state.fields.make.error}\n                value={\n                  isOtherMake\n                    ? \"Other\" \n                    : state.fields.make.value || \"Select manufacturer\"\n                }\n                disabled\n              />\n              </TouchableOpacity>\n            }>\n            {\n              [\"Icon\", \"Javelin\", \"Mirage\", \"Vector\", \"PA (Talon)\", \"Infinity\", \"Parachutes de France\", \"Parachute Systems\", \"Racer\"].map((make) => \n                <Menu.Item\n                  onPress={() => {\n                    setMenuOpen(false);\n                    dispatch(actions.forms.rig.setField([\"make\", make]));\n                    setIsOtherMake(false);\n                  }}\n                  title={make}\n                />\n              )}\n              <Menu.Item\n                onPress={() => {\n                  setMenuOpen(false);\n                  dispatch(actions.forms.rig.setField([\"make\", \"\"]));\n                  setIsOtherMake(true);\n                }}\n                title={\"Other\"}\n              />\n          </Menu>\n          {\n            !isOtherMake ? null : (\n              <TextInput\n                style={styles.field}\n                mode=\"outlined\"\n                label=\"Other manufacturer\"\n                error={!!state.fields.make.error}\n                value={state.fields.make.value || \"\"}\n                onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"make\", newValue]))}\n              />\n            )\n          }\n          \n          <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n            { state.fields.make.error || \"\" }\n          </HelperText>\n        \n          <List.Subheader>Model</List.Subheader>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            error={!!state.fields.model.error}\n            value={state.fields.model.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"model\", newValue]))}\n          />\n          <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n            { state.fields.model.error || \"e.g G4.1\" }\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card}>\n          <List.Subheader>Serial number</List.Subheader>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            error={!!state.fields.serial.error}\n            value={state.fields.serial.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"serial\", newValue]))}\n          />\n          <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n            { state.fields.serial.error || \"\" }\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 16, marginVertical: 16 },\n  title: {\n    color: \"white\",\n    marginBottom: 16,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  }\n});\n\nexport default RigWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, Title } from \"react-native-paper\";\nimport DatePicker from \"../../../input/date_picker/DatePicker\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction ReserveRepackWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Next reserve repack?\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Due date</List.Subheader>\n          <DatePicker\n            timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n            onChange={(time) => dispatch(actions.forms.rig.setField([\"repackExpiresAt\", time]))}\n          />\n          <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n            { state.fields.repackExpiresAt.error || \"\" }\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 80, textAlign: \"center\" }\n});\n\nexport default ReserveRepackWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Avatar, Card, HelperText, List, Paragraph } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { ceil, debounce } from \"lodash\";\n\nfunction WingloadingWizardScreen(props: IWizardScreenProps) {\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const userForm = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n  const [canopySize, setCanopySize] = React.useState(rigForm.fields.canopySize.value || 120);\n  const [weight, setWeight] = React.useState(Number(userForm.fields.exitWeight.value) || 120);\n\n\n  React.useEffect(() => {\n    setCanopySize(rigForm.fields.canopySize.value);\n  }, [rigForm.fields.canopySize.value]);\n\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Your wingloading\">\n\n      <View style={styles.content}>\n        <Card>\n          <Card.Content style={{ flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <View style={styles.wingLoadingCardLeft}>\n              <Avatar.Text\n                label={\n                  ceil(\n                    2.205 * Number(userForm.fields.exitWeight.value || 50) /\n                    (rigForm.fields.canopySize.value || 150),\n                    2\n                  ).toString()\n                }\n                size={100}\n                style={styles.wingLoading}\n              />\n            </View>\n            <View style={styles.wingLoadingCardRight}>\n              <Card.Title title=\"Your wingloading\" style={{ paddingLeft: 0 }} />\n              <Paragraph>Your wingloading is an indicator of your descent rate under canopy</Paragraph>\n            </View>\n            \n          </Card.Content>\n        </Card>\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Your exit weight</List.Subheader>\n            <Text style={styles.cardValue}>{(weight || 50)}kg</Text>\n          </View>\n          <Slider\n            style={styles.sliderControl}\n            minimumValue={50}\n            maximumValue={160}\n            step={0.5}\n            minimumTrackTintColor=\"#FF1414\"\n            maximumTrackTintColor=\"#000000\"\n            onSlidingComplete={() =>\n              dispatch(actions.forms.user.setField([\"exitWeight\", weight.toString()]))\n            }\n            value={weight}\n            onValueChange={(w) => setWeight(w)}\n          />\n          <HelperText type={userForm.fields.exitWeight?.error ? \"error\" : \"info\" }>\n            { userForm.fields.exitWeight?.error || \"Your weight in kg's with all equipment on\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Canopy size</List.Subheader>\n            <Text style={styles.cardValue}>{(canopySize || 120)}ft</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={34}\n              maximumValue={350}\n              step={1}\n              value={canopySize || 120}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={(size) => setCanopySize(size)}\n              onSlidingComplete={() => dispatch(actions.forms.rig.setField([\"canopySize\", canopySize]))}\n            />\n          </View>\n            \n          <HelperText type={userForm.fields.exitWeight?.error ? \"error\" : \"info\" }>\n            {userForm.fields.exitWeight?.error || \"Size of your main canopy in square feet\"}\n          </HelperText>\n        </Card>\n        \n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 50,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default WingloadingWizardScreen;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateRigArgs, UpdateRigPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateRigArgs[\"input\"][\"attributes\"], UpdateRigPayload>(\n  MUTATION_UPDATE_RIG, {\n    getPayload: (result) => result.updateRig,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationCreateRigArgs, CreateRigPayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationCreateRigArgs[\"input\"][\"attributes\"], CreateRigPayload>(\n  MUTATION_CREATE_RIG, {\n    getPayload: (result) => result.createRig,\n    fieldErrorMap: {\n    },\n  }\n);","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Portal, Modal, Dialog } from \"react-native-paper\";\nimport Wizard from \"../../wizard/Wizard\";\nimport WizardCompleteStep from \"../../wizard/WizardCompleteStep\";\nimport FederationStep from \"./steps/Federation\";\nimport RigStep from \"./steps/Rig\";\nimport ReserveRepackStep from \"./steps/ReserveRepack\";\nimport WingloadingStep from \"./steps/Wingloading\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport useMutationUpdateUser from \"../../../graphql/hooks/useMutationUpdateUser\";\nimport useMutationUpdateRig from \"../../../graphql/hooks/useMutationUpdateRig\";\nimport useMutationCreateRig from \"../../../graphql/hooks/useMutationCreateRig\";\n\nfunction UserWizardScreen() {\n  const userForm = useAppSelector(state => state.forms.user);\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const state = useAppSelector(state => state.forms.userWizard);\n  const dispatch = useAppDispatch();\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: (e) => true,\n    onError: (message) => dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" })),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.user.setFieldError([field as any, value])),\n  });\n  const mutationUpdateRig = useMutationUpdateRig({\n    onSuccess: () => true,\n    onError: (message) => dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" })),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.rig.setFieldError([field as any, value])),\n  });\n  const mutationCreateRig = useMutationCreateRig({\n    onSuccess: (e) => true,\n    onError: (message) => dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" })),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.rig.setFieldError([field as any, value])),\n  });\n\n  const onFederationNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!userForm.fields.license?.value?.id) {\n      dispatch(actions.forms.user.setFieldError([\"license\", \"You must select a license\"]));\n      return false;\n    }\n\n    // Update user license\n    try {\n      await mutationUpdateUser.mutate({\n        id: Number(userForm.original.id),\n        licenseId: Number(userForm.fields.license?.value?.id)\n      });\n      return setIndex(index + 1);\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(userForm.fields)]);\n\n  const onRigNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!rigForm.fields.make?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"make\", \"Please select manufacturer\"]));\n      return;\n    }\n\n    if (!rigForm.fields.model?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"model\", \"Please enter a model name\"]));\n      return;\n    }\n\n    // Create user rig\n    try {\n      const rig = !rigForm.original?.id\n        ? await mutationCreateRig.mutate({\n          make: rigForm.fields.make.value,\n          model: rigForm.fields.model.value,\n          serial: rigForm.fields.serial.value,\n          userId: Number(userForm.original.id),\n        })\n        : await mutationUpdateRig.mutate({\n          id: Number(rigForm.original?.id),\n          make: rigForm.fields.make.value,\n          model: rigForm.fields.model.value,\n          serial: rigForm.fields.serial.value,\n          userId: Number(userForm.original.id),\n        });\n\n      dispatch(actions.forms.rig.setOpen(rig.rig));\n      setIndex(index + 1 );\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(userForm.fields), JSON.stringify(userForm.original), JSON.stringify(rigForm.original)]);\n\n  const onReserveRepackNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!rigForm.fields.repackExpiresAt?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"repackExpiresAt\", \"Select repack date, even if it's in the past\"]));\n      return false;\n    }\n\n    // Update repack expiry date\n    try {\n      const rig = await mutationUpdateRig.mutate({\n        id: Number(rigForm.original?.id),\n        repackExpiresAt: rigForm.fields.repackExpiresAt.value,\n      });\n      dispatch(actions.forms.rig.setOpen(rig.rig));\n      return setIndex(index + 1);\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(rigForm.original?.id)]);\n\n  const onWingloadingNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!rigForm.fields.canopySize?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"canopySize\", \"You must provide a canopy size\"]));\n      return false;\n    }\n\n    if (!userForm.fields.exitWeight?.value) {\n      dispatch(actions.forms.user.setFieldError([\"exitWeight\", \"You must enter your exit weight\"]));\n      return false;\n    }\n\n    // Update repack expiry date\n    try {\n      const rig = await mutationUpdateRig.mutate({\n        id: Number(rigForm.original?.id),\n        canopySize: rigForm.fields.canopySize.value,\n      });\n      const user = await mutationUpdateUser.mutate({\n        id: Number(userForm.original?.id),\n        exitWeight: Number(userForm.fields.exitWeight?.value),\n      });\n      \n      setIndex(index + 1);\n    } catch (e) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(userForm.fields), rigForm.original?.id, dispatch]);\n\n  \n\n  return (\n    <Portal>\n      <Modal\n        visible={state.open}\n        dismissable={false}\n        style={styles.modal}\n        contentContainerStyle={{ height: \"100%\" }}\n      >\n\n          <Wizard>\n            <FederationStep\n              backButtonLabel=\"Cancel\"\n              nextButtonLabel=\"Next\"\n              onBack={() => {\n                dispatch(actions.forms.userWizard.setOpen(false));\n                dispatch(actions.forms.user.setOpen(false));\n                dispatch(actions.forms.rig.setOpen(false));\n                dispatch(actions.forms.userWizard.reset());\n                dispatch(actions.forms.user.reset());\n                dispatch(actions.forms.rig.reset());\n              }}\n              loading={mutationUpdateUser.loading}\n              onNext={onFederationNext}\n            />\n            <RigStep\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Next\"\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n              onNext={onRigNext}\n            />\n            <ReserveRepackStep\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Next\"\n              loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              onNext={onReserveRepackNext}\n            />\n            <WingloadingStep\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Next\"\n              loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              onNext={onWingloadingNext}\n            />\n\n            <WizardCompleteStep\n              title=\"You're all set!\"\n              subtitle=\"You can configure your settings on the profile page\"\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Done\"\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              onNext={() => {\n                dispatch(actions.forms.userWizard.setOpen(false));\n                dispatch(actions.forms.user.setOpen(false));\n                dispatch(actions.forms.rig.setOpen(false));\n                dispatch(actions.forms.userWizard.reset());\n                dispatch(actions.forms.user.reset());\n                dispatch(actions.forms.rig.reset());\n              }}\n            />\n          </Wizard>\n      </Modal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    paddingLeft: 0,\n    marginLeft: 0,\n    marginBottom: 0,\n    marginTop: 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    backgroundColor: \"red\",\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\"\n  }\n})\n\nexport default UserWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, TextInput, Title } from \"react-native-paper\";\nimport FederationSelect from \"../../../input/dropdown_select/FederationSelect\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction NameAndFederationWizardSceen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Basic information\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Name</List.Subheader>\n          <TextInput\n            mode=\"outlined\"\n            error={!!state.fields.name.error}\n            value={state.fields.name.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n          />\n          <HelperText type=\"error\">\n            { state.fields.name.error || \"\" }\n          </HelperText>\n        </Card>\n        <Card style={styles.card}>\n          <FederationSelect\n            value={state.fields.federation.value}\n            onSelect={(value) => dispatch(actions.forms.dropzone.setField([\"federation\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.federation.error ? \"error\" : \"info\"}>\n            { state.fields.federation.error || \"\" }\n          </HelperText>\n        </Card>\n\n        \n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n    backgroundColor: \"transparent\"\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 100,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  } \n});\n\nexport default NameAndFederationWizardSceen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card, HelperText, List, TextInput } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\n\nfunction AircraftWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.plane);\n  const [minSlots, setMinSlots] = React.useState(state?.fields?.minSlots?.value || 0);\n  const [maxSlots, setMaxSlots] = React.useState(state?.fields?.maxSlots?.value || 0);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Aircraft\">\n\n      <View style={styles.content}>\n      <Card style={styles.card}>\n        <List.Subheader>Information</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"name\", newValue]))}\n        />\n        <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n          { state.fields.name.error || \"\" }\n        </HelperText>\n      \n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Registration\"\n          error={!!state.fields.registration.error}\n          value={state.fields.registration.value}\n          onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"registration\", newValue]))}\n        />\n        <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n          { state.fields.registration.error || \"\" }\n        </HelperText>\n      </Card>\n\n      <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Minimum slots</List.Subheader>\n            <Text style={styles.cardValue}>{(minSlots || 0)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={0}\n              maximumValue={maxSlots || 34}\n              step={1}\n              value={minSlots}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={(value) => setMinSlots(value)}\n              onSlidingComplete={() => dispatch(actions.forms.plane.setField([\"minSlots\", minSlots]))}\n            />\n          </View>\n            \n          <HelperText type={state.fields.minSlots?.error ? \"error\" : \"info\" }>\n            {state.fields.minSlots?.error || \"How many slots are required to be filled to dispatch a load with this aircraft\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Max slots</List.Subheader>\n            <Text style={styles.cardValue}>{(maxSlots || 34)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={2}\n              maximumValue={34}\n              step={1}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              value={maxSlots}\n              onValueChange={(value) => setMaxSlots(value)}\n              onSlidingComplete={() => dispatch(actions.forms.plane.setField([\"maxSlots\", Number(maxSlots)]))}\n            />\n          </View>\n            \n          <HelperText type={state.fields.maxSlots?.error ? \"error\" : \"info\" }>\n            {state.fields.maxSlots?.error || \"Max available slots on this aircraft\"}\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 4 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 10,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default AircraftWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, Surface, Title, TouchableRipple } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport { PhonePreview, WebPreview } from \"../../../theme_preview\";\nimport ColorPicker from \"../../../input/colorpicker\";\n\nfunction ReserveRepackWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Branding\">\n      <View style={styles.content}>\n\n        <View style={{ flexDirection: \"row\", alignItems: \"flex-end\", justifyContent: \"space-evenly\" }}>\n          <PhonePreview\n            primaryColor={state.fields.primaryColor.value}\n            secondaryColor={state.fields.secondaryColor.value}\n          />\n\n          <WebPreview\n            primaryColor={state.fields.primaryColor.value}\n            secondaryColor={state.fields.secondaryColor.value}\n          />\n        </View>\n          \n        <ColorPicker\n          title=\"Primary color\"\n          helperText=\"Primary color is used for elements like the title bar and the tab bar\"\n          error={state.fields.primaryColor.error}\n          onChange={(color) => dispatch(actions.forms.dropzone.setField([\"primaryColor\", color]))}\n          value={state.fields.primaryColor.value}\n        />\n\n        <ColorPicker\n          title=\"Accent color\"\n          helperText=\"Accent color is used for highlights, like buttons and loading bars\"\n          error={state.fields.secondaryColor.error}\n          onChange={(color) => dispatch(actions.forms.dropzone.setField([\"secondaryColor\", color]))}\n          value={state.fields.secondaryColor.value}\n        />\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  \n\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default ReserveRepackWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card } from \"react-native-paper\";\nimport { capitalize } from \"lodash\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport { Permission, Query } from \"../../../../graphql/schema.d\";\nimport PermissionListItem from \"../../../permissions/PermissionListItem\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst QUERY_DROPZONE_PERMISSIONS = gql`\n  query QueryDropzonePermissions(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n        permissions\n      }\n    }\n  }\n`;\n\ninterface IPermissionWizardScreen extends IWizardScreenProps {\n  permission: Permission,\n  title: string;\n}\n\n\nfunction PermissionWizardScreen(props: IPermissionWizardScreen) {\n  const { permission, ...rest } = props;\n  const dropzoneForm = useAppSelector(state => state.forms.dropzone);\n  const [queryRoles, { data, loading, called }] = useLazyQuery<Query>(QUERY_DROPZONE_PERMISSIONS);\n\n  React.useEffect(() => {\n    if (dropzoneForm.original?.id) {\n      queryRoles({\n        variables: {\n          dropzoneId: Number(dropzoneForm.original.id)\n        }\n      });\n    }\n  }, [dropzoneForm.original]);\n\n  return (\n    <WizardScreen style={styles.container} {...rest}>\n\n      <View style={styles.content}>\n        {\n          !(called && !loading && data?.dropzone?.roles?.length) ? null : (\n            <Card>\n              <Card.Content style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n                {\n                  data?.dropzone?.roles?.map((role) =>\n                    <PermissionListItem\n                      permissionName={permission}\n                      role={role}\n                      title={capitalize(role.name.replace(/_/, \" \"))}\n                    />\n                  )\n                }\n              </Card.Content>\n            </Card>\n          )\n        }\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n    marginBottom: 16,\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 50,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default PermissionWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card, HelperText, List, Menu, Paragraph, TextInput } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { debounce } from \"lodash\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nfunction TicketTypeWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.ticketType);\n  const dispatch = useAppDispatch();\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const [price, setPrice] = React.useState(0);\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Tickets\">\n      <Paragraph style={styles.paragraph}>You can add more tickets later under Settings</Paragraph>\n\n      <View style={styles.content}>\n      <Card style={styles.card}>\n        <List.Subheader>Name</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"name\", newValue]))}\n        />\n        <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n          { state.fields.name.error || \"\" }\n        </HelperText>\n      </Card>\n\n      <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Price</List.Subheader>\n            <Text style={styles.cardValue}>${(price || 0)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={0}\n              maximumValue={500}\n              step={1}\n              value={price}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onSlidingComplete={() => dispatch(actions.forms.ticketType.setField([\"cost\", price]))}\n              onValueChange={setPrice}\n            />\n          </View>\n            \n          <HelperText type={state.fields.cost?.error ? \"error\" : \"info\" }>\n            {state.fields.cost?.error || \"How many slots are required to be filled to dispatch a load with this aircraft\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          \n          <Menu\n            onDismiss={() => setAltitudeMenuOpen(false)}\n            visible={altitudeMenuOpen}\n            contentStyle={{ width: 300 }}\n            anchor={\n              <TouchableOpacity onPress={() => setAltitudeMenuOpen(true)}>\n                <View style={styles.cardTitle}>\n                  <List.Subheader>Altitude</List.Subheader>\n                  <Text style={styles.cardValue}>\n                    {\n                      state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                      {\n                        \"14000\": \"Height\",\n                        \"4000\": \"Hop n Pop\",\n                      }[state.fields.altitude.value.toString()] :\n                      \"Custom\"\n                    }\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            }>\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 4000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Hop n Pop\"\n                right={() => <List.Icon icon=\"parachute\" />}\n              />\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 14000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Height\"\n                right={() => <List.Icon icon=\"airplane-takeoff\" />}\n              />\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 7000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Other\"\n                right={() => <List.Icon icon=\"parachute\" />}\n              />\n          </Menu>\n\n          {\n            (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n              <TextInput\n                style={styles.field}\n                mode=\"outlined\"\n                label=\"Custom altitude\"\n                error={!!state.fields.altitude.error}\n                value={state.fields.altitude?.value?.toString()}\n                onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"altitude\", Number(newValue)]))}\n              />\n            )\n          }\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 8,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n  },\n  paragraph: {\n    color: \"white\",\n    marginBottom: 8,\n    fontWeight: \"bold\",\n    // fontSize: 25,\n    textAlign: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n    marginHorizontal: 16,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default TicketTypeWizardScreen;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateDropzoneArgs, UpdateDropzonePayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateDropzoneArgs[\"input\"][\"attributes\"], UpdateDropzonePayload>(\n  MUTATION_UPDATE_DROPZONE, {\n    getPayload: (result) => result.updateDropzone,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreatePlanePayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{\n  name: string,\n  registration: string,\n  dropzoneId: number\n  minSlots: number\n  maxSlots: number\n  hours?: number\n  nextMaintenanceHours?: number\n}, CreatePlanePayload>(\n  MUTATION_CREATE_PLANE, {\n    getPayload: (result) => result.createPlane,\n    fieldErrorMap: {\n      dropzone: \"dropzoneId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\"),\n      ],\n      registration: [\n        isRequired(\"Registration is required\"),\n      ],\n    }\n  }\n)","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdatePlaneArgs, UpdatePlanePayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdatePlaneArgs[\"input\"][\"attributes\"], UpdatePlanePayload>(\n  MUTATION_UPDATE_PLANE, {\n    getPayload: (result) => result.updatePlane,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationCreateTicketTypeArgs, CreateTicketPayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default createMutation<MutationCreateTicketTypeArgs[\"input\"][\"attributes\"], CreateTicketPayload>(\n  MUTATION_CREATE_TICKET_TYPE, {\n    getPayload: (result) => result.createTicketType,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateTicketTypeArgs, UpdateTicketPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateTicketTypeArgs[\"input\"][\"attributes\"], UpdateTicketPayload>(\n  MUTATION_UPDATE_TICKET_TYPE, {\n    getPayload: (result) => result.updateTicketType,\n    fieldErrorMap: {\n      \n    },\n  }\n);","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Portal, Modal } from \"react-native-paper\";\nimport Wizard from \"../../wizard/Wizard\";\nimport WizardCompleteStep from \"../../wizard/WizardCompleteStep\";\nimport NameAndFederationStep from \"./steps/Name\";\nimport AircraftStep from \"./steps/Aircraft\";\nimport ThemingStep from \"./steps/Theming\";\nimport PermissionStep from \"./steps/Permissions\";\nimport TicketTypeStep from \"./steps/TicketType\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport useMutationCreateDropzone from \"../../../graphql/hooks/useMutationCreateDropzone\";\nimport useMutationUpdateDropzone from \"../../../graphql/hooks/useMutationUpdateDropzone\";\nimport useMutationCreatePlane from \"../../../graphql/hooks/useMutationCreatePlane\";\nimport useMutationUpdatePlane from \"../../../graphql/hooks/useMutationUpdatePlane\";\nimport useMutationCreateTicketType from \"../../../graphql/hooks/useMutationCreateTicketType\";\nimport useMutationUpdateTicketType from \"../../../graphql/hooks/useMutationUpdateTicketType\";\nimport { Permission } from \"../../../graphql/schema.d\";\n\n\nfunction DropzoneWizardScreen() {\n  const state = useAppSelector(state => state.forms.dropzoneWizard);\n  const aircraft = useAppSelector(state => state.forms.plane);\n  const ticket = useAppSelector(state => state.forms.ticketType);\n  const dropzone = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const mutationCreateDropzone = useMutationCreateDropzone({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as any, value])),\n  });\n  const mutationUpdateDropzone = useMutationUpdateDropzone({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as any, value])),\n  });\n  const mutationCreatePlane = useMutationCreatePlane({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.plane.setFieldError([field as any, value])),\n  });\n  const mutationUpdatePlane = useMutationUpdatePlane({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.plane.setFieldError([field as any, value])),\n  });\n  const mutationCreateTicketType = useMutationCreateTicketType({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.ticketType.setFieldError([field as any, value])),\n  });\n  const mutationUpdateTicketType = useMutationUpdateTicketType({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.ticketType.setFieldError([field as any, value])),\n  });\n\n\n  const onBasicInfoNext = React.useCallback(async (index: number, setIndex: (idx: number) => void): Promise<void> => {\n    if (!dropzone.fields.name.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"name\", \"Your dropzone must have a name\"]));\n      return;\n    } \n    if (!dropzone.fields.federation.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"federation\", \"Your dropzone must have an associated organization\"]));\n      return;\n    }\n\n    setIndex(index + 1);\n  }, [JSON.stringify(dropzone.fields), dropzone.original]);\n\n  const onThemingNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    if (!dropzone.fields.primaryColor.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"primaryColor\", \"Please pick a primary color\"]));\n      return;\n    }\n    if (!dropzone.fields.secondaryColor.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"secondaryColor\", \"Please pick an accent color\"]));\n      return;\n    }\n\n    // Create or update dropzone\n    const result = !dropzone.original?.id\n      ? await mutationCreateDropzone.mutate({\n          federationId: Number(dropzone.fields.federation.value?.id),\n          name: dropzone.fields.name.value,\n          banner: \"\",\n          primaryColor: dropzone.fields.primaryColor.value,\n          secondaryColor: dropzone.fields.secondaryColor.value,\n        })\n      : await mutationUpdateDropzone.mutate({\n          id: Number(dropzone.original.id),\n          federationId: Number(dropzone.fields.federation.value?.id),\n          name: dropzone.fields.name.value,\n          primaryColor: dropzone.fields.primaryColor.value,\n          secondaryColor: dropzone.fields.secondaryColor.value,\n          banner: \"\",\n        });\n\n\n      if (!result.errors?.length && result.dropzone?.id) {\n        dispatch(actions.forms.dropzone.setOpen(result.dropzone));\n        dispatch(actions.global.setDropzone(result.dropzone));\n        dispatch(actions.global.setPrimaryColor(result.dropzone.primaryColor));\n        dispatch(actions.global.setAccentColor(result.dropzone.secondaryColor));\n        return setIndex(index + 1);\n      }\n      return false;\n\n  }, [JSON.stringify(dropzone.fields), dropzone.original]);\n\n  const onAircraftNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    if (!aircraft.fields.name.value) {\n      dispatch(actions.forms.plane.setFieldError([\"name\", \"You must name your aircraft\"]));\n      return;\n    }\n    if (!aircraft.fields.registration.value) {\n      dispatch(actions.forms.plane.setFieldError([\"registration\", \"Please provide aircraft registration\"]));\n      return;\n    }\n\n    // Create or update dropzone\n    const result = !aircraft.original?.id\n      ? await mutationCreatePlane.mutate({\n          dropzoneId: Number(dropzone.original.id),\n          name: aircraft.fields.name.value,\n          registration: aircraft.fields.registration.value,\n          minSlots: aircraft.fields.minSlots.value,\n          maxSlots: aircraft.fields.maxSlots.value,\n        })\n      : await mutationUpdatePlane.mutate({\n          id: Number(aircraft.original.id),\n          name: aircraft.fields.name.value,\n          registration: aircraft.fields.registration.value,\n          minSlots: aircraft.fields.minSlots.value,\n          maxSlots: aircraft.fields.maxSlots.value,\n        });\n\n\n      if (!result.errors?.length && result.plane?.id) {\n        dispatch(actions.forms.plane.setOpen(result.plane));\n        setIndex(index + 1);\n      }\n      return false;\n\n  }, [JSON.stringify(aircraft.fields), dropzone.original, JSON.stringify(aircraft.original)]);\n\n\n  const onTicketTypeNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    if (!ticket.fields.name.value) {\n      dispatch(actions.forms.ticketType.setFieldError([\"name\", \"You must name your ticket\"]));\n      return;\n    }\n\n    if (!ticket.fields.cost.value) {\n      dispatch(actions.forms.ticketType.setFieldError([\"cost\", \"Tickets must have a price\"]));\n      return;\n    }\n\n    // Create or update dropzone\n    const result = !ticket.original?.id\n      ? await mutationCreateTicketType.mutate({\n          dropzoneId: Number(dropzone.original.id),\n          name: ticket.fields.name.value,\n          cost: ticket.fields.cost.value,\n          altitude: ticket.fields.altitude.value,\n          isTandem: false,\n          allowManifestingSelf: true,\n        })\n      : await mutationUpdateTicketType.mutate({\n          id: Number(ticket.original.id),\n          name: ticket.fields.name.value,\n          cost: ticket.fields.cost.value,\n          altitude: ticket.fields.altitude.value,\n          isTandem: false,\n          allowManifestingSelf: true,\n        });\n\n\n      if (!result.errors?.length && result.ticketType?.id) {\n        dispatch(actions.forms.ticketType.setOpen(result.ticketType));\n        setIndex(index + 1)\n        return;\n      }\n      return false;\n\n  }, [JSON.stringify(ticket.fields), dropzone.original, JSON.stringify(ticket.original)]);\n  \n\n  return (\n    <Portal>\n      <Modal\n        visible={state.open}\n        dismissable={false}\n        style={styles.modal}\n        contentContainerStyle={{ height: \"100%\" }}\n      >\n          <Wizard>\n            \n            <NameAndFederationStep\n              onBack={() => {\n                dispatch(actions.forms.dropzoneWizard.setOpen(false));\n                dispatch(actions.forms.dropzoneWizard.reset());\n                dispatch(actions.forms.ticketType.setOpen(false));\n                dispatch(actions.forms.plane.setOpen(false));\n                dispatch(actions.forms.dropzone.setOpen(false));\n                dispatch(actions.forms.ticketType.reset());\n                dispatch(actions.forms.plane.reset());\n                dispatch(actions.forms.dropzone.reset());\n              }}\n              backButtonLabel=\"Cancel\"\n              nextButtonLabel=\"Next\"\n              onNext={onBasicInfoNext}\n            />\n            <ThemingStep\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={onThemingNext}\n              loading={\n                mutationCreateDropzone.loading ||\n                mutationUpdateDropzone.loading\n              }\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <AircraftStep\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={onAircraftNext}\n              loading={\n                mutationCreatePlane.loading ||\n                mutationUpdatePlane.loading\n              }\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <TicketTypeStep\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={onTicketTypeNext}\n              loading={\n                mutationCreateTicketType.loading ||\n                mutationUpdateTicketType.loading\n              }\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <PermissionStep\n              title=\"Who can manifest?\"\n              permission={Permission.CreateSlot}\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={(idx, setIndex) => setIndex(idx + 1)}\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"  \n            />\n            <PermissionStep\n              title=\"Manifest other people?\"\n              permission={Permission.CreateUserSlot}\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={(idx, setIndex) => {\n                setIndex(idx + 1);\n              }}\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <WizardCompleteStep\n              title=\"Setup complete\"\n              subtitle=\"You can configure settings under the Settings screen\"\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Done\"\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={() => {\n                dispatch(\n                  actions.global.setDropzone(dropzone.original)\n                );\n                if (dropzone.fields.primaryColor.value) {\n                  dispatch(\n                    actions.global.setPrimaryColor(dropzone.fields.primaryColor.value)\n                  );\n                }\n                if (dropzone.fields.secondaryColor.value) {\n                  dispatch(\n                    actions.global.setAccentColor(dropzone.fields.secondaryColor.value)\n                  );\n                }\n                dispatch(\n                  actions.global.setDropzone(dropzone.original)\n                );\n                \n                dispatch(actions.forms.dropzoneWizard.setOpen(false));\n                dispatch(actions.forms.dropzoneWizard.reset());\n                dispatch(actions.forms.ticketType.setOpen(false));\n                dispatch(actions.forms.plane.setOpen(false));\n                dispatch(actions.forms.dropzone.setOpen(false));\n                dispatch(actions.forms.ticketType.reset());\n                dispatch(actions.forms.plane.reset());\n                dispatch(actions.forms.dropzone.reset());\n\n                // Set complete-flag to force navigation from dropzone screen\n                dispatch(actions.forms.dropzoneWizard.complete());\n              }}\n            />\n          </Wizard>\n      </Modal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    paddingLeft: 0,\n    marginLeft: 0,\n    marginBottom: 0,\n    marginTop: 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    backgroundColor: \"red\",\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\",\n  }\n})\n\nexport default DropzoneWizardScreen;","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport Constants from \"expo-constants\";\nimport * as Notifications from 'expo-notifications';\nimport * as React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar, Portal } from \"react-native-paper\"\nimport { Linking, Platform, View } from 'react-native';\nimport { NavigationContainer, useLinking } from '@react-navigation/native';\nimport URI from \"urijs\";\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector, useAppDispatch } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport NotificationArea from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\nimport { actions } from './redux';\nimport UserWizardScreen from './components/dialogs/UserWizard/UserWizardScreen';\nimport DropzoneWizardScreen from './components/dialogs/DropzoneWizard/DropzoneWizard';\n\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      console.warn('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    console.warn('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const notificationListener = React.useRef<ReturnType<typeof Notifications.addNotificationReceivedListener>>();\n  const responseListener = React.useRef<ReturnType<typeof Notifications.addNotificationResponseReceivedListener>>();\n\n  const onOutsideLink = (link) => {\n    console.log(link);\n    const uri = URI(link.url);\n    const intendedRoute = uri.path();\n    console.log(intendedRoute);\n  };\n\n  React.useEffect(() => {\n    registerForPushNotificationsAsync().then(token => dispatch(actions.global.setExpoPushToken(token)));\n\n    // This listener is fired whenever a notification is received while the app is foregrounded\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      dispatch(actions.notifications.showSnackbar({ message: notification.request.content.body, variant: \"warning\" }));\n    });\n\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    Linking.addEventListener(\"url\", onOutsideLink);\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      Linking.removeEventListener(\"url\", onOutsideLink);\n    };\n  }, []);\n\n  return (\n    <React.Suspense\n      fallback={\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n\n            </NavigationContainer>\n\n            <StatusBar />\n            <UserWizardScreen />\n            <DropzoneWizardScreen />\n            <NotificationArea />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </React.Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n        <PersistGate\n          persistor={persistor}\n          loading={\n            <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n              <ActivityIndicator size=\"large\" />\n            </View>\n        }>\n          <Content />\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\nimport { useFonts, Inter_400Regular, Inter_500Medium, Inter_700Bold } from \"@expo-google-fonts/inter\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  const [fontsLoaded] = Font.useFonts({\n    Inter_400Regular,\n    Inter_500Medium,\n    Inter_700Bold\n  });\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete && fontsLoaded;\n}\n","export * from \"./store\";","import { DocumentNode, useMutation, MutationOptions } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType, opts?: Omit<Partial<MutationOptions>, \"variables\"> | undefined): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = React.useCallback(async (variables: InputType, mopts?: Omit<MutationOptions, \"variables\">  | undefined): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables,\n          ...mopts\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","export const tintColorLight = '#2f95dc';\nexport const tintColorDark = '#fff';\nexport const successColor = \"#00C851\";\nexport const errorColor = \"#ff4444\";\nexport const warningColor = \"#FF8800\";\nexport const infoColor = \"#0099CC\";\n\nexport const primaryColor = \"#FF1414\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n"],"sourceRoot":""}