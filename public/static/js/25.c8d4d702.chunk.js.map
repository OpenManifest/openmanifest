{"version":3,"sources":["graphql/hooks/useNotifications.ts","node_modules/date-fns/esm/compareAsc/index.js","node_modules/date-fns/esm/differenceInCalendarMonths/index.js","node_modules/date-fns/esm/endOfDay/index.js","node_modules/date-fns/esm/endOfMonth/index.js","node_modules/date-fns/esm/isLastDayOfMonth/index.js","node_modules/date-fns/esm/differenceInMonths/index.js","node_modules/date-fns/esm/_lib/cloneObject/index.js","node_modules/date-fns/esm/_lib/assign/index.js","node_modules/date-fns/esm/formatDistance/index.js","node_modules/date-fns/esm/formatDistanceToNow/index.js","screens/authenticated/notifications/Cards/Manifested.tsx","screens/authenticated/notifications/Cards/BoardingCall.tsx","screens/authenticated/notifications/NotificationsScreen.tsx"],"names":["QUERY_DROPZONE_USER_NOTIFICATIONS","gql","compareAsc","dirtyDateLeft","dirtyDateRight","requiredArgs","arguments","dateLeft","toDate","dateRight","diff","getTime","differenceInCalendarMonths","yearDiff","getFullYear","monthDiff","getMonth","endOfDay","dirtyDate","date","setHours","endOfMonth","month","setFullYear","isLastDayOfMonth","differenceInMonths","result","sign","difference","Math","abs","getDate","setDate","setMonth","isLastMonthNotFull","Number","cloneObject","dirtyObject","target","TypeError","property","hasOwnProperty","formatDistance","dirtyBaseDate","options","length","undefined","locale","RangeError","comparison","isNaN","localizeOptions","addSuffix","Boolean","months","seconds","differenceInSeconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","round","includeSeconds","hours","days","nearestMonth","monthsSinceStartOfYear","years","floor","formatDistanceToNow","dirtyOptions","Date","now","MUTATION_MARK_AS_SEEN","ManifestedNotification","props","notification","useMutation","Item","title","description","message","style","width","left","Icon","icon","right","Caption","createdAt","Divider","BoardingCallNotification","resource","loadNumber","ProfileScreen","state","useAppSelector","global","dropzoneId","currentDropzoneId","query","useQuery","variables","pollInterval","notifications","data","dropzone","currentUser","useNotifications","loading","refetch","isFocused","useIsFocused","React","ProgressBar","color","theme","colors","accent","indeterminate","visible","ScrollableScreen","contentContainerStyle","styles","content","refreshControl","RefreshControl","refreshing","onRefresh","edges","map","edge","node","notificationType","NoResults","subtitle","StyleSheet","create","container","flex","flexGrow","paddingBottom","paddingHorizontal","divider","height"],"mappings":"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","file":"static/js/25.c8d4d702.chunk.js","sourcesContent":["import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useCurrentDropzone from \"./useCurrentDropzone\";\n\nconst QUERY_DROPZONE_USER_NOTIFICATIONS = gql`\n  query QueryNotifications($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n\n      currentUser {\n        id\n        \n        notifications {\n          edges {\n            node {\n              id\n              message\n              notificationType\n              createdAt\n\n              resource {\n                ...on Load {\n                  id\n                  loadNumber\n                  dispatchAt\n                }\n                ...on Transaction {\n                  id\n                  amount\n                  message\n                  status\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// Returns current user if no ID is provided\nexport default function useNotifications() {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n\n  const query = useQuery<Pick<Query, \"dropzone\">>(QUERY_DROPZONE_USER_NOTIFICATIONS, {\n    variables: {\n      dropzoneId,\n    },\n    pollInterval: 30000,\n  });\n\n  return {\n    ...query,\n    notifications: query?.data?.dropzone?.currentUser.notifications,\n  };\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import distanceInWords from \"../formatDistance/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsToNow ` to `formatDistanceToNow`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceToNow(new Date(2014, 6, 2), { addSuffix: true })\n *   //=> 'in 6 months'\n *   ```\n *\n * @param {Date|Number} date - the given date\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result specifies if now is earlier or later than the passed date\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * var result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * var result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * var result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * var eoLocale = require('date-fns/locale/eo')\n * var result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistanceToNow(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  return distanceInWords(dirtyDate, Date.now(), dirtyOptions);\n}","import { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { Avatar, Caption, Card, Divider, List, Paragraph } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { Load, Mutation, Notification } from '../../../../graphql/schema';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\n\n\nconst MUTATION_MARK_AS_SEEN = gql`\n  mutation MarkAsSeen(\n    $id: Int,\n  ){\n    updateNotification(input: {\n      id: $id\n      attributes: {\n        isSeen: true,\n      }\n    }) {\n      notification {\n        id\n        isSeen\n        message\n        notificationType\n        receivedBy {\n          notifications {\n            edges {\n              node {\n                id\n                message\n                isSeen\n                notificationType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface INotification {\n  notification: Notification;\n}\n\nexport default function ManifestedNotification(props: INotification) {\n  const { notification } = props;\n  const [mutationMarkAsSeen, mutation] = useMutation<Mutation>(MUTATION_MARK_AS_SEEN);\n  return (\n    <>\n    <List.Item\n      title={`Manifest`}\n      description={\n        notification.message\n      }\n      style={{ width: \"100%\"}}\n      left={\n        (props) => <List.Icon {...props} icon=\"airplane\" />\n      }\n      right={() =>\n        <Caption>\n          {formatDistanceToNow(notification.createdAt * 1000)}\n        </Caption>\n      }\n    />\n    <Divider style={{ width: \"100%\" }} />\n    </>\n  );\n}","import { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { Avatar, Caption, Card, Divider, List, Paragraph } from 'react-native-paper';\nimport gql from 'graphql-tag';\n\nimport { Load, Mutation, Notification } from '../../../../graphql/schema';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\n\n\nconst MUTATION_MARK_AS_SEEN = gql`\n  mutation MarkAsSeen(\n    $id: Int,\n  ){\n    updateNotification(input: {\n      id: $id\n      attributes: {\n        isSeen: true,\n      }\n    }) {\n      notification {\n        id\n        isSeen\n        message\n        notificationType\n        receivedBy {\n          notifications {\n            edges {\n              node {\n                id\n                message\n                isSeen\n                notificationType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface INotification {\n  notification: Notification;\n}\n\nexport default function BoardingCallNotification(props: INotification) {\n  const { notification } = props;\n  const [mutationMarkAsSeen, mutation] = useMutation<Mutation>(MUTATION_MARK_AS_SEEN);\n  return (\n    <>\n    <List.Item\n      title={`Load #${(notification.resource as Load).loadNumber} boarding call`}\n      description={\n        notification.message\n      }\n      style={{ width: \"100%\"}}\n      left={\n        (props) => <List.Icon {...props} icon=\"airplane-takeoff\" />\n      }\n      right={() =>\n        <Caption>\n          {formatDistanceToNow(notification.createdAt * 1000)}\n        </Caption>\n      }\n    />\n    <Divider style={{ width: \"100%\" }} />\n    </>\n  );\n}","import { useIsFocused } from '@react-navigation/core';\nimport { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { RefreshControl, StyleSheet } from 'react-native';\nimport { ProgressBar } from 'react-native-paper';\nimport gql from 'graphql-tag';\n\n\nimport { useAppSelector } from '../../../redux';\nimport { Load, Mutation } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport useNotifications from '../../../graphql/hooks/useNotifications';\nimport NoResults from '../../../components/NoResults';\n\nimport ManifestedCard from \"./Cards/Manifested\";\nimport BoardingCallNotification from './Cards/BoardingCall';\n\n\nconst MUTATION_MARK_AS_SEEN = gql`\n  mutation MarkAsSeen(\n    $id: Int,\n  ){\n    updateNotification(input: {\n      id: $id\n      attributes: {\n        isSeen: true,\n      }\n    }) {\n      notification {\n        id\n        isSeen\n        message\n        notificationType\n        receivedBy {\n          notifications {\n            edges {\n              node {\n                id\n                message\n                isSeen\n                notificationType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const { notifications, loading, refetch } = useNotifications();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused])\n\n  const [mutationMarkAsSeen, mutation] = useMutation<Mutation>(MUTATION_MARK_AS_SEEN);\n\n  return (\n    <>\n    {loading && <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />}\n    <ScrollableScreen contentContainerStyle={styles.content} refreshControl={<RefreshControl refreshing={loading} onRefresh={() => refetch()} />}>\n      {\n        !notifications?.edges?.length ?\n        <NoResults title=\"No notifications\" subtitle=\"Notifications will show up here\" /> :\n        notifications?.edges?.map((edge) => {\n          switch (edge.node.notificationType) {\n            case \"boarding_call\":\n              return <BoardingCallNotification notification={edge.node!} />;\n            case \"user_manifested\":\n              return <ManifestedCard notification={edge.node!} />;\n\n            default:\n              return null;\n          }\n        })\n      }\n    </ScrollableScreen>\n  </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    paddingBottom: 56,\n    paddingHorizontal: 0,\n  },\n  divider: {\n    height: 1,\n    width: '100%',\n  },\n});\n"],"sourceRoot":""}