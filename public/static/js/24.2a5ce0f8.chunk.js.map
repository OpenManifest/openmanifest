{"version":3,"sources":["screens/authenticated/manifest/ManifestGroupUserSelectScreen.tsx"],"names":["QUERY_DROPZONE_USERS","gql","UsersScreen","global","useAppSelector","state","manifest","screens","dispatch","useAppDispatch","useQuery","variables","dropzoneId","Number","currentDropzoneId","search","searchText","data","loading","navigation","useNavigation","isFocused","useRoute","useIsFocused","React","isSearchVisible","actions","setSearchVisible","indeterminate","color","theme","colors","accent","visible","contentContainerStyle","paddingHorizontal","dropzone","dropzoneUsers","edges","length","title","subtitle","map","edge","Item","style","width","key","node","id","user","name","description","role","left","image","Image","source","uri","alignSelf","marginHorizontal","size","Icon","icon","right","Android","status","selectedUsers","includes","onPress","setSelected","find","filter","styles","fab","small","forms","manifestGroup","setDropzoneUsers","setParams","select","navigate","label","StyleSheet","create","container","flex","position","margin","bottom","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/24.2a5ce0f8.chunk.js","sourcesContent":["import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Avatar, Checkbox, Divider, FAB, List, ProgressBar } from 'react-native-paper';\n\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { DropzoneUser, Query } from '../../../graphql/schema';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search, licensed: true) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUsersRouteParams{\n  key: string,\n  name: string,\n  params: {\n    select?: boolean;\n    loadId?: number;\n    onSelect?(selectedUsers?: DropzoneUser[]): void;\n  }\n}\nexport default function UsersScreen() {\n  const global = useAppSelector(state => state.global);\n  const manifest = useAppSelector(state => state.screens.manifest);\n  const dispatch = useAppDispatch();\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzoneId),\n      search: manifest.searchText,\n    }\n  });\n\n  const navigation = useNavigation();\n  const route = useRoute<IUsersRouteParams>();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (manifest.isSearchVisible) {\n      dispatch(actions.screens.manifest.setSearchVisible(false));\n    }\n  }, [isFocused]);\n\n\n  return (\n    <>\n    <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 0 }}>\n      \n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n        <>\n        <List.Item\n          style={{ width: \"100%\"}}\n          key={`user-${edge?.node?.id}`}\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() =>\n            !edge?.node?.user?.image\n              ? <List.Icon icon=\"account\" />\n              : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n          }\n          right={() => \n            <Checkbox.Android\n              status={\n                manifest.selectedUsers?.map(({ id }) => id).includes(edge!.node!.id)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          onPress={\n              () => dispatch(\n                actions.screens.manifest.setSelected(\n                  manifest.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                  ? manifest.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                  : [...manifest.selectedUsers, edge!.node!],\n                )\n              )\n          }\n        />\n        <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n        </>\n      )}\n\n    </ScrollableScreen>\n    <FAB\n      style={styles.fab}\n      small\n      visible={manifest.selectedUsers.length > 0}\n      icon=\"check\"\n      onPress={() => {\n        dispatch(actions.forms.manifestGroup.setDropzoneUsers(manifest.selectedUsers));\n        navigation.setParams({ select: false });\n        dispatch(actions.screens.manifest.setSearchVisible(false));\n        dispatch(actions.screens.manifest.setSelected([]));\n        navigation.navigate(\"ManifestGroupScreen\");\n      }}\n      label=\"Next\"\n    />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}