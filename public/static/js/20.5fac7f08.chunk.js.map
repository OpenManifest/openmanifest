{"version":3,"sources":["components/forms/rig_inspection_template/RigInspectionItem.tsx","components/forms/rig_inspection_template/RigInspectionTemplateForm.tsx","screens/authenticated/settings/RigInspectionTemplateScreen.tsx"],"names":["RigInspectionItem","props","canInspect","useRestriction","Permission","ActAsRigInspector","config","valueType","style","flex","mode","disabled","marginVertical","value","onChangeText","text","onChange","label","type","description","Item","title","right","Android","status","onPress","keyboardType","timestamp","Number","time","toString","RigInspectionTemplateForm","state","useAppSelector","forms","rigInspectionTemplate","React","newItem","setNewItem","fabOpen","setFabOpen","dispatch","useAppDispatch","fields","map","item","index","View","display","flexDirection","alignItems","flexGrow","onTouchEnd","IconButton","icon","actions","setFields","filter","_","i","Divider","Portal","Dialog","visible","Title","Content","TextInput","placeholder","Checkbox","isRequired","Actions","Button","undefined","field","idx","FAB","Group","open","onStateChange","StyleSheet","create","marginBottom","QUERY_RIG_INSPECTION","gql","MUTATION_UPDATE_FORM","RigInspectionTemplateScreen","currentDropzone","useCurrentDropzone","useQuery","variables","dropzoneId","dropzone","id","data","canEdit","loading","UpdateFormTemplate","useMutation","mutationUpdateForm","mutation","setOpen","JSON","stringify","updateForm","a","async","formId","definition","notifications","showSnackbar","message","variant","original","ScrollableScreen","Card","width"],"mappings":"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","file":"static/js/20.5fac7f08.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Checkbox, HelperText, List, TextInput } from \"react-native-paper\";\nimport { Permission } from \"../../../graphql/schema.d\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport { FieldItem } from \"./slice\";\n\ninterface IFormItemItem {\n  value: string | number | boolean;\n  onChange(value: FieldItem): void;\n  config: FieldItem;\n}\n\nexport default function RigInspectionItem(props: IFormItemItem) {\n  const canInspect = useRestriction(Permission.ActAsRigInspector);\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          mode=\"outlined\"\n          disabled={!canInspect}\n          style={{ marginVertical: 8 }}\n          value={props.value as string}\n          onChangeText={(text) => props.onChange({ ...props.config, value: text})}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <List.Item\n        title={props.config.label || \"\"}\n        disabled={!canInspect}\n        description={props.config.description}\n        style={{ marginVertical: 8 }}\n        right={() =>\n          <Checkbox.Android\n            status={\n              !!props.value\n                ? \"checked\"\n                : \"unchecked\"\n            }\n          />\n        }\n        onPress={\n          () => props.onChange({ ...props.config, value: !props.value as boolean})\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          disabled={!canInspect}\n          value={props.value as string}\n          mode=\"outlined\"\n          onChangeText={(text) => props.onChange({ ...props.config, value: text as string })}\n          label={props.config.label || \"\"}\n          keyboardType=\"number-pad\"\n          style={{ marginVertical: 8 }}\n\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <DatePicker\n          disabled={!canInspect}\n          timestamp={Number(props.value)}\n          onChange={(time) => props.onChange({ ...props.config, value: time.toString() as string })}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  }\n  \n  return null;\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { FieldItem } from \"./slice\";\nimport RigInspectionItem from './RigInspectionItem';\nimport { Button, Checkbox, Dialog, Divider, FAB, IconButton, Portal, TextInput } from 'react-native-paper';\n\n\n\n\nexport default function RigInspectionTemplateForm() {\n  const state = useAppSelector(state => state.forms.rigInspectionTemplate);\n  const [newItem, setNewItem] = React.useState<Partial<FieldItem> & { index?: number } | null>(null);\n  const [fabOpen, setFabOpen] = React.useState(false);\n\n  const dispatch = useAppDispatch();\n  \n\n  return ( \n    <>\n      {\n        state.fields?.map((item, index) => {\n          return (\n            <>\n              <View style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\"}}>\n                <View style={{ flexGrow: 1 }} onTouchEnd={() => setNewItem({ ...item, index })}>\n                  <RigInspectionItem\n                    config={item}\n                    value={item?.value || \"\"}\n                    onChange={() =>\n                      null\n                    }\n                  />\n                </View>\n                <IconButton icon=\"delete\" onPress={() => dispatch(actions.forms.rigInspectionTemplate.setFields(state.fields.filter((_, i) => i !== index)))} />\n              </View>\n              <Divider />\n            </>\n          )\n        })\n      }\n      <Portal>\n        <Dialog visible={!!newItem}>\n          <Dialog.Title>New field</Dialog.Title>\n          <Dialog.Content>\n            <TextInput\n              label=\"Name\"\n              mode=\"outlined\"\n              value={newItem?.label}\n              onChangeText={(text) => setNewItem({ ...newItem, label: text })}\n            />\n\n            <TextInput\n              label=\"Description\"\n              placeholder=\"optional\"\n              mode=\"outlined\"\n              value={newItem?.description}\n              onChangeText={(text) => setNewItem({ ...newItem, description: text })}\n            />\n\n            <Checkbox.Item\n              label=\"This is a required field\"\n              mode=\"android\"\n              onPress={() => setNewItem({ ...newItem, isRequired: !newItem?.isRequired })}\n              status={newItem?.isRequired ? \"checked\" : \"unchecked\"}\n            />\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={() => setNewItem(null)}>\n              Cancel\n            </Button>\n            <Button\n              onPress={() => {\n                if (newItem?.index !== undefined) {\n                  // If index was provided, replace existing field at that index\n                  dispatch(actions.forms.rigInspectionTemplate.setFields(state.fields.map((field, idx) => idx === newItem.index ? newItem : field) as FieldItem[]));\n                } else {\n                  dispatch(actions.forms.rigInspectionTemplate.setFields([...state.fields, newItem as FieldItem]));\n                }\n                setNewItem(null);\n              }}\n            >\n              Save\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n        <FAB.Group\n          open={fabOpen}\n          visible\n          icon={fabOpen ? 'close' : 'plus'}\n          actions={[\n            { icon: 'pencil', label: \"Text\", onPress: () => setNewItem({ valueType: \"string\" }), },\n            {\n              icon: 'calendar',\n              label: 'Date',\n              onPress: () => setNewItem({ valueType: \"date\" }),\n            },\n            {\n              icon: 'counter',\n              label: 'Number',\n              onPress: () => setNewItem({ valueType: \"integer\" }),\n            },\n            {\n              icon: 'checkbox-marked-circle-outline',\n              label: 'Checkbox',\n              onPress: () => setNewItem({ valueType: \"boolean\" }),\n            },\n          ]}\n          onStateChange={({ open }) => setFabOpen(open)}\n        />\n      </Portal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card } from 'react-native-paper';\nimport RigInspectionTemplateForm from \"../../../components/forms/rig_inspection_template/RigInspectionTemplateForm\";\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport { Mutation, Permission, Query } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\n\nconst QUERY_RIG_INSPECTION = gql`\n  query RigInspection($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      rigInspectionTemplate {\n        id\n        name\n        definition\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_FORM = gql`\n  mutation UpdateRigInspectionTemplate(\n    $dropzoneId: Int,\n    $formId: Int,\n    $definition: String\n  ) {\n    updateFormTemplate(input: {\n      id: $formId\n      attributes: {\n        dropzoneId: $dropzoneId,\n        definition: $definition\n      }\n    }) {\n      formTemplate {\n        id\n        name\n        definition\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\n\n\nexport default function RigInspectionTemplateScreen() {\n  const state = useAppSelector(state => state.forms.rigInspectionTemplate);\n  const currentDropzone = useCurrentDropzone();\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_RIG_INSPECTION, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n    }\n  });\n\n  const canEdit = useRestriction(Permission.UpdateFormTemplate);\n  const [mutationUpdateForm, mutation] = useMutation<Mutation>(MUTATION_UPDATE_FORM);\n\n  React.useEffect(() => {\n    if (data?.dropzone?.rigInspectionTemplate) {\n      \n      dispatch(\n        actions.forms.rigInspectionTemplate.setOpen(\n          data.dropzone.rigInspectionTemplate\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.rigInspectionTemplate)]);\n\n  const updateForm = React.useCallback(async () => {\n    try {\n      await mutationUpdateForm({\n          variables: {\n            formId: Number(data?.dropzone.rigInspectionTemplate!.id),\n            dropzoneId: Number(data?.dropzone?.id),\n            definition: JSON.stringify(state.fields),\n        }\n      });\n      dispatch(actions.notifications.showSnackbar({ message: \"Template saved\", variant: \"success\" }));\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(state.fields), state?.original?.id, currentDropzone?.dropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n\n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title=\"Rig Inspection Form Template\" />\n\n        <Card.Content>\n          <RigInspectionTemplateForm />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button\n            disabled={!canEdit}\n            mode=\"contained\"\n            loading={mutation.loading}\n            onPress={() => updateForm()}\n            style={{ width: \"100%\"}}\n          >\n            Save template\n          </Button>\n        </Card.Actions>\n      </Card>\n    </ScrollableScreen>\n  );\n}\n\n"],"sourceRoot":""}