{"version":3,"sources":["graphql/hooks/useDropzoneUser.ts","components/forms/rig_inspection_template/RigInspectionItem.tsx","components/forms/rig_inspection/RigInspectionForm.tsx","screens/authenticated/rig/RigInspectionScreen.tsx"],"names":["QUERY_DROPZONE_USER","gql","useDropzoneUser","id","dropzoneId","useAppSelector","state","global","currentDropzoneId","currentDropzone","useCurrentDropzone","dropzoneUser","useQuery","variables","dropzoneUserId","Number","data","dropzone","currentUser","RigInspectionItem","props","canInspect","useRestriction","Permission","ActAsRigInspector","config","valueType","style","flex","mode","disabled","marginVertical","value","onChangeText","text","onChange","label","type","description","Item","title","right","Android","status","onPress","keyboardType","timestamp","time","toString","RigInspectionForm","forms","rigInspection","dispatch","useAppDispatch","fields","map","item","index","key","actions","setField","QUERY_RIG_INSPECTIONS","MUTATION_CREATE_RIG_INSPECTION","RigInspectionScreen","useRoute","params","rig","refetch","loading","isFocused","useIsFocused","React","useMutation","mutationCreateRigInspection","mutation","navigation","useNavigation","rigInspections","some","inspection","definition","find","setFields","setOk","isOk","rigInspectionTemplate","JSON","stringify","createRigInspection","a","async","rigId","ok","update","client","result","readQuery","query","currentDz","QUERY_DROPZONE","earliestTimestamp","startOfDay","Date","getTime","writeQuery","filter","ins","newData","console","log","notifications","showSnackbar","message","variant","reset","goBack","ScrollableScreen","KeyboardAvoidingView","behavior","width","flexGrow","maxWidth","backgroundColor","Card","Title","Content","make","model","serial","repackExpiresAt","format","name","Divider","Checkbox","Actions","Button"],"mappings":"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","file":"static/js/19.dfea0f8d.chunk.js","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useCurrentDropzone from \"./useCurrentDropzone\";\n\nexport const QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        permissions\n\n        role {\n          id\n          name\n        }\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n        notifications {\n          edges {\n            node {\n              id\n              message\n              notificationType\n              createdAt\n            }\n          }\n        }\n\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              message\n              amount\n              createdAt\n            }\n          }\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          image\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n            federation {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// Returns current user if no ID is provided\nexport default function useDropzoneUser(id?: number) {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const currentDropzone = useCurrentDropzone();\n\n  const dropzoneUser = useQuery<Pick<Query, \"dropzone\">>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: dropzoneId,\n      dropzoneUserId: id || Number(currentDropzone?.data?.dropzone?.currentUser?.id),\n    }\n  });\n\n  return {\n    ...dropzoneUser,\n    dropzoneUser: !id || id === Number(currentDropzone?.data?.dropzone?.currentUser?.id)\n      ? currentDropzone?.data?.dropzone?.currentUser\n      : dropzoneUser?.data?.dropzone?.dropzoneUser,\n  };\n}","import * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Checkbox, HelperText, List, TextInput } from \"react-native-paper\";\nimport { Permission } from \"../../../graphql/schema.d\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport { FieldItem } from \"./slice\";\n\ninterface IFormItemItem {\n  value: string | number | boolean;\n  onChange(value: FieldItem): void;\n  config: FieldItem;\n}\n\nexport default function RigInspectionItem(props: IFormItemItem) {\n  const canInspect = useRestriction(Permission.ActAsRigInspector);\n\n  if (props.config?.valueType && props.config?.valueType === \"string\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          mode=\"outlined\"\n          disabled={!canInspect}\n          style={{ marginVertical: 8 }}\n          value={props.value as string}\n          onChangeText={(text) => props.onChange({ ...props.config, value: text})}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"boolean\") {\n    return (\n      <List.Item\n        title={props.config.label || \"\"}\n        disabled={!canInspect}\n        description={props.config.description}\n        style={{ marginVertical: 8 }}\n        right={() =>\n          <Checkbox.Android\n            status={\n              !!props.value\n                ? \"checked\"\n                : \"unchecked\"\n            }\n          />\n        }\n        onPress={\n          () => props.onChange({ ...props.config, value: !props.value as boolean})\n        }\n      />\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"integer\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <TextInput\n          disabled={!canInspect}\n          value={props.value as string}\n          mode=\"outlined\"\n          onChangeText={(text) => props.onChange({ ...props.config, value: text as string })}\n          label={props.config.label || \"\"}\n          keyboardType=\"number-pad\"\n          style={{ marginVertical: 8 }}\n\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  } else if (props.config?.valueType && props.config?.valueType === \"date\") {\n    return (\n      <View style={{ flex: 1 }}>\n        <DatePicker\n          disabled={!canInspect}\n          timestamp={Number(props.value)}\n          onChange={(time) => props.onChange({ ...props.config, value: time.toString() as string })}\n          label={props.config.label || \"\"}\n        />\n        <HelperText type=\"info\">{props.config.description || \"No description\"}</HelperText>\n      </View>\n    )\n  }\n  \n  return null;\n}","import * as React from 'react';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport RigInspectionItem from '../rig_inspection_template/RigInspectionItem';\n\n\n\nexport default function RigInspectionForm() {\n  const state = useAppSelector(state => state.forms.rigInspection);\n  const dispatch = useAppDispatch();\n  \n  return ( \n    <>\n      {\n        state.fields.map((item, index) => {\n          return (\n            <RigInspectionItem\n              key={index}\n              config={item}\n              value={item?.value || \"\"}\n              onChange={(value) =>\n                dispatch(\n                  actions.forms.rigInspection.setField([index, value])\n                )\n              }\n            />\n          )\n        })\n      }\n    </>\n  );\n}\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { format, startOfDay } from 'date-fns';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Button, Card, Checkbox, Divider, List } from 'react-native-paper';\nimport RigInspectionForm from \"../../../components/forms/rig_inspection/RigInspectionForm\";\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport { Mutation, Query, Rig, Permission } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { QUERY_DROPZONE_USER } from '../../../graphql/hooks/useDropzoneUser';\nimport { QUERY_DROPZONE } from '../../../graphql/hooks/useCurrentDropzone';\nimport { KeyboardAvoidingView } from 'react-native';\n\nconst QUERY_RIG_INSPECTIONS = gql`\n  query RigInspections($dropzoneUserId: Int!, $dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n\n      rigInspectionTemplate {\n        id\n        name\n        definition\n      }\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        rigInspections {\n          id\n          isOk\n          definition\n          rig {\n            id\n          }\n          inspectedBy {\n            id\n            user {\n              id\n              name\n            }\n          }\n          formTemplate {\n            id\n            name\n            definition\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_CREATE_RIG_INSPECTION = gql`\n  mutation CreateRigInspection(\n    $dropzoneId: Int,\n    $rigId: Int,\n    $isOk: Boolean,\n    $definition: String,\n  ) {\n    createRigInspection(input: {\n      attributes: {\n        dropzoneId: $dropzoneId,\n        rigId: $rigId,\n        isOk: $isOk,\n        definition: $definition,\n      }\n    }) {\n      rigInspection {\n        id\n        isOk\n        definition\n        dropzoneUser {\n          id\n          rigInspections {\n            id\n            isOk\n            rig {\n              id\n            }\n            inspectedBy {\n              id\n              user {\n                id\n                name\n              }\n            }\n          }\n        }\n        inspectedBy {\n          id\n          user {\n            id\n            name\n          }\n        }\n        rig {\n          id\n          make\n          model\n        }\n        \n        formTemplate {\n          id\n          definition\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function RigInspectionScreen() {\n  const state = useAppSelector(state => state.forms.rigInspection);\n  const currentDropzone = useCurrentDropzone();\n  const dispatch = useAppDispatch();\n  \n  const route = useRoute<{ key: string, name: string, params: { rig: Rig, dropzoneUserId: number }}>();\n  const { rig, dropzoneUserId } = route.params;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_RIG_INSPECTIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n      dropzoneUserId: dropzoneUserId,\n    }\n  });\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    refetch();\n  }, [isFocused])\n\n  const canInspect = useRestriction(Permission.ActAsRigInspector);\n  const [mutationCreateRigInspection, mutation] = useMutation<Mutation>(MUTATION_CREATE_RIG_INSPECTION);\n  const navigation = useNavigation();\n  React.useEffect(() => {\n\n    const hasExistingRigInspection = data?.dropzone?.dropzoneUser?.rigInspections?.some((inspection) => inspection.rig?.id.toString() === rig.id.toString() && inspection.definition);\n\n    if (hasExistingRigInspection) {\n      const inspection = data?.dropzone?.dropzoneUser?.rigInspections?.find((inspection) => inspection.rig?.id === rig.id);\n      \n      dispatch(\n        actions.forms.rigInspection.setFields(\n          inspection!.definition || \"{}\"\n        )\n      );\n\n      dispatch(\n        actions.forms.rigInspection.setOk(\n          inspection!.isOk\n        )\n      );\n    } else {\n      dispatch(\n        actions.forms.rigInspection.setFields(\n          data?.dropzone.rigInspectionTemplate?.definition || '[]',\n        )\n      )\n    }\n  }, [JSON.stringify(data?.dropzone?.dropzoneUser?.rigInspections), data?.dropzone?.rigInspectionTemplate?.definition]);\n\n  const createRigInspection = React.useCallback(async () => {\n    try {\n      const result = await mutationCreateRigInspection({\n        variables: {\n          dropzoneId: Number(currentDropzone?.dropzone?.id),\n          rigId: Number(rig.id),\n          definition: JSON.stringify(state.fields),\n          isOk: !!state.ok,\n        },\n        update: async (client, { data }) => {\n\n          const { rigInspection } = data?.createRigInspection;\n          const result = client.readQuery<Query>({\n            query: QUERY_DROPZONE_USER,\n            variables: {\n              dropzoneId: Number(currentDropzone?.dropzone?.id),\n              dropzoneUserId: Number(rigInspection?.dropzoneUser?.id),\n            }\n          });\n\n          const currentDz = client.readQuery<Query>({\n            query: QUERY_DROPZONE,\n            variables: {\n              dropzoneId: Number(currentDropzone?.dropzone?.id),\n              earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n            }\n          });\n\n          if (currentDz?.dropzone?.currentUser?.id === rigInspection?.dropzoneUser?.id) {\n            client.writeQuery({\n              query: QUERY_DROPZONE,\n              variables: {\n                dropzoneId: Number(currentDropzone?.dropzone?.id),\n                earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n              },\n              data: {\n                ...currentDz,\n                dropzone: {\n                  ...currentDz?.dropzone,\n                  currentUser: {\n                    ...currentDz?.dropzone?.currentUser,\n                    rigInspections: [\n                      ...(currentDz.dropzone?.currentUser?.rigInspections || []).filter((ins) => ins.id !== data?.createRigInspection?.rigInspection?.id),\n                      rigInspection,\n                    ]\n                  }\n                }\n              }\n            })\n          } \n\n          const newData = {\n            ...result.dropzone,\n            dropzoneUser: {\n              ...result.dropzone?.dropzoneUser,\n              rigInspections: [\n                ...(result.dropzone?.dropzoneUser?.rigInspections || []).filter((ins) => ins.id !== data?.createRigInspection?.rigInspection?.id),\n                rigInspection,\n              ]\n            }\n          };\n\n\n          client.writeQuery({\n            query: QUERY_DROPZONE_USER,\n            variables: {\n              dropzoneId: Number(currentDropzone?.dropzone?.id),\n              dropzoneUserId: Number(data?.createRigInspection?.rigInspection?.dropzoneUser?.id),\n            },\n            data: newData\n          });\n          return {\n            data: newData,\n          };\n        }\n      });\n\n      console.log(result?.data?.createRigInspection);\n\n      dispatch(\n        actions.notifications.showSnackbar({ message: \"Rig inspection saved\", variant: \"success\" })\n      );\n      dispatch(actions.forms.rigInspection.reset());\n      navigation.goBack();\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    }\n  }, [JSON.stringify(state.fields), state.ok, currentDropzone?.dropzone?.id]);\n\n  return (\n    <ScrollableScreen>\n      <KeyboardAvoidingView\n        behavior=\"position\"\n        style={{\n          width: \"100%\",\n          flexGrow: 1,\n          maxWidth: 400,\n          backgroundColor: \"transparent\"\n      }}\n      >\n      <Card style={{ width: \"100%\", marginVertical: 16 }}>\n        <Card.Title title=\"Rig\" />\n        <Card.Content>\n          <List.Item\n            title=\"Make\"\n            description={rig.make}\n          />\n          <List.Item\n            title=\"Model\"\n            description={rig.model}\n          />\n          <List.Item\n            title=\"Serial\"\n            description={rig.serial}\n          />\n          <List.Item\n            title=\"Repack due\"\n            description={\n              rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"\n            }\n          />\n        </Card.Content>\n      </Card>\n\n      \n      <Card style={{ width: \"100%\"}}>\n        <Card.Title title={data?.dropzone?.rigInspectionTemplate?.name} />\n\n        <Card.Content>\n          <RigInspectionForm />\n\n          <Divider />\n          <Checkbox.Item\n            mode=\"android\"\n            label=\"This rig is OK to jump\"\n            onPress={() => dispatch(actions.forms.rigInspection.setOk(!state.ok))}\n            status={state.ok ? \"checked\" : \"unchecked\"}\n          />\n        </Card.Content>\n\n        <Card.Actions>\n          <Button\n            disabled={!canInspect || JSON.stringify(state.fields) === data?.dropzone?.rigInspectionTemplate?.definition}\n            mode=\"contained\"\n            onPress={() => createRigInspection()}\n            loading={mutation.loading}\n            style={{ width: \"100%\"}}\n          >\n            Mark as inspected\n          </Button>\n        </Card.Actions>\n      </Card>\n      </KeyboardAvoidingView>\n    </ScrollableScreen>\n  );\n}\n\n"],"sourceRoot":""}