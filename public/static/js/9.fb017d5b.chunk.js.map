{"version":3,"sources":["DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","components/layout/DialogOrSheet.web.tsx","components/layout/SwipeActions.tsx","components/forms/plane/PlaneForm.tsx","components/dialogs/Plane.tsx","screens/authenticated/planes/PlanesScreen.tsx"],"names":["DataTableCell","rest","style","styles","numeric","numberOfLines","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent","DataTableHeader","borderBottomColor","color","theme","header","height","paddingHorizontal","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","content","pointerEvents","DataTable","width","DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","colors","accent","Title","Content","ScrollArea","Actions","onClose","create","button","borderRadius","padding","contentContainer","paddingBottom","sheet","elevation","backgroundColor","flexGrow","display","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","SwipeActions","rightAction","ref","enabled","renderRightActions","progress","dragX","scale","interpolate","translateX","close","View","Text","useNativeAnimations","DropzoneForm","forms","plane","dispatch","useAppDispatch","field","mode","error","fields","value","onChangeText","newValue","actions","setField","type","registration","hours","toString","placeholder","Number","minSlots","keyboardType","maxSlots","marginBottom","MUTATION_UPDATE_PLANE","gql","MUTATION_CREATE_PLANE","CreatePlaneScreen","currentDropzone","useCurrentDropzone","useMutation","mutationCreatePlane","mutationUpdatePlane","update","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","nextMaintenanceHours","mutation","original","id","variables","dropzoneId","dropzone","result","payload","data","updatePlane","createPlane","fieldErrors","forEach","message","errors","notifications","showSnackbar","variant","reset","snapPoints","PlaneForm","QUERY_PLANES","MUTATION_DELETE_PLANE","PlanesScreen","useQuery","currentDropzoneId","refetch","deletePlane","isFocused","useIsFocused","canDeletePlane","useRestriction","Permission","DeletePlane","canCreatePlane","CreatePlane","ScrollableScreen","refreshControl","RefreshControl","refreshing","onRefresh","ProgressBar","planes","NoResults","subtitle","Header","map","Row","setOpen","Cell","FAB","fab","small","position","margin","bottom","empty"],"mappings":"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","file":"static/js/9.fb017d5b.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\n\nexport interface ISwipeAction {\n  label: string;\n  \n  backgroundColor?: string;\n  onPress(): void;\n}\nexport interface ISwipeActions {\n  rightAction?: ISwipeAction;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport default function SwipeActions(props: ISwipeActions) {\n  const { children, rightAction, disabled } = props;\n\n  const ref = React.useRef<any>();\n  const rightActions = (progress: Animated.AnimatedInterpolation, dragX: Animated.AnimatedInterpolation) => {\n    const scale = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1.0, 0]\n    })\n\n    const translateX = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [0, 10]\n    });\n\n    return (\n        <TouchableOpacity\n          onPress={() => {\n            rightAction?.onPress();\n            ref?.current?.close();\n          }}\n        >\n          <Animated.View\n            style={{\n              flexGrow: 1,\n              backgroundColor: rightAction?.backgroundColor,\n              justifyContent: 'center',\n              height: \"100%\",\n              width: 75,\n              transform: [{ translateX }]\n            }}>\n            <Animated.Text\n              style={{\n                color: 'white',\n                paddingHorizontal: 10,\n                fontWeight: '600',\n                transform: [{ scale }]\n              }}>\n              {rightAction?.label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableOpacity>\n    )\n   }\n  return (\n    <Swipeable ref={ref} enabled={!disabled} renderRightActions={rightActions} useNativeAnimations>\n      { children }\n    </Swipeable>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.forms.plane);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { actions, useAppSelector, useAppDispatch,  } from '../../redux';\n\nimport { Mutation } from '../../graphql/schema';\nimport PlaneForm from '../forms/plane/PlaneForm';\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\nconst MUTATION_UPDATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        ...plane,\n\n        dropzone {\n          id\n          planes {\n            ...plane\n          }\n        }\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n  fragment plane on Plane {\n    id\n    name\n    registration\n    minSlots\n    maxSlots\n    hours\n    nextMaintenanceHours\n\n    dropzone {\n      id\n      name\n      planes {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n      }\n    }\n  }\n`;\n\ninterface IPlaneDialogProps {\n  open: boolean;\n  onClose(): void;\n}\n\nexport default function CreatePlaneScreen(props: IPlaneDialogProps) {\n  const { open, onClose } = props;\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.plane);\n  const dispatch = useAppDispatch();\n\n\n  const [mutationCreatePlane, create] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n  const [mutationUpdatePlane, update] = useMutation<Mutation>(MUTATION_UPDATE_PLANE);\n\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.plane.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.plane.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.plane.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    const mutation = state.original?.id\n      ? mutationUpdatePlane\n      : mutationCreatePlane;\n\n    if (validate()) {\n      try {\n        const result = await mutation({\n          variables: {\n            ...state.original?.id ? { id: Number(state.original.id) } : { dropzoneId: Number(currentDropzone?.dropzone?.id), },\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n\n        const payload = state.original?.id\n          ? result?.data?.updatePlane\n          : result?.data?.createPlane;\n\n        if (payload?.fieldErrors?.length) {\n          payload.fieldErrors.forEach(({ field, message }) => {\n            switch (field) {\n              case \"max_slots\":\n                return dispatch(actions.forms.plane.setFieldError([\"maxSlots\", message]));\n              case \"name\":\n                return dispatch(actions.forms.plane.setFieldError([\"name\", message]));\n              case \"min_slots\":\n                return dispatch(actions.forms.plane.setFieldError([\"minSlots\", message]));\n              case \"hours\":\n                return dispatch(actions.forms.plane.setFieldError([\"hours\", message]));\n              case \"next_maintenance_hours\":\n                return dispatch(actions.forms.plane.setFieldError([\"nextMaintenanceHours\", message]));\n              case \"registration\":\n                return dispatch(actions.forms.plane.setFieldError([\"registration\", message]));\n            }\n          })\n          return;\n        }\n\n        if (payload.errors?.length) {\n          payload.errors.forEach((message) =>\n          dispatch(\n            actions.notifications.showSnackbar({ message, variant: \"error\" })\n          ));\n        }\n        \n        if (payload?.plane) {\n          const plane = payload?.plane;\n          dispatch(\n            actions.notifications.showSnackbar({ message: `Added plane ${plane.name}`, variant: \"success\" })\n          );\n          onClose();\n          dispatch(\n            actions.forms.plane.reset()\n          );\n        }\n      } catch (error) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreatePlane]);\n\n  return (\n    <DialogOrSheet\n      title={ state.original?.id ? \"Edit aircraft\" : \"New aircraft\"}\n      open={open}\n      snapPoints={[0, 580]}\n      buttonLabel=\"Save\"\n      buttonAction={onSave}\n      loading={create.loading || update.loading}\n      onClose={() => {\n        onClose();\n        dispatch(actions.forms.plane.reset());\n      }}\n    >\n        <PlaneForm />\n    </DialogOrSheet>\n  );\n}\n","import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, RefreshControl } from 'react-native';\nimport { FAB, DataTable, ProgressBar } from 'react-native-paper';\nimport { Mutation, Permission, Query } from \"../../../graphql/schema.d\";\n\nimport { useIsFocused } from '@react-navigation/core';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport PlaneDialog from '../../../components/dialogs/Plane';\nimport useRestriction from '../../../hooks/useRestriction';\nimport SwipeActions from '../../../components/layout/SwipeActions';\n\n\nconst QUERY_PLANES = gql`\n  query QueryPlanes(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      planes {\n        id\n        name\n        registration\n        hours\n        minSlots\n        maxSlots\n        nextMaintenanceHours\n        createdAt\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_PLANE = gql`\nmutation DeletePlane($id: Int!) {\n  deletePlane(input: { id: $id }) {\n    errors\n    plane {\n      id\n      dropzone {\n        id\n        planes {\n          name\n          registration\n          hours\n          minSlots\n          maxSlots\n          nextMaintenanceHours\n          createdAt\n        }\n      }\n    }\n  }\n}\n`;\nexport default function PlanesScreen() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.forms.plane);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(global.currentDropzoneId)\n    }\n  });\n\n  const [deletePlane, mutation] = useMutation<Mutation>(MUTATION_DELETE_PLANE);\n  const dispatch = useAppDispatch();\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n \n\n  const canDeletePlane = useRestriction(Permission.DeletePlane);\n  const canCreatePlane = useRestriction(Permission.CreatePlane);\n\n  return (\n    <>\n    <ScrollableScreen refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch} />}>\n      <ProgressBar visible={loading} color={global.theme.colors.accent} />\n        \n\n          {\n            data?.dropzone?.planes?.length ? null : (\n              <NoResults\n                title=\"No planes?\"\n                subtitle=\"You need to have at least one plane to manifest loads\"\n              />\n            )\n          }\n\n          { !data?.dropzone?.planes?.length ? null : (\n            <DataTable>\n              <DataTable.Header>\n                <DataTable.Title>Name</DataTable.Title>\n                <DataTable.Title numeric>Registration</DataTable.Title>\n                <DataTable.Title numeric>Slots</DataTable.Title>\n              </DataTable.Header>\n              {\n                data?.dropzone?.planes?.map((plane) =>\n                <SwipeActions\n                  disabled={!canDeletePlane}\n                  rightAction={{\n                    label: \"Delete\",\n                    backgroundColor: \"red\",\n                    onPress: async () => {\n                      const { data: result } = await deletePlane({ variables: { id: Number(plane.id )}});\n                      \n                      if (result?.deletePlane?.errors?.length) {\n                        dispatch(\n                          actions.notifications.showSnackbar({\n                            message: result.deletePlane.errors[0],\n                            variant: \"error\"\n                          })\n                        );\n                      }\n                    }\n                  }}>\n                    <DataTable.Row\n                      pointerEvents=\"none\"\n                      onPress={() => {\n                        dispatch(actions.forms.plane.setOpen(plane));\n                      }}\n                    >\n                      <DataTable.Cell>{plane.name}</DataTable.Cell>\n                      <DataTable.Cell numeric>{plane.registration}</DataTable.Cell>\n                      <DataTable.Cell numeric>\n                        {plane.maxSlots}\n                      </DataTable.Cell>\n                    </DataTable.Row>\n                  </SwipeActions>\n              )}\n            </DataTable>\n          )}\n          \n      <FAB\n        style={styles.fab}\n        visible={canCreatePlane}\n        small\n        icon=\"plus\"\n        onPress={() => dispatch(actions.forms.plane.setOpen(true))}\n        label=\"New plane\"\n      />\n    </ScrollableScreen>\n    <PlaneDialog\n      open={state.open}\n      onClose={() => dispatch(actions.forms.plane.setOpen(false))}\n    />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}