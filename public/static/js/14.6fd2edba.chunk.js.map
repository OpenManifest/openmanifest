{"version":3,"sources":["components/layout/DialogOrSheet.web.tsx","graphql/hooks/useDropzoneUser.ts","components/input/dropdown_select/RoleSelect.tsx","components/forms/ghost/GhostForm.tsx","graphql/hooks/useMutationCreateGhost.ts","components/dialogs/Ghost.tsx","screens/authenticated/users/UsersScreen.tsx"],"names":["DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","style","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","justifyContent","onPress","onClose","StyleSheet","create","button","width","borderRadius","padding","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","height","display","flexDirection","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","QUERY_DROPZONE_USER","gql","useDropzoneUser","id","dropzoneId","currentDropzoneId","currentDropzone","useCurrentDropzone","dropzoneUser","useQuery","variables","dropzoneUserId","Number","data","dropzone","currentUser","QUERY_ROLES","RoleSelect","React","isMenuOpen","setMenuOpen","refetch","Subheader","paddingLeft","onDismiss","disabled","anchor","Item","left","Icon","icon","undefined","value","name","replace","toUpperCase","description","required","roles","map","role","onSelect","SlotForm","forms","ghost","dispatch","useAppDispatch","original","fields","exitWeight","actions","setField","toString","license","setFederation","federation","TextInput","styles","field","mode","label","error","onChangeText","newValue","HelperText","type","email","keyboardType","right","Affix","text","Divider","View","FederationSelect","LicenseChipSelect","federationId","phone","flex","paddingTop","marginBottom","ticketAddons","MUTATION_CREATE_GHOST","createMutation","getPayload","result","createGhost","validates","isRequired","isNumeric","isEmail","roleId","fieldErrorMap","exit_weight","CreateGhostDialog","onSuccess","mutationCreateGhost","useMutationCreateGhost","payload","onFieldError","setFieldError","console","log","onError","notifications","showSnackbar","message","variant","onSave","a","async","mutate","licenseId","reset","JSON","stringify","snapPoints","QUERY_DROPZONE_USERS","UsersScreen","screens","users","ghostForm","search","searchText","fetchPolicy","navigation","useNavigation","isFocused","useRoute","useIsFocused","isSearchVisible","setSearchVisible","canCreateUser","useRestriction","Permission","CreateUser","ProgressBar","dropzoneUsers","edges","onRefresh","refreshing","refreshControl","RefreshControl","ListEmptyComponent","alignItems","NoResults","subtitle","numColumns","renderItem","edge","item","key","node","user","image","Image","source","uri","marginHorizontal","size","navigate","userId","FAB","fab","small","setOpen","container","position","margin","bottom","fontSize","fontWeight","separator","marginVertical"],"mappings":"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","file":"static/js/14.6fd2edba.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useCurrentDropzone from \"./useCurrentDropzone\";\n\nexport const QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        permissions\n\n        role {\n          id\n          name\n        }\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n        notifications {\n          edges {\n            node {\n              id\n              message\n              notificationType\n              createdAt\n            }\n          }\n        }\n\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              message\n              amount\n              createdAt\n            }\n          }\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          image\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n            federation {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// Returns current user if no ID is provided\nexport default function useDropzoneUser(id?: number) {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const currentDropzone = useCurrentDropzone();\n\n  const dropzoneUser = useQuery<Pick<Query, \"dropzone\">>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: dropzoneId,\n      dropzoneUserId: id || Number(currentDropzone?.data?.dropzone?.currentUser?.id),\n    }\n  });\n\n  return {\n    ...dropzoneUser,\n    dropzoneUser: !id || id === Number(currentDropzone?.data?.dropzone?.currentUser?.id)\n      ? currentDropzone?.data?.dropzone?.currentUser\n      : dropzoneUser?.data?.dropzone?.dropzoneUser,\n  };\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useDropzoneUser from \"../../../graphql/hooks/useDropzoneUser\";\nimport { Query, UserRole } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles(selectable: true) {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const { dropzoneUser } = useDropzoneUser();\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name?.replace('_', ' ')?.toUpperCase() || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name?.replace('_', ' ').toUpperCase() || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Divider } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport LicenseChipSelect from '../../input/chip_select/LicenseChipSelect';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\nimport RoleSelect from '../../input/dropdown_select/RoleSelect';\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.ghost);\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.ghost.setField([\"exitWeight\", state.original.exitWeight?.toString() || \"60\"])\n        );\n      }\n\n      if (!state.fields.license.value && state.original?.license?.id) {\n        dispatch(\n          actions.forms.ghost.setFederation(state.original.license.federation)\n        );\n        dispatch(\n          actions.forms.ghost.setField([\"license\", state.original.license])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  \n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.ghost.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.ghost.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.ghost.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n      \n\n      <View style={{ width: \"100%\"}}>\n        <FederationSelect\n          value={state?.fields?.license?.value?.federation || state.federation.value}\n          onSelect={(value) => dispatch(actions.forms.ghost.setFederation(value))}\n          required\n        />\n\n        <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n          { state.federation.error || \"\" }\n        </HelperText>\n\n        { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n          <>\n            <LicenseChipSelect\n              value={state.fields.license.value}\n              federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n              onSelect={(value) => dispatch(actions.forms.ghost.setField([\"license\", value]))}\n              required\n            />\n            <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n              { state.fields.license.error || \"\" }\n            </HelperText>\n          </>\n        )}\n      </View>\n      <RoleSelect\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Role\"\n        error={!!state.fields.role.error}\n        value={state.fields.role?.value || \"\"}\n        onSelect={(newValue) => dispatch(actions.forms.ghost.setField([\"role\", newValue]))}\n        required\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isNumeric, isRequired } from \"../createMutation\";\nimport { CreateGhostPayload, MutationCreateGhostArgs } from \"../schema\";\n\n\nconst MUTATION_CREATE_GHOST = gql`\n  mutation CreateGhost(\n    $name: String!,\n    $phone: String,\n    $email: String!,\n    $roleId: Int!,\n    $licenseId: Int,\n    $dropzoneId: Int!\n    $exitWeight: Float!,\n  ){\n    createGhost(input: {\n      attributes: {\n        roleId: $roleId,\n        name: $name,\n        phone: $phone,\n        email: $email,\n        dropzoneId: $dropzoneId,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      user {\n        id\n        name\n        exitWeight\n        email\n        phone\n        \n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationCreateGhostArgs[\"input\"][\"attributes\"], CreateGhostPayload>(\n  MUTATION_CREATE_GHOST, {\n    getPayload: (result) => result.createGhost,\n    validates: {\n      exitWeight: [ \n        isRequired(\"Exit weight must be provided\"),\n        isNumeric(\"Please enter a valid number\"),\n      ],\n      email: [\n        isRequired(\"Please provide a valid email address\"),\n        isEmail(\"Please provide a valid email address\"),\n      ],\n      name: [\n        isRequired(\"Name is required\"),\n      ],\n\n      roleId: [\n        isRequired(\"You must select a role\"),\n      ],\n    },\n    fieldErrorMap: {\n      license: \"licenseId\",\n      exit_weight: \"exitWeight\",\n      role: \"roleId\",\n    },\n  }\n);","import * as React from \"react\";\nimport GhostForm from '../forms/ghost/GhostForm';\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\nimport useMutationCreateGhost from \"../../graphql/hooks/useMutationCreateGhost\";\n\ninterface ICreateGhostDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\nexport default function CreateGhostDialog(props: ICreateGhostDialog) {\n  const { open, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.ghost);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n\n  const mutationCreateGhost = useMutationCreateGhost({\n    onSuccess: (payload) => {\n      \n    },\n    onFieldError: (field, value) => {\n      dispatch(actions.forms.ghost.setFieldError([field as any, value]));\n      console.log(field, value);\n    },\n      \n    onError: (error) =>\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n  });\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight, role } = state.fields;\n    try {\n      const result = await mutationCreateGhost.mutate({\n        dropzoneId: globalState.currentDropzoneId,\n        name: name.value,\n        licenseId: !license.value?.id ? null : Number(license.value!.id),\n        phone: phone.value,\n        exitWeight: Number(exitWeight.value),\n        email: email.value,\n        roleId: Number(role.value.id),\n      });\n\n      onSuccess();\n      dispatch(\n        actions.notifications.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n      );\n      dispatch(actions.forms.ghost.reset());\n    } catch (error) {\n      dispatch(\n        actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n      );\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateGhost, open, onSuccess]);\n\n\n  return (\n    <DialogOrSheet\n      title=\"Pre-register user\"\n      open={open}\n      snapPoints={[0, 400, 740]}\n      loading={mutationCreateGhost.loading}\n      onClose={() => {\n        props.onClose();\n      }}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n    >\n      <GhostForm />\n    </DialogOrSheet>\n  )\n}\n","import { useQuery } from '@apollo/client';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { RefreshControl, StyleSheet, View } from 'react-native';\nimport { Avatar, Divider, FAB, List, ProgressBar } from 'react-native-paper';\n\nimport NoResults from '../../../components/NoResults';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { Permission, Query } from '../../../graphql/schema.d';\nimport { actions,  useAppDispatch, useAppSelector } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\nimport CreateGhostDialog from '../../../components/dialogs/Ghost';\nimport { FlatList } from 'react-native-gesture-handler';\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUsersRouteParams{\n  key: string,\n  name: string,\n}\nexport default function UsersScreen() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.screens.users);\n  const ghostForm = useAppSelector(state => state.forms.ghost);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(global.currentDropzoneId),\n      search: state.searchText,\n    },\n    fetchPolicy: \"network-only\",  \n  });\n\n  const navigation = useNavigation();\n  const route = useRoute<IUsersRouteParams>();\n\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (state.isSearchVisible) {\n      dispatch(actions.screens.users.setSearchVisible(false));\n    }\n\n  }, [isFocused]);\n\n\n  const canCreateUser = useRestriction(Permission.CreateUser);\n\n\n  return (\n    <>\n      <ProgressBar indeterminate color={global.theme.colors.accent} visible={loading} />\n      <FlatList\n        data={data?.dropzone?.dropzoneUsers?.edges || []}\n        onRefresh={() => refetch({\n          dropzoneId: Number(global.currentDropzoneId),\n          search: state.searchText,\n        })}\n        refreshing={loading}\n\n        refreshControl={<RefreshControl refreshing={loading} onRefresh={refetch}/>}\n        style={{ flexGrow: 1 }}\n        ListEmptyComponent={() => (\n          <View style={{ alignSelf: \"center\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <NoResults title=\"No users\" subtitle=\"\" />\n          </View>\n        )}\n        numColumns={1}\n        renderItem={({ item: edge }) => (\n        <React.Fragment key={`user-${edge?.node?.id}`}>\n          <List.Item\n              style={{ width: \"100%\"}}\n              title={edge?.node?.user.name}\n              description={\n                edge?.node?.role?.name?.replace('_', ' ').toUpperCase()\n              }\n              left={() =>\n                !edge?.node?.user?.image\n                  ? <List.Icon icon=\"account\" />\n                  : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n              }\n              onPress={() => navigation.navigate(\"UserProfileScreen\", { userId: edge?.node?.id })}\n            />\n            <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n          </React.Fragment>\n        )}\n      />\n        \n       \n      { canCreateUser && (\n        <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => dispatch(actions.forms.ghost.setOpen(true))}\n        label=\"Add user\"\n        />\n        )}\n      <CreateGhostDialog\n        open={ghostForm.open}\n        onClose={() => dispatch(actions.forms.ghost.setOpen(false))}\n        onSuccess={() => {\n          dispatch(actions.forms.ghost.setOpen(false));\n          refetch();\n        }}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n"],"sourceRoot":""}