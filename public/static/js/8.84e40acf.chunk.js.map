{"version":3,"sources":["components/input/chip_select/ChipSelect.tsx","components/NoResults.tsx","components/layout/DialogOrSheet.web.tsx","components/notifications/index.ts","graphql/createQuery.tsx","components/layout/SwipeActions.tsx","components/input/dropdown_select/RigSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/input/chip_select/DropzoneUserChipSelect.tsx","components/input/chip_select/PlaneChipSelect.tsx","components/forms/load/LoadForm.tsx","components/forms/manifest_group/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/manifest_group/ManifestGroupForm.tsx","components/input/chip_select/JumpTypeChipSelect.tsx","components/input/chip_select/TicketTypeChipSelect.tsx","components/forms/manifest/ManifestForm.tsx","components/dialogs/ManifestUser/ManifestUser.web.tsx","components/dialogs/ManifestGroup/UserListSelect.tsx","components/dialogs/ManifestGroup/ManifestGroup.web.tsx","screens/authenticated/manifest/GetStarted.tsx","components/chips/GcaChip.tsx","components/chips/LoadMasterChip.tsx","components/chips/PilotChip.tsx","components/chips/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","components/dialogs/Load.tsx","screens/authenticated/manifest/ManifestScreen.tsx"],"names":["ChipSelect","props","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","React","length","JSON","stringify","style","flexDirection","flexWrap","map","item","key","mode","some","value","isEqual","undefined","margin","disabled","onPress","xorBy","NoResults","title","subtitle","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","right","bottom","alignItems","justifyContent","width","height","DialogOrSheet","buttonLabel","buttonAction","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","onClose","button","borderRadius","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","previousData","refetch","error","transformedData","message","showSnackbarErrors","notifications","showSnackbar","variant","SwipeActions","rightAction","ref","enabled","renderRightActions","progress","dragX","scale","interpolate","inputRange","outputRange","translateX","current","close","View","transform","Text","fontWeight","label","useNativeAnimations","QUERY_RIGS","gql","RigSelect","isMenuOpen","setMenuOpen","currentDropzoneId","useLazyQuery","fetchRigs","userId","dropzoneId","Number","dropzone","dropzoneUser","availableRigs","onSelect","onDismiss","anchor","Item","make","model","canopySize","description","required","left","Icon","rig","id","user","QUERY_DROPZONE_USERS","dropzoneUsers","DropzoneUserChipSelect","requiredPermissions","useQueryDropzoneUsers","permissions","Subheader","edges","node","filter","Boolean","dzUser","name","first","QUERY_PLANES","PlaneChipSelect","uniqBy","planes","Plane","plane","LoadForm","forms","load","TextInput","field","fields","placeholder","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","gca","pilot","Divider","marginVertical","Checkbox","status","isOpen","marginBottom","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","console","selectedRig","rigs","find","Card","ProgressBar","image","Image","source","uri","size","ScrollView","horizontal","Chip","marginHorizontal","role","license","round","toFixed","text","keyboardType","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","SlotForm","manifestGroup","userIds","users","slotUser","flexShrink","jumpType","includes","ticketType","extras","ticketAddons","extra","cost","newRig","JumpTypeChipSelect","QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES","useTicketTypes","TicketTypeChipSelect","onlyPublicTickets","ManifestForm","currentDropzone","useCurrentDropzone","manifest","isEdit","original","allowedToManifestOthers","useRestriction","Permission","UpdateUserSlot","CreateUserSlot","Affix","isTandem","passengerName","passengerExitWeight","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","extraIds","loadId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","maxHeight","Button","reset","UsersScreen","screens","searchText","setSearchText","search","currentUser","canManifestGroup","canManifestGroupWithSelfOnly","CreateUserSlotWithSelf","Searchbar","contentContainerStyle","paddingTop","edge","selectedUsers","setSelected","setDropzoneUsers","onNext","scrollView","MUTATION_CREATE_SLOTS","mutationCreateSlots","tabIndex","setTabIndex","userGroup","createSlots","sheetRef","snapTo","testID","defaultIndex","onChangeIndex","userListContainer","ManifestGroupForm","buttonContainer","GetStarted","hasPlanes","hasTicketTypes","palette","isPublic","usePalette","separator","lightColor","darkColor","success","fontSize","GCAChip","UpdateLoad","Menu","LoadMasterChip","allowed","slots","slot","PilotChip","PlaneChip","QUERY_LOAD","MUTATION_UPDATE_LOAD","MUTATION_DELETE_SLOT","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","onManifestGroup","mutationUpdateLoad","mutation","mutationDeleteSlot","onDeleteSlot","deleteSlot","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","dispatchAt","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","UpdateSlot","canEditOthers","canRemoveSelf","DeleteSlot","canRemoveOthers","DeleteUserSlot","canManifestSelf","CreateSlot","showManifestButton","isFull","showGroupIcon","opacity","loadNumber","IconButton","overflow","showsHorizontalScrollIndicator","diff","loadMaster","DataTable","Header","numeric","slotGroup","groupNumber","isCurrentUser","Row","onSlotGroupPress","onSlotPress","Cell","Paragraph","slotText","altitude","Array","from","v","i","differenceInMinutes","marginLeft","MUTATION_CREATE_LOAD","LoadDialog","mutationCreateLoad","hasError","onSave","createLoad","snackbar","snapPoints","ManifestScreen","navigation","useNavigation","isFocused","useIsFocused","isSetupComplete","primaryColor","primary","setPrimaryColor","secondaryColor","canCreateLoad","CreateLoad","hasLicense","hasMembership","hasRigInspection","hasReserveInDate","hasExitWeight","hasCredits","setOpen","useWindowDimensions","numColumns","Dimensions","get","loads","keyExtractor","refreshing","onRefresh","refreshControl","RefreshControl","renderItem","index","setFromSlots","navigate","FAB","small"],"mappings":"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","file":"static/js/8.84e40acf.chunk.js","sourcesContent":["import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\n\nexport interface ISwipeAction {\n  label: string;\n  \n  backgroundColor?: string;\n  onPress(): void;\n}\nexport interface ISwipeActions {\n  rightAction?: ISwipeAction;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport default function SwipeActions(props: ISwipeActions) {\n  const { children, rightAction, disabled } = props;\n\n  const ref = React.useRef<any>();\n  const rightActions = (progress: Animated.AnimatedInterpolation, dragX: Animated.AnimatedInterpolation) => {\n    const scale = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1.0, 0]\n    })\n\n    const translateX = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [0, 10]\n    });\n\n    return (\n        <TouchableOpacity\n          onPress={() => {\n            rightAction?.onPress();\n            ref?.current?.close();\n          }}\n        >\n          <Animated.View\n            style={{\n              flexGrow: 1,\n              backgroundColor: rightAction?.backgroundColor,\n              justifyContent: 'center',\n              height: \"100%\",\n              width: 75,\n              transform: [{ translateX }]\n            }}>\n            <Animated.Text\n              style={{\n                color: 'white',\n                paddingHorizontal: 10,\n                fontWeight: '600',\n                transform: [{ scale }]\n              }}>\n              {rightAction?.label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableOpacity>\n    )\n   }\n  return (\n    <Swipeable ref={ref} enabled={!disabled} renderRightActions={rightActions} useNativeAnimations>\n      { children }\n    </Swipeable>\n  )\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Rig, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  React.useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: currentDropzoneId,\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  React.useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            style={{ width: \"100%\" }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useQueryDropzoneUsers from \"../../../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IDropzoneUserChipSelect {\n  value?: DropzoneUser | null;\n  label: string;\n  icon?: string;\n  required?: boolean;\n  requiredPermissions: string[];\n  onSelect(dzuser: DropzoneUser): void;\n}\n\nexport default function DropzoneUserChipSelect(props: IDropzoneUserChipSelect) {\n  const { label, requiredPermissions, icon, required, value } = props;\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: requiredPermissions\n    },\n    onError: (message) =>\n      dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        {label}\n      </List.Subheader>\n      <ChipSelect<DropzoneUser>\n        autoSelectFirst\n        icon={icon || \"account\"}\n        items={data?.edges?.map(({ node }) => node) || []}\n        selected={[props.value].filter(Boolean) as DropzoneUser[]}\n        isSelected={(item) => item.id === value?.id}\n        renderItemLabel={(dzUser) => dzUser?.user.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IPlaneSelect {\n  value?: Plane | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: Plane): void;\n}\n\nconst QUERY_PLANES = gql`\n  query QuerySelectPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChipSelect(props: IPlaneSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n    }\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Aircraft\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.planes || []),\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(Plane) => Plane?.name}\n        isDisabled={(plane) => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Divider, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport PlaneSelect from '../../input/dropdown_select/PlaneSelect';\nimport DropzoneUserSelect from '../../input/dropdown_select/DropzoneUserSelect';\nimport DropzoneUserChipSelect from '../../input/chip_select/DropzoneUserChipSelect';\nimport PlaneChipSelect from '../../input/chip_select/PlaneChipSelect';\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        \n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneChipSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.forms.load.setField([\"plane\", value]));\n            dispatch(actions.forms.load.setField([\"maxSlots\", value.maxSlots]));\n          }}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n\n        \n        <DropzoneUserChipSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"gca\", dzUser]))}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserChipSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"pilot\", dzUser]))}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.forms.load.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../input/dropdown_select/RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(userId: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  React.useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: globalState.currentDropzoneId,\n    },\n    onError: console.error\n  });\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.forms.manifestGroup.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.forms.manifestGroup.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={globalState.currentDropzoneId}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { JumpType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function JumpTypeChipSelect(props: IJumpTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: [Number(props.userId) || null].filter(Boolean) as number[],\n      dropzoneId: Number(currentDropzoneId),\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Jump type\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.allowedJumpTypes || []),\n            ...(data?.jumpTypes || [])\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(jumpType) => jumpType?.name}\n        isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType!.id)}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { TicketType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  onlyPublicTickets?: boolean;\n  onSelect(jt: TicketType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES = gql`\nquery DropzoneUsersAllowedTicketTypes(\n  $dropzoneId: Int!,\n  $onlyPublicTickets: Boolean\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    ticketTypes(isPublic: $onlyPublicTickets) {\n      id\n      name\n      cost\n      isTandem\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n}\n\n`;\n\nconst useTicketTypes = createQuery<{ ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  onlyPublicTickets?: boolean | null\n }>(QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES, {\n   getPayload: (query) => ({\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n   })\n });\n\nexport default function TicketTypeChipSelect(props: ITicketTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading } = useTicketTypes({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      onlyPublicTickets: props.onlyPublicTickets || null,\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={data?.ticketTypes || []}\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(ticketType) => ticketType?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Permission } from '../../../graphql/schema.d';\nimport JumpTypeChipSelect from '../../input/chip_select/JumpTypeChipSelect';\nimport TicketTypeChipSelect from '../../input/chip_select/TicketTypeChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../input/dropdown_select/RigSelect';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nexport default function ManifestForm() {\n  \n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.manifest);\n  React.useEffect(() => {\n    if (state.fields.dropzoneUser?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.manifest.setField([\"exitWeight\", Number(state.fields.dropzoneUser?.value?.user?.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.dropzoneUser.value.user?.rigs?.length) {\n        dispatch(\n          actions.forms.manifest.setField([\"rig\", state.fields.dropzoneUser?.value?.user.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.dropzoneUser?.value?.id]);\n\n  const isEdit = state?.original?.id;\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? Permission.UpdateUserSlot : Permission.CreateUserSlot\n  )\n\n  return ( \n    <> \n      <JumpTypeChipSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.dropzoneUser?.value?.user?.id) || null}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeChipSelect\n        value={state.fields.ticketType.value}\n        required\n        onlyPublicTickets={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.forms.manifest.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.forms.manifest.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      { !state.fields.dropzoneUser ? null :\n        <RigSelect\n          value={state.fields.rig.value}\n          userId={Number(state.fields.dropzoneUser?.value?.user?.id)}\n          dropzoneId={Number(currentDropzone?.dropzone?.id)}\n          onSelect={(value) => dispatch(actions.forms.manifest.setField([\"rig\", value]))}\n        />}\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      {\n        !state.fields.ticketType.value?.isTandem ? null : (\n          <>\n            <List.Subheader>Passenger</List.Subheader>\n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger name\"\n              error={!!state.fields.passengerName.error}\n              value={state.fields.passengerName?.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerName\", newValue]))}\n            />\n            \n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger exit weight\"\n              error={!!state.fields.passengerExitWeight.error}\n              value={state.fields.passengerExitWeight.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerExitWeight\", Number(newValue)]))}\n            />\n          </>\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport SlotForm from \"../../forms/manifest/ManifestForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $dropzoneUserId: Int\n    $exitWeight: Float\n    $passengerName: String\n    $passengerExitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          dropzoneUserId: $dropzoneUserId\n          exitWeight: $exitWeight\n          passengerExitWeight: $passengerExitWeight\n          passengerName: $passengerName\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            passengerName\n            passengerExitWeight\n            ticketType {\n              id\n              name\n              isTandem\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifest);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          dropzoneUserId: Number(state.fields.dropzoneUser?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n          ...!state.fields.ticketType.value?.isTandem\n            ? {}\n            : {\n                passengerName: state.fields.passengerName?.value,\n                passengerExitWeight: state.fields.passengerExitWeight?.value,\n              }\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifest.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifest.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(actions.forms.manifest.setFieldError([\"rig\", message]));\n          case \"dropzone_user\":\n            return dispatch(actions.forms.manifest.setFieldError([\"dropzoneUser\", message]));\n          case \"exit_weight\":\n            return dispatch(actions.forms.manifest.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} style={{ maxHeight: 500 }}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.dropzoneUser?.value?.user?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.ScrollArea>\n          <ScrollView>\n            <SlotForm />\n          </ScrollView>\n        </Dialog.ScrollArea>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.manifest.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, Button, Checkbox, Divider, List, Searchbar } from 'react-native-paper';\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nimport NoResults from '../../../components/NoResults';\nimport { Permission, Query } from '../../../graphql/schema.d';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search, licensed: true) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUserListSelect {\n  onNext(): void;\n}\n\nexport default function UsersScreen(props: IUserListSelect) {\n  const { screens } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const [searchText, setSearchText] = React.useState(\"\");\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      search: searchText,\n    }\n  });\n\n  const { currentUser } = useCurrentDropzone();\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  return (\n    <>\n    <Searchbar\n      value={searchText}\n      onChangeText={setSearchText}\n      placeholder=\"Search skydivers\"\n    />\n    <View style={{ height: 380}}>\n    <ScrollView contentContainerStyle={{ paddingTop: 16 }}>\n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n      <>\n        <List.Item\n          style={{ width: \"100%\"}}\n          key={`user-${edge?.node?.id}`}\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() =>\n            !edge?.node?.user?.image\n              ? <List.Icon icon=\"account\" />\n              : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n          }\n          right={() => \n            <Checkbox\n              status={\n                screens.manifest.selectedUsers?.map(({ id }) => id).includes(edge!.node!.id)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          disabled={\n          // Dont allow removing current user if the user\n            // can only manifest a group with themselves in it\n            edge?.node?.user.id === currentUser?.id && (\n              canManifestGroupWithSelfOnly && !canManifestGroup\n            )  \n          }\n          onPress={\n            () => dispatch(\n              actions.screens.manifest.setSelected(\n                screens.manifest.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                ? screens.manifest.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                : [...screens.manifest.selectedUsers, edge!.node!],\n              )\n            )\n          }\n        />\n        <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n        </>\n      )}\n    </ScrollView>\n    </View>\n    <Button\n      onPress={() => {\n        dispatch(actions.forms.manifestGroup.setDropzoneUsers(screens.manifest.selectedUsers));\n        props.onNext();\n      }}\n      style={styles.button}\n      mode=\"contained\"\n    >\n      Next\n    </Button>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  scrollView: {\n    height: 100,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal } from \"react-native-paper\";\nimport { Tabs, TabScreen, useTabNavigation } from 'react-native-paper-tabs';\nimport BottomSheet, { BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ManifestGroupForm from \"../../forms/manifest_group/ManifestGroupForm\";\nimport UserListSelect from \"./UserListSelect\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction NextStepButton() {\n  const setTab = useTabNavigation();\n\n  return (\n    <Button\n      onPress={() => setTab(1)} \n      style={styles.button}\n    >\n      Next\n    </Button>\n  )\n}\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const { open } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlots?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"ticketType\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        props.onClose();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  \n  const sheetRef = React.useRef<BottomSheet>(null);\n\n  React.useEffect(() => {\n    if (state.fields.ticketType?.value?.isTandem) {\n      sheetRef?.current?.snapTo(0);\n    }\n  }, [state.fields.ticketType?.value?.isTandem])\n\n  React.useEffect(() => {\n    if (open) {\n      sheetRef?.current?.snapTo(1);\n    } else {\n      sheetRef?.current?.close();\n      props.onClose();\n    }\n  }, [open]);\n\n  const snapPoints = React.useMemo(() => [0, 550], []);\n\n  return (\n    <Portal>\n      <Dialog\n        visible={!!props.open}\n        onDismiss={props.onClose}\n       >\n         <View style={{ backgroundColor: \"white\"}} testID=\"manifest-group-sheet\">\n            <View pointerEvents={(state.fields.users?.value?.length || 0) > 0 ? undefined : \"none\"}>\n              <Tabs defaultIndex={tabIndex} mode=\"fixed\" onChangeIndex={setTabIndex}>\n                <TabScreen label=\"Create group\" ><View /></TabScreen>\n                <TabScreen label=\"Configure jump\"><View /></TabScreen>\n              </Tabs>\n            </View>\n            \n            {\n              tabIndex === 0\n                ? (\n                  <View style={styles.userListContainer}>\n                    <UserListSelect onNext={() => setTabIndex(1)} />\n                  </View>\n                ) : (\n                  <ScrollView contentContainerStyle={{ paddingBottom: 200, flexGrow: 1}}>\n                    <ManifestGroupForm />\n                    <View style={styles.buttonContainer}>\n                      <Button onPress={onManifest} loading={mutationData.loading} mode=\"contained\" style={styles.button}>\n                        Save\n                      </Button>\n                    </View>\n                  </ScrollView>\n                )\n            }\n          </View>\n        </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  buttonContainer: {\n    paddingHorizontal: 16,\n    backgroundColor: \"white\",\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  userListContainer: {\n    height: \"100%\",\n    backgroundColor: \"white\",\n    width: \"100%\",\n    padding: 16,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingBottom: 32,\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 15,\n    borderTopRightRadius: 15,\n    height: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryGCAUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.user?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`gca-chip-${edge?.node?.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport { Slot, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  value?: DropzoneUser | null;\n  slots: Slot[];\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"shield-account\">\n      {props.value?.user?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-account\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <Menu.Item\n            key={`lm-chip-${slot.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.dropzoneUser);\n            }}\n            title={\n              slot?.dropzoneUser?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryPilotUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.user?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.user?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`pilot-select-${edge!.node!.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Permission, Query } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPlaneChipSelect {\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryChipPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <Menu.Item\n            key={`lm-plane-chip-${plane.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, IconButton, Menu, Paragraph, ProgressBar, Text } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport GCAChip from '../../../components/chips/GcaChip';\nimport LoadMasterChip from '../../../components/chips/LoadMasterChip';\nimport PilotChip from '../../../components/chips/PilotChip';\nimport PlaneChip from '../../../components/chips/PlaneChip';\n\nimport { View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Permission, Plane, Slot, DropzoneUser } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport SwipeActions from '../../../components/layout/SwipeActions';\n\ninterface ILoadCard {\n  load: Load;\n  onManifestGroup(): void;\n  onSlotGroupPress(slots: Slot[]): void;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        \n        dropzoneUser {\n          id\n          user {\n            id\n            name\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_SLOT = gql`\nmutation DeleteSlot($id: Int!) {\n  deleteSlot(input: { id: $id }) {\n    slot {\n      id\n      load {\n        id\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }  \n      }\n    }\n  }\n}\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const { load, onManifest, onManifestGroup } = props;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n  const currentDropzone = useCurrentDropzone();\n  const { currentUser } = currentDropzone;\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const [mutationDeleteSlot, mutationDelete] = useMutation<Mutation>(MUTATION_DELETE_SLOT);\n\n  const onDeleteSlot = React.useCallback(async (slot: Slot) => {\n    try {\n      const result = await mutationDeleteSlot({\n        variables: {\n          id: Number(slot.id)\n        }\n      });\n\n      if (result?.data?.deleteSlot?.errors) {\n        dispatch(\n          actions.notifications.showSnackbar({\n            message: result.data.deleteSlot.errors[0],\n            variant: \"error\"\n          })\n        );\n      }\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePilot = React.useCallback(async (pilot: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  \n  const canUpdateLoad = useRestriction(Permission.UpdateLoad);\n  \n  const canEditSelf = useRestriction(Permission.UpdateSlot);\n  const canEditOthers = useRestriction(Permission.UpdateUserSlot);\n  \n  const canRemoveSelf = useRestriction(Permission.DeleteSlot);\n  const canRemoveOthers = useRestriction(Permission.DeleteUserSlot);\n  \n  const canManifestSelf = useRestriction(Permission.CreateSlot);\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  const showManifestButton = canManifestSelf && data?.load?.isOpen && !data?.load?.isFull;\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  const showGroupIcon = (canManifestGroup || canManifestGroupWithSelfOnly) && !data?.load?.hasLanded && (!data?.load?.dispatchAt || data?.load.dispatchAt > (new Date().getTime() / 1000));\n\n  return (\n  <Card testID=\"load-card\" style={{ margin: 16, opacity: data?.load?.hasLanded ? 0.5 : 1.0 }} elevation={3}>\n    <Card.Title\n      style={{ justifyContent: \"space-between\"}}\n      title={\n        <View style={{ width: \"100%\", flex: 1, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n          <Text>{`Load ${data?.load?.loadNumber || 0}`}</Text>\n          <View style={{ flexGrow: 1 }} />\n          { showGroupIcon && (\n            <IconButton\n              icon=\"account-group\"\n              testID=\"manifest-group-button\"\n              onPress={() => {\n                dispatch(actions.forms.manifestGroup.reset());\n                dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n\n                if (canManifestGroupWithSelfOnly && !canManifestGroup) {\n                  // Automatically add current user to selection\n                  dispatch(actions.screens.manifest.setSelected([currentUser]));\n                  dispatch(actions.forms.manifestGroup.setDropzoneUsers([currentUser]));\n                }\n\n                if (onManifestGroup) {\n                  onManifestGroup();\n                }\n              }}\n            />\n          )}\n        </View>\n      }\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          <PlaneChip\n            value={data?.load?.plane}\n            onSelect={async (plane) => {\n              if ((data?.load?.slots?.length || 0) > (plane.maxSlots || 0)) {\n                const diff = (data?.load?.slots?.length || 0) - (plane.maxSlots || 0);\n\n                dispatch(\n                  actions.notifications.showSnackbar({\n                    message: `You need to take ${diff} people off the load to fit on this plane`,\n                    variant: \"warning\",\n                  })\n                );\n              } else {\n                await updatePlane(plane);\n                refetch();\n              }\n            }}\n          />\n          <GCAChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.gca}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.pilot}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            value={data?.load?.loadMaster}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              const slotGroup = data?.load?.slots?.filter(({ groupNumber }) => groupNumber && groupNumber === slot.groupNumber);\n              const isCurrentUser = slot?.user?.id === currentUser?.id;\n\n              return (\n                <SwipeActions\n                  disabled={\n                    (isCurrentUser && !canRemoveSelf) || (!isCurrentUser && !canRemoveOthers)\n                  }\n                  key={`slot-${slot.id}`}\n                  rightAction={{\n                    label: \"Delete\",\n                    backgroundColor: \"red\",\n                    onPress: () => onDeleteSlot(slot),\n                  }}\n                >\n                  <DataTable.Row\n                    testID=\"slot-row\"\n                    disabled={!!data?.load?.hasLanded}\n                    onPress={() => {\n                      if (slot.user?.id === currentUser?.id) {\n                        if (canEditSelf) {\n                          if (slotGroup?.length) {\n                            props.onSlotGroupPress(slotGroup!)\n                          } else {\n                            props.onSlotPress(slot);\n                          }\n                        }\n                      } else if (canEditOthers) {\n                        if (slotGroup?.length) {\n                          props.onSlotGroupPress(slotGroup!)\n                        } else {\n                          props.onSlotPress(slot);\n                        }\n                      }\n                    }}\n                    pointerEvents=\"none\"\n                  >\n                    <DataTable.Cell>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.dropzoneUser?.user?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.jumpType?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {((slot?.ticketType?.altitude || 14000) / 1000)}k\n                      </Paragraph>\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                </SwipeActions>\n              )\n            })\n          }\n          {\n            Array.from({length: (data?.load?.maxSlots || 0) - (data?.load?.slots?.length || 0)}, (v, i) => i).map((i) =>\n              <DataTable.Row key={`${load.id}-empty-slot-${i}`} testID=\"slot-row\">\n                <DataTable.Cell><Paragraph style={styles.slotText}>- Available -</Paragraph></DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"black\", padding: 8 }}>\n          <Paragraph style={{ color: \"#FFFFFF\" }}>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)} testID={ isExpanded ? \"show-less\" : \"show-more\" }>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)} testID=\"dispatch-cancel\">\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button\n                    mode=\"outlined\"\n                    onPress={() => setDispatchOpen(true)}\n                    testID=\"dispatch-button\"\n                  >\n                    Dispatch\n                  </Button>\n                }\n              >\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button\n                style={{ marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => {\n                  if (!data?.load?.loadMaster?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a load master before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n\n                  if (!data?.load?.pilot?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a pilot before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n                  onLanded();\n                }}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                testID=\"manifest-button\"\n                onPress={() => onManifest()}\n                disabled={!showManifestButton || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  slotText: {\n    fontSize: 12\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { actions, useAppSelector, useAppDispatch } from '../../redux';\nimport { actions as snackbar } from \"../../components/notifications\";\n\nimport { Load, Mutation } from '../../graphql/schema';\nimport LoadForm from '../forms/load/LoadForm';\nimport DialogOrSheet from '../layout/DialogOrSheet';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\ninterface ILoadDialog {\n  open: boolean;\n  onClose(): void;\n  onSuccess(load: Load): void;\n}\nexport default function LoadDialog(props: ILoadDialog) {\n  const { open, onClose, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.load);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const dispatch = useAppDispatch();\n  const [mutationCreateLoad, mutation] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: currentDropzoneId,\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(pilot.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.forms.load.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.forms.load.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.forms.load.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.forms.load.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.forms.load.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.forms.load.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            onSuccess(result.data.createLoad.load);\n            dispatch(actions.forms.load.reset());\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <DialogOrSheet\n      open={open}\n      onClose={onClose}\n      buttonAction={onSave}\n      buttonLabel=\"Create\"\n      snapPoints={[\"30%\", 650]}\n      loading={mutation.loading}\n      title=\"New Load\"\n    >\n      <LoadForm />\n    </DialogOrSheet>\n  );\n}\n","import { useIsFocused, useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Dimensions, RefreshControl, StyleSheet, useWindowDimensions } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserSheet from '../../../components/dialogs/ManifestUser/ManifestUser';\nimport ManifestGroupSheet from '../../../components/dialogs/ManifestGroup/ManifestGroup';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Load, Permission } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\nimport LoadDialog from '../../../components/dialogs/Load';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const forms = useAppSelector(state => state.forms);\n  const dispatch = useAppDispatch();\n  const { dropzone, currentUser, loading, refetch } = useCurrentDropzone();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!dropzone?.planes?.length;\n  const hasTicketTypes = !!dropzone?.ticketTypes?.length;\n  const isPublic = !!dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (dropzone?.primaryColor && dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(actions.global.setPrimaryColor(dropzone.primaryColor));\n    }\n\n    if (dropzone?.secondaryColor && dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(actions.global.setPrimaryColor(dropzone.secondaryColor));\n    }\n  }, [\n    dropzone?.primaryColor,\n    dropzone?.secondaryColor\n  ])\n\n  const canCreateLoad = useRestriction(Permission.CreateLoad);\n\n  const onManifest = React.useCallback((load: Load) => {\n    \n    if (!currentUser.hasLicense) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You need to select a license on your user profile\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasMembership) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your membership is out of date\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasRigInspection) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs to be inspected before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasReserveInDate) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs a reserve repack\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasExitWeight) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Update your exit weight on your profile before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasCredits) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You have no credits on your account\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    dispatch(actions.forms.manifest.setOpen(true));\n    dispatch(\n      actions.forms.manifest.setField([\"dropzoneUser\", currentUser])\n    );\n    dispatch(\n      actions.forms.manifest.setField([\"load\", load])\n    );\n  }, [JSON.stringify(dropzone?.currentUser)]);\n\n\n  const { width } = useWindowDimensions(); \n\n  const numColumns = Math.ceil(width / 400) || 1;\n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        testID=\"loads\"\n                        keyExtractor={(item) => `load-${item?.node?.id}`}\n                        key={`loads-columns-${numColumns}`}\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={numColumns}\n                        data={dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        refreshControl={\n                          <RefreshControl refreshing={loading} onRefresh={() => refetch()} />\n                        }\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              onSlotPress={(slot) => {\n                                dispatch(actions.forms.manifest.setOpen(slot));\n                                dispatch(\n                                  actions.forms.manifest.setField([\"load\", edge.node!])\n                                );\n                              }}\n                              onSlotGroupPress={(slots) => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setFromSlots(slots));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                                navigation.navigate(\"ManifestGroupScreen\");\n                              }}\n                              onManifest={() => {\n                                \n                                onManifest(edge.node!)\n                              }}\n                              onManifestGroup={() => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setOpen(true));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => dispatch(actions.forms.load.setOpen(true))}\n            label=\"New load\"\n          />\n        )}\n      </View>\n      <ManifestUserSheet\n        open={forms.manifest.open}\n        onClose={() => dispatch(actions.forms.manifest.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifest.setOpen(false))}\n      />\n      <ManifestGroupSheet\n        open={forms.manifestGroup.open}\n        onClose={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n      />\n\n      <LoadDialog\n        onSuccess={() => {\n          dispatch(actions.forms.load.setOpen(false));\n          refetch();\n        }}\n        open={forms.load.open}\n        onClose={() => dispatch(actions.forms.load.setOpen(false))}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"sourceRoot":""}