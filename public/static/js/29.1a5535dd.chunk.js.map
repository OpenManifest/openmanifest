{"version":3,"sources":["components/input/date_picker/DatePicker.web.tsx","screens/authenticated/settings/DropzoneMasterLogScreen.tsx"],"names":["DatePicker","props","React","open","setOpen","date","onChange","getTime","onDismiss","visible","anchor","Item","onPress","disabled","title","label","description","timestamp","format","left","Icon","icon","selectedDays","Date","onDayClick","QUERY_MASTER_LOG","gql","DropzoneMasterLogScreen","currentDropzone","useCurrentDropzone","startOfDay","setTimestamp","navigation","useNavigation","setOptions","headerRight","time","color","data","useQuery","variables","dropzoneId","Number","dropzone","id","Math","floor","allSlots","flatten","masterLog","loads","map","slots","groupBy","jumpType","name","style","width","load","marginVertical","Title","loadNumber","Content","pilot","user","gca","plane","registration","Header","numeric","slot","Row","Cell","ticketType","altitude"],"mappings":"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","file":"static/js/29.1a5535dd.chunk.js","sourcesContent":["import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import { useQuery } from \"@apollo/client\";\nimport groupBy from \"lodash/groupBy\";\nimport flatten from \"lodash/flatten\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Card, DataTable, List } from \"react-native-paper\";\nimport startOfDay from \"date-fns/startOfDay\";\nimport ScrollableScreen from \"../../../components/layout/ScrollableScreen\";\nimport { Query, Slot } from \"../../../graphql/schema.d\";\nimport DatePicker from \"../../../components/input/date_picker/DatePicker\";\nimport { View } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\n\nconst QUERY_MASTER_LOG = gql`\nquery MasterLog($dropzoneId: Int!, $timestamp: Int!) {\n  dropzone(id: $dropzoneId) {\n    id\n    masterLog(date: $timestamp) {\n      id\n      dzso {\n        id\n        user {\n          id\n          name\n        }\n      }\n\n      loads {\n        id\n        name\n        loadNumber\n\n        loadMaster {\n          id\n          user {\n            name\n          }\n        }\n\n        gca {\n          id\n          user {\n            name\n          }\n        }\n\n        slots {\n          id\n          user {\n            id\n            name\n            license {\n              id\n              name\n            }\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\nexport default function DropzoneMasterLogScreen() {\n  const currentDropzone = useCurrentDropzone();\n  const [timestamp, setTimestamp] = React.useState(startOfDay(new Date()).getTime());\n  const navigation = useNavigation();\n\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () =>\n        <DatePicker\n          onChange={(time) => setTimestamp(time * 1000)}\n          timestamp={timestamp / 1000}\n          color=\"#FFFFFF\"\n        />\n    })\n  }, [navigation, timestamp])\n\n  const { data } = useQuery<Query>(QUERY_MASTER_LOG, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n      timestamp: Math.floor(timestamp / 1000),\n    },\n  });\n\n  const allSlots = flatten(\n    data?.dropzone?.masterLog?.loads?.map(({ slots }) => slots)\n  ) as Slot[];\n\n  const slotsByJumpType = groupBy(\n    allSlots,\n    ({ jumpType }) => jumpType?.name,\n  );\n\n  return (\n    <ScrollableScreen>\n      <View style={{ width: \"100%\" }}>\n        \n      </View>\n      {\n        data?.dropzone?.masterLog?.loads?.map((load) =>\n          <Card style={{ width: \"100%\", marginVertical: 16 }}>\n            <Card.Title title={`Load ${load.loadNumber}`} />\n            <Card.Content>\n              <List.Item\n                title=\"Pilot\"\n                description={load?.pilot?.user?.name}\n              />\n              <List.Item\n                title=\"GCA\"\n                description={load?.gca?.user?.name}\n              />\n              <List.Item\n                title=\"Plane\"\n                description={\n                  load?.plane?.id ? `${load?.plane?.name} (${load?.plane?.registration})` : \"No plane selected\"\n                }\n              />\n              <DataTable>\n                <DataTable.Header>\n                  <DataTable.Title>Name</DataTable.Title>\n                  <DataTable.Title>Jump type</DataTable.Title>\n                  <DataTable.Title numeric>Altitude</DataTable.Title>\n                </DataTable.Header>\n\n                {\n                  load.slots?.map((slot) =>\n                    <DataTable.Row>\n                      <DataTable.Cell>{slot.user?.name}</DataTable.Cell>\n                      <DataTable.Cell>{slot.jumpType?.name}</DataTable.Cell>\n                      <DataTable.Cell numeric>{slot.ticketType?.altitude}</DataTable.Cell>\n                    </DataTable.Row>\n                  )\n                }\n              </DataTable>\n            </Card.Content>\n          </Card>\n        )\n      }\n    </ScrollableScreen>\n  );\n}"],"sourceRoot":""}