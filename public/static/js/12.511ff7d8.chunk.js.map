{"version":3,"sources":["graphql/createQuery.tsx","components/input/dropdown_select/RigSelect.tsx","components/forms/manifest_group/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/manifest_group/ManifestGroupForm.tsx","screens/authenticated/manifest/ManifestGroupScreen.tsx"],"names":["createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","loading","previousData","refetch","error","transformedData","React","JSON","stringify","message","showSnackbarErrors","actions","notifications","showSnackbar","variant","QUERY_RIGS","gql","RigSelect","props","isMenuOpen","setMenuOpen","currentDropzoneId","useAppSelector","state","global","useLazyQuery","fetchRigs","userId","dropzoneId","Number","value","autoSelectFirst","dropzone","dropzoneUser","availableRigs","length","onSelect","onDismiss","visible","anchor","Item","onPress","title","make","model","canopySize","description","required","left","Icon","icon","map","rig","key","id","style","width","user","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","globalState","console","selectedRig","rigs","find","Card","elevation","ProgressBar","indeterminate","color","theme","colors","accent","Title","name","image","Image","source","uri","size","Content","Divider","marginBottom","ScrollView","horizontal","Chip","marginHorizontal","mode","disabled","role","license","round","toFixed","TextInput","onChangeText","text","keyboardType","label","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","SlotForm","forms","manifestGroup","userIds","fields","users","slotUser","Subheader","flexShrink","ChipSelect","items","uniqBy","selected","jumpType","renderItemLabel","isDisabled","includes","onChangeSelected","first","setField","HelperText","type","ticketType","extras","styles","ticketAddons","extra","some","filter","cost","undefined","newRig","StyleSheet","create","flex","field","MUTATION_CREATE_SLOTS","ManifestGroupScreen","useMutation","mutationCreateSlots","mutationData","navigation","useNavigation","validate","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","ticketTypeId","extraIds","loadId","load","userGroup","result","createSlot","fieldErrors","createSlots","errors","navigate","screen","onSuccess","loadNumber","marginVertical"],"mappings":"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","file":"static/js/12.511ff7d8.chunk.js","sourcesContent":["import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Rig, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  React.useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: currentDropzoneId,\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  React.useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            style={{ width: \"100%\" }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../input/dropdown_select/RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(userId: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  React.useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: globalState.currentDropzoneId,\n    },\n    onError: console.error\n  });\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.forms.manifestGroup.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.forms.manifestGroup.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={globalState.currentDropzoneId}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","\nimport { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Button, Card, ProgressBar } from \"react-native-paper\";\nimport ScrollableScreen from \"../../../components/layout/ScrollableScreen\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ManifestGroupForm from \"../../../components/forms/manifest_group/ManifestGroupForm\";\nimport { useNavigation } from \"@react-navigation/core\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestGroupScreen(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const navigation = useNavigation();\n  \n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"ticketType\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        navigation.navigate(\"Manifest\", { screen: \"DropzoneScreen\" });\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  return (\n    <ScrollableScreen>\n      <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n      <Card.Title title={`Manifest ${state?.fields?.users?.value?.length} jumpers on Load #${state.fields.load?.value?.loadNumber}`} />\n      <ManifestGroupForm />\n      <Button\n        mode=\"contained\"\n        style={{ width: \"100%\", marginVertical: 16 }}\n        onPress={() => onManifest()}\n        loading={mutationData.loading}\n      >\n        Save\n      </Button>\n  </ScrollableScreen>\n  )\n}"],"sourceRoot":""}