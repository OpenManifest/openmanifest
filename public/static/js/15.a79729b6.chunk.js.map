{"version":3,"sources":["components/notifications/index.ts","components/forms/extra/ExtraForm.tsx","screens/authenticated/extras/CreateExtraScreen.tsx"],"names":["actions","slice","Notifications","QUERY_TICKET_TYPES","gql","ExtraForm","state","useAppSelector","forms","extra","dispatch","useAppDispatch","currentDropzone","useCurrentDropzone","data","useQuery","variables","dropzoneId","Number","dropzone","id","style","styles","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","type","cost","toString","width","Subheader","ticketTypes","map","ticket","Item","status","ticketTypeIds","includes","onPress","xor","StyleSheet","create","flex","marginBottom","MUTATION_CREATE_EXTRA","globalSlice","CreateExtraScreen","navigation","useNavigation","isFocused","useIsFocused","React","reset","useMutation","mutationCreateExtra","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","result","createExtra","snackbar","showSnackbar","message","variant","goBack","contentContainerStyle","paddingHorizontal","size","color","alignSelf","disabled","loading","container","alignItems","title","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/15.a79729b6.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.forms.extra);\n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n  const { data } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.forms.extra.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.extra.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <View style={{ width: \"100%\"}}>\n        <List.Subheader>\n          Compatible tickets\n        </List.Subheader>\n        {\n          data?.ticketTypes.map((ticket) =>\n            <Checkbox.Item\n              label={ticket.name!}\n              status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n                ? \"checked\"\n                : \"unchecked\"\n              }\n              onPress={\n                () => dispatch(actions.forms.extra.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n              }\n            />\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/extra/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport ExtraForm from '../../../components/forms/extra/ExtraForm';\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nconst { actions } = slice;\nconst { actions: globalActions } = globalSlice;\n\n\nconst MUTATION_CREATE_EXTRA = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        id\n        name\n\n        ticketTypes {\n          id\n          name\n          cost\n          altitude\n          allowManifestingSelf\n        }\n      }\n    }\n  }\n`;\n\nexport default function CreateExtraScreen() {\n  const state = useAppSelector(state => state.forms.extra);\n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n  React.useEffect(() => {\n    if (isFocused) {\n      dispatch(actions.reset());\n    }\n  }, [isFocused]);\n\n  const [mutationCreateExtra, data] = useMutation<Mutation>(MUTATION_CREATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateExtra({\n          variables: {\n            dropzoneId: Number(currentDropzone?.dropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n        \n        if (result.data?.createExtra?.extra) {\n          const { extra } = result.data.createExtra;\n          dispatch(\n            snackbar.showSnackbar({ message: `Added extra ${extra.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 48 }}>\n        <MaterialCommunityIcons name=\"ticket-percent\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <ExtraForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}