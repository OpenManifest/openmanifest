{"version":3,"sources":["components/input/chip_select/ChipSelect.tsx","components/notifications/index.ts","graphql/createQuery.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/input/chip_select/DropzoneUserChipSelect.tsx","components/input/chip_select/PlaneChipSelect.tsx","components/forms/load/LoadForm.tsx","screens/authenticated/load/CreateLoadScreen.tsx"],"names":["ChipSelect","props","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","React","length","JSON","stringify","style","flexDirection","flexWrap","map","item","key","mode","some","value","isEqual","undefined","margin","disabled","onPress","xorBy","actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","loading","previousData","refetch","error","transformedData","message","showSnackbarErrors","notifications","showSnackbar","variant","QUERY_DROPZONE_USERS","gql","dropzone","dropzoneUsers","DropzoneUserChipSelect","label","requiredPermissions","required","currentDropzoneId","useAppSelector","state","global","useQueryDropzoneUsers","dropzoneId","Number","permissions","Subheader","edges","node","filter","Boolean","id","dzUser","user","name","first","onSelect","QUERY_PLANES","PlaneChipSelect","uniqBy","planes","Plane","plane","LoadForm","forms","load","TextInput","styles","field","fields","placeholder","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","View","width","gca","pilot","Divider","marginVertical","Checkbox","Item","status","isOpen","StyleSheet","create","flex","marginBottom","MUTATION_CREATE_LOAD","CreateLoadScreen","currentDropzone","useCurrentDropzone","navigation","useNavigation","useMutation","mutationCreateLoad","validate","hasError","setFieldError","onSave","a","async","loadMaster","planeId","pilotId","gcaId","result","createLoad","fieldErrors","errors","snackbar","goBack","contentContainerStyle","content","size","color","alignSelf","marginTop","button","paddingHorizontal","title","fontSize","fontWeight","separator","height"],"mappings":"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","file":"static/js/13.42fea557.chunk.js","sourcesContent":["import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useQueryDropzoneUsers from \"../../../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IDropzoneUserChipSelect {\n  value?: DropzoneUser | null;\n  label: string;\n  icon?: string;\n  required?: boolean;\n  requiredPermissions: string[];\n  onSelect(dzuser: DropzoneUser): void;\n}\n\nexport default function DropzoneUserChipSelect(props: IDropzoneUserChipSelect) {\n  const { label, requiredPermissions, icon, required, value } = props;\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: requiredPermissions\n    },\n    onError: (message) =>\n      dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        {label}\n      </List.Subheader>\n      <ChipSelect<DropzoneUser>\n        autoSelectFirst\n        icon={icon || \"account\"}\n        items={data?.edges?.map(({ node }) => node) || []}\n        selected={[props.value].filter(Boolean) as DropzoneUser[]}\n        isSelected={(item) => item.id === value?.id}\n        renderItemLabel={(dzUser) => dzUser?.user.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IPlaneSelect {\n  value?: Plane | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: Plane): void;\n}\n\nconst QUERY_PLANES = gql`\n  query QuerySelectPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChipSelect(props: IPlaneSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n    }\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Aircraft\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.planes || []),\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(Plane) => Plane?.name}\n        isDisabled={(plane) => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Divider, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport PlaneSelect from '../../input/dropdown_select/PlaneSelect';\nimport DropzoneUserSelect from '../../input/dropdown_select/DropzoneUserSelect';\nimport DropzoneUserChipSelect from '../../input/chip_select/DropzoneUserChipSelect';\nimport PlaneChipSelect from '../../input/chip_select/PlaneChipSelect';\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        \n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneChipSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.forms.load.setField([\"plane\", value]));\n            dispatch(actions.forms.load.setField([\"maxSlots\", value.maxSlots]));\n          }}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n\n        \n        <DropzoneUserChipSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"gca\", dzUser]))}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserChipSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"pilot\", dzUser]))}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.forms.load.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nconst { actions } = slice;\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(currentDropzone?.dropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane-takeoff\" size={100} color=\"#999999\" style={{ alignSelf: \"center\", marginTop: 32 }} />\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" style={styles.button} disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  button: {\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}