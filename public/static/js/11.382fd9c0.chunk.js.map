{"version":3,"sources":["components/notifications/index.ts","graphql/createQuery.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/input/chip_select/DropzoneUserChipSelect.tsx","components/input/chip_select/PlaneChipSelect.tsx","components/forms/load/LoadForm.tsx","screens/authenticated/load/CreateLoadScreen.tsx"],"names":["actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","loading","previousData","refetch","error","transformedData","React","JSON","stringify","message","showSnackbarErrors","notifications","showSnackbar","variant","QUERY_DROPZONE_USERS","gql","dropzone","dropzoneUsers","DropzoneUserChipSelect","props","label","requiredPermissions","icon","value","required","currentDropzoneId","useAppSelector","state","global","useQueryDropzoneUsers","dropzoneId","Number","permissions","Subheader","ChipSelect","autoSelectFirst","items","edges","map","node","selected","filter","Boolean","isSelected","item","id","renderItemLabel","dzUser","user","name","isDisabled","onChangeSelected","first","onSelect","QUERY_PLANES","PlaneChipSelect","uniqBy","planes","Plane","plane","LoadForm","forms","load","TextInput","style","styles","field","mode","fields","placeholder","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","View","width","gca","pilot","Divider","marginVertical","Checkbox","Item","status","isOpen","onPress","StyleSheet","create","flex","marginBottom","MUTATION_CREATE_LOAD","CreateLoadScreen","currentDropzone","useCurrentDropzone","navigation","useNavigation","useMutation","mutationCreateLoad","validate","hasError","setFieldError","onSave","a","async","loadMaster","planeId","pilotId","gcaId","result","createLoad","fieldErrors","errors","length","snackbar","goBack","contentContainerStyle","content","size","color","alignSelf","marginTop","button","disabled","paddingHorizontal","title","fontSize","fontWeight","separator","height"],"mappings":"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","file":"static/js/11.382fd9c0.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useQueryDropzoneUsers from \"../../../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IDropzoneUserChipSelect {\n  value?: DropzoneUser | null;\n  label: string;\n  icon?: string;\n  required?: boolean;\n  requiredPermissions: string[];\n  onSelect(dzuser: DropzoneUser): void;\n}\n\nexport default function DropzoneUserChipSelect(props: IDropzoneUserChipSelect) {\n  const { label, requiredPermissions, icon, required, value } = props;\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: requiredPermissions\n    },\n    onError: (message) =>\n      dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        {label}\n      </List.Subheader>\n      <ChipSelect<DropzoneUser>\n        autoSelectFirst\n        icon={icon || \"account\"}\n        items={data?.edges?.map(({ node }) => node) || []}\n        selected={[props.value].filter(Boolean) as DropzoneUser[]}\n        isSelected={(item) => item.id === value?.id}\n        renderItemLabel={(dzUser) => dzUser?.user.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IPlaneSelect {\n  value?: Plane | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: Plane): void;\n}\n\nconst QUERY_PLANES = gql`\n  query QuerySelectPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChipSelect(props: IPlaneSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n    }\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Aircraft\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.planes || []),\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(Plane) => Plane?.name}\n        isDisabled={(plane) => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Divider, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport PlaneSelect from '../../input/dropdown_select/PlaneSelect';\nimport DropzoneUserSelect from '../../input/dropdown_select/DropzoneUserSelect';\nimport DropzoneUserChipSelect from '../../input/chip_select/DropzoneUserChipSelect';\nimport PlaneChipSelect from '../../input/chip_select/PlaneChipSelect';\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        \n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneChipSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.forms.load.setField([\"plane\", value]));\n            dispatch(actions.forms.load.setField([\"maxSlots\", value.maxSlots]));\n          }}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n\n        \n        <DropzoneUserChipSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"gca\", dzUser]))}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserChipSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"pilot\", dzUser]))}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.forms.load.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useAppSelector, useAppDispatch } from '../../../redux';\nimport { useNavigation } from '@react-navigation/core';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\nimport globalSlice from \"../../../redux/global\";\n\nimport slice from \"../../../components/forms/load/slice\";\nimport { Mutation } from '../../../graphql/schema';\nimport LoadForm from '../../../components/forms/load/LoadForm';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nconst { actions } = slice;\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function CreateLoadScreen() {\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n\n  const [mutationCreateLoad, data] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: Number(currentDropzone?.dropzone?.id),\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(plane.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            navigation.goBack();\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane-takeoff\" size={100} color=\"#999999\" style={{ alignSelf: \"center\", marginTop: 32 }} />\n        <LoadForm />\n        <View style={styles.fields}>\n          <Button mode=\"contained\" style={styles.button} disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n        </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  button: {\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}