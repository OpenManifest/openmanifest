{"version":3,"sources":["components/input/chip_select/ChipSelect.tsx","graphql/createQuery.tsx","components/input/dropdown_select/RigSelect.tsx","components/forms/manifest_group/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/manifest_group/ManifestGroupForm.tsx","screens/authenticated/manifest/ManifestGroupScreen.tsx"],"names":["ChipSelect","props","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","React","length","JSON","stringify","style","flexDirection","flexWrap","map","item","key","mode","some","value","isEqual","undefined","margin","disabled","onPress","xorBy","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","loading","previousData","refetch","error","transformedData","message","showSnackbarErrors","actions","notifications","showSnackbar","variant","QUERY_RIGS","gql","RigSelect","isMenuOpen","setMenuOpen","currentDropzoneId","useAppSelector","state","global","useLazyQuery","fetchRigs","userId","dropzoneId","Number","dropzone","dropzoneUser","availableRigs","onSelect","onDismiss","visible","anchor","Item","title","make","model","canopySize","description","required","left","Icon","rig","id","width","user","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","globalState","console","selectedRig","rigs","find","Card","elevation","ProgressBar","indeterminate","color","theme","colors","accent","Title","name","image","Image","source","uri","size","Content","Divider","marginBottom","ScrollView","horizontal","Chip","marginHorizontal","role","license","round","toFixed","TextInput","onChangeText","text","keyboardType","label","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","SlotForm","forms","manifestGroup","userIds","fields","users","slotUser","Subheader","flexShrink","uniqBy","jumpType","includes","first","setField","HelperText","type","ticketType","extras","styles","ticketAddons","extra","filter","cost","newRig","StyleSheet","create","flex","field","MUTATION_CREATE_SLOTS","ManifestGroupScreen","useMutation","mutationCreateSlots","mutationData","navigation","useNavigation","validate","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","ticketTypeId","extraIds","loadId","load","userGroup","result","createSlot","fieldErrors","createSlots","errors","navigate","screen","onSuccess","loadNumber","marginVertical"],"mappings":"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","file":"static/js/14.1c288efb.chunk.js","sourcesContent":["import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Rig, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  React.useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: currentDropzoneId,\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  React.useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            style={{ width: \"100%\" }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../input/dropdown_select/RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(userId: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  React.useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: globalState.currentDropzoneId,\n    },\n    onError: console.error\n  });\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.forms.manifestGroup.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.forms.manifestGroup.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={globalState.currentDropzoneId}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","\nimport { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Button, Card, ProgressBar } from \"react-native-paper\";\nimport ScrollableScreen from \"../../../components/layout/ScrollableScreen\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ManifestGroupForm from \"../../../components/forms/manifest_group/ManifestGroupForm\";\nimport { useNavigation } from \"@react-navigation/core\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestGroupScreen(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const navigation = useNavigation();\n  \n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"ticketType\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        navigation.navigate(\"Manifest\", { screen: \"DropzoneScreen\" });\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  return (\n    <ScrollableScreen>\n      <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n      <Card.Title title={`Manifest ${state?.fields?.users?.value?.length} jumpers on Load #${state.fields.load?.value?.loadNumber}`} />\n      <ManifestGroupForm />\n      <Button\n        mode=\"contained\"\n        style={{ width: \"100%\", marginVertical: 16 }}\n        onPress={() => onManifest()}\n        loading={mutationData.loading}\n      >\n        Save\n      </Button>\n  </ScrollableScreen>\n  )\n}"],"sourceRoot":""}