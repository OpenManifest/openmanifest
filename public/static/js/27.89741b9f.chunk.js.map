{"version":3,"sources":["components/NoResults.tsx","graphql/hooks/useNotifications.ts","screens/authenticated/notifications/Cards/Manifested.tsx","screens/authenticated/notifications/Cards/BoardingCall.tsx","screens/authenticated/notifications/NotificationsScreen.tsx"],"names":["NoResults","title","subtitle","style","styles","empty","textAlign","StyleSheet","create","container","flex","padding","display","fab","position","margin","right","bottom","alignItems","justifyContent","width","height","QUERY_DROPZONE_USER_NOTIFICATIONS","gql","MUTATION_MARK_AS_SEEN","ManifestedNotification","props","notification","useMutation","Item","description","message","left","Icon","icon","Caption","formatDistanceToNow","createdAt","Divider","BoardingCallNotification","resource","loadNumber","ProfileScreen","state","useAppSelector","global","dropzoneId","currentDropzoneId","query","useQuery","variables","pollInterval","notifications","data","dropzone","currentUser","useNotifications","loading","refetch","isFocused","useIsFocused","React","ProgressBar","color","theme","colors","accent","indeterminate","visible","ScrollableScreen","contentContainerStyle","content","refreshControl","RefreshControl","refreshing","onRefresh","edges","length","map","edge","node","notificationType","flexGrow","paddingBottom","paddingHorizontal","divider"],"mappings":"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","file":"static/js/27.89741b9f.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useCurrentDropzone from \"./useCurrentDropzone\";\n\nconst QUERY_DROPZONE_USER_NOTIFICATIONS = gql`\n  query QueryNotifications($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n\n      currentUser {\n        id\n        \n        notifications {\n          edges {\n            node {\n              id\n              message\n              notificationType\n              createdAt\n\n              resource {\n                ...on Load {\n                  id\n                  loadNumber\n                  dispatchAt\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// Returns current user if no ID is provided\nexport default function useNotifications() {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n\n  const query = useQuery<Pick<Query, \"dropzone\">>(QUERY_DROPZONE_USER_NOTIFICATIONS, {\n    variables: {\n      dropzoneId,\n    },\n    pollInterval: 30000,\n  });\n\n  return {\n    ...query,\n    notifications: query?.data?.dropzone?.currentUser.notifications,\n  };\n}","import { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { Avatar, Caption, Card, Divider, List, Paragraph } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { Load, Mutation, Notification } from '../../../../graphql/schema';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\n\n\nconst MUTATION_MARK_AS_SEEN = gql`\n  mutation MarkAsSeen(\n    $id: Int,\n  ){\n    updateNotification(input: {\n      id: $id\n      attributes: {\n        isSeen: true,\n      }\n    }) {\n      notification {\n        id\n        isSeen\n        message\n        notificationType\n        receivedBy {\n          notifications {\n            edges {\n              node {\n                id\n                message\n                isSeen\n                notificationType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface INotification {\n  notification: Notification;\n}\n\nexport default function ManifestedNotification(props: INotification) {\n  const { notification } = props;\n  const [mutationMarkAsSeen, mutation] = useMutation<Mutation>(MUTATION_MARK_AS_SEEN);\n  return (\n    <>\n    <List.Item\n      title={`Manifest`}\n      description={\n        notification.message\n      }\n      style={{ width: \"100%\"}}\n      left={\n        (props) => <List.Icon {...props} icon=\"airplane\" />\n      }\n      right={() =>\n        <Caption>\n          {formatDistanceToNow(notification.createdAt * 1000)}\n        </Caption>\n      }\n    />\n    <Divider style={{ width: \"100%\" }} />\n    </>\n  );\n}","import { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { Avatar, Caption, Card, Divider, List, Paragraph } from 'react-native-paper';\nimport gql from 'graphql-tag';\n\nimport { Load, Mutation, Notification } from '../../../../graphql/schema';\nimport { differenceInMinutes, formatDistanceToNow } from 'date-fns';\n\n\nconst MUTATION_MARK_AS_SEEN = gql`\n  mutation MarkAsSeen(\n    $id: Int,\n  ){\n    updateNotification(input: {\n      id: $id\n      attributes: {\n        isSeen: true,\n      }\n    }) {\n      notification {\n        id\n        isSeen\n        message\n        notificationType\n        receivedBy {\n          notifications {\n            edges {\n              node {\n                id\n                message\n                isSeen\n                notificationType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface INotification {\n  notification: Notification;\n}\n\nexport default function BoardingCallNotification(props: INotification) {\n  const { notification } = props;\n  const [mutationMarkAsSeen, mutation] = useMutation<Mutation>(MUTATION_MARK_AS_SEEN);\n  return (\n    <>\n    <List.Item\n      title={`Load #${(notification.resource as Load).loadNumber} boarding call`}\n      description={\n        notification.message\n      }\n      style={{ width: \"100%\"}}\n      left={\n        (props) => <List.Icon {...props} icon=\"airplane-takeoff\" />\n      }\n      right={() =>\n        <Caption>\n          {formatDistanceToNow(notification.createdAt * 1000)}\n        </Caption>\n      }\n    />\n    <Divider style={{ width: \"100%\" }} />\n    </>\n  );\n}","import { useIsFocused } from '@react-navigation/core';\nimport { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { RefreshControl, StyleSheet } from 'react-native';\nimport { ProgressBar } from 'react-native-paper';\nimport gql from 'graphql-tag';\n\n\nimport { useAppSelector } from '../../../redux';\nimport { Load, Mutation } from '../../../graphql/schema';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport useNotifications from '../../../graphql/hooks/useNotifications';\nimport NoResults from '../../../components/NoResults';\n\nimport ManifestedCard from \"./Cards/Manifested\";\nimport BoardingCallNotification from './Cards/BoardingCall';\n\n\nconst MUTATION_MARK_AS_SEEN = gql`\n  mutation MarkAsSeen(\n    $id: Int,\n  ){\n    updateNotification(input: {\n      id: $id\n      attributes: {\n        isSeen: true,\n      }\n    }) {\n      notification {\n        id\n        isSeen\n        message\n        notificationType\n        receivedBy {\n          notifications {\n            edges {\n              node {\n                id\n                message\n                isSeen\n                notificationType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const { notifications, loading, refetch } = useNotifications();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused])\n\n  const [mutationMarkAsSeen, mutation] = useMutation<Mutation>(MUTATION_MARK_AS_SEEN);\n\n  return (\n    <>\n    {loading && <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />}\n    <ScrollableScreen contentContainerStyle={styles.content} refreshControl={<RefreshControl refreshing={loading} onRefresh={() => refetch()} />}>\n      {\n        !notifications?.edges?.length ?\n        <NoResults title=\"No notifications\" subtitle=\"Notifications will show up here\" /> :\n        notifications?.edges?.map((edge) => {\n          switch (edge.node.notificationType) {\n            case \"boarding_call\":\n              return <BoardingCallNotification notification={edge.node!} />;\n            case \"user_manifested\":\n              return <ManifestedCard notification={edge.node!} />;\n\n            default:\n              return null;\n          }\n        })\n      }\n    </ScrollableScreen>\n  </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    paddingBottom: 56,\n    paddingHorizontal: 0,\n  },\n  divider: {\n    height: 1,\n    width: '100%',\n  },\n});\n"],"sourceRoot":""}