{"version":3,"sources":["components/layout/DialogOrSheet.web.tsx","components/forms/user/UserForm.tsx","graphql/hooks/useDropzoneUser.ts","components/forms/rig/RigForm.tsx","components/dialogs/Rig.tsx","components/input/dropdown_select/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","components/forms/credits/CreditsForm.tsx","components/dialogs/CreditsDialog/Credits.web.tsx","components/dialogs/User.tsx","screens/authenticated/profile/UserInfo/TableCard.tsx","screens/authenticated/profile/UserInfo/Header.tsx","screens/authenticated/profile/UserInfo/InfoGrid.tsx","components/Badge.tsx","graphql/hooks/useMutationRevokePermission.ts","graphql/hooks/useMutationGrantPermission.ts","screens/authenticated/profile/ProfileScreen.tsx"],"names":["DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","style","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","justifyContent","onPress","onClose","StyleSheet","create","button","width","borderRadius","padding","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","height","display","flexDirection","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","SlotForm","forms","user","dispatch","useAppDispatch","React","original","fields","exitWeight","value","actions","setField","rigs","id","styles","field","mode","label","error","name","toString","onChangeText","newValue","type","email","phone","keyboardType","right","Affix","text","license","federation","onSelect","setFederation","required","federationId","Number","flex","paddingTop","marginBottom","ticketAddons","QUERY_DROPZONE_USER","gql","useDropzoneUser","dropzoneId","currentDropzoneId","currentDropzone","useCurrentDropzone","dropzoneUser","useQuery","variables","dropzoneUserId","data","dropzone","currentUser","RigForm","rig","canCreateRigs","useRestriction","Permission","CreateRig","View","TextInput","make","HelperText","model","serial","canopySize","showTypeSelect","ChipSelect","items","renderItemLabel","item","isDisabled","selected","rigType","onChangeSelected","timestamp","repackExpiresAt","Date","getTime","onChange","time","MUTATION_CREATE_RIG","MUTATION_UPDATE_RIG","RigDialog","userId","useMutation","mutationCreateRig","createData","mutationUpdateRig","updateData","isLoading","validate","hasErrors","setFieldError","JSON","stringify","onSave","a","async","mutation","response","result","updateRig","createRig","fieldErrors","map","message","errors","length","notifications","showSnackbar","variant","onSuccess","snapPoints","reset","QUERY_ROLES","RoleSelect","isMenuOpen","setMenuOpen","refetch","Subheader","paddingLeft","Menu","onDismiss","disabled","anchor","Item","left","Icon","icon","undefined","description","roles","role","DropzoneUserForm","canUpdateRole","GrantPermission","newRole","expiresAt","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","updateDropzoneUser","console","Portal","Dialog","ProgressBar","Button","CreditsForm","credits","currentCredits","amount","subtotal","status","defaultIndex","onChangeIndex","newIndex","Divider","DataTable","Row","Cell","numeric","Text","fontWeight","MUTATION_CREATE_TRANSACTION","mutationCreateTransaction","UpdateUserDialog","mutationUpdateUser","useMutationUpdateUser","payload","onFieldError","onError","hasError","emailRegex","RegExp","test","mutate","licenseId","parseFloat","UserForm","TableCard","buttonIcon","onPressButton","card","container","IconButton","primary","marginVertical","UserHeader","onEdit","canEdit","onPressAvatar","size","surface","avatarContainer","TouchableRipple","image","Image","source","uri","titleContainer","Paragraph","paragraph","alignItems","InfoGrid","divider","i","key","titleStyle","bold","descriptionStyle","verticalDivider","hairlineWidth","textAlign","Badge","iconName","Chip","textStyle","marginHorizontal","maxHeight","borderColor","filter","Boolean","MUTATION_REVOKE_PERMISSION","createMutation","getPayload","revokePermission","validates","permissionName","isRequired","MUTATION_GRANT_PERMISSION","grantPermission","MUTATION_UPDATE_IMAGE","ProfileScreen","navigation","useNavigation","route","useRoute","isSelf","params","canGrantPermission","isFocused","useIsFocused","useMutationRevokePermission","useMutationGrantPermission","Platform","OS","ImagePicker","alert","onPickImage","mediaTypes","Images","allowsEditing","aspect","quality","base64","log","badges","permissions","canAddTransaction","CreateUserTransaction","canUpdateUser","UpdateUser","ScrollableScreen","contentContainerStyle","content","refreshControl","RefreshControl","refreshing","onRefresh","horizontal","ActAsPilot","ActAsDzso","ActAsGca","ActAsRigInspector","ActAsLoadMaster","permission","includes","shouldShowBadge","update","client","c","readQuery","query","QUERY_PERMISSION_USER","updatedList","dropzoneUsers","edges","edge","node","writeQuery","current","shouldUpdate","find","updatedGcaList","newData","setOpen","MaterialCommunityIcons","chip","chipTitle","format","Math","round","Header","onLongPress","navigate","join","rigInspections","some","insp","isOk","successColor","warningColor","transactions","fontSize","fontStyle","createdAt","Rig","setUser","margin","minHeight","borderWidth","lineHeight","textAlignVertical"],"mappings":"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","file":"static/js/0.f76c1ed8.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Divider } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport LicenseChipSelect from '../../input/chip_select/LicenseChipSelect';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.user.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.forms.user.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      <View style={{ width: \"100%\"}}>\n        <FederationSelect\n          value={state?.fields?.license?.value?.federation || state.federation.value}\n          onSelect={(value) => dispatch(actions.forms.user.setFederation(value))}\n          required\n        />\n\n        <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n          { state.federation.error || \"\" }\n        </HelperText>\n\n        { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n          <>\n            <LicenseChipSelect\n              value={state.fields.license.value}\n              federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n              onSelect={(value) => dispatch(actions.forms.user.setField([\"license\", value]))}\n              required\n            />\n            <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n              { state.fields.license.error || \"\" }\n            </HelperText>\n          </>\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useCurrentDropzone from \"./useCurrentDropzone\";\n\nexport const QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        permissions\n\n        role {\n          id\n          name\n        }\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n        notifications {\n          edges {\n            node {\n              id\n              message\n              notificationType\n              createdAt\n            }\n          }\n        }\n\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              message\n              amount\n              createdAt\n            }\n          }\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          image\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n            federation {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// Returns current user if no ID is provided\nexport default function useDropzoneUser(id?: number) {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const currentDropzone = useCurrentDropzone();\n\n  const dropzoneUser = useQuery<Pick<Query, \"dropzone\">>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: dropzoneId,\n      dropzoneUserId: id || Number(currentDropzone?.data?.dropzone?.currentUser?.id),\n    }\n  });\n\n  return {\n    ...dropzoneUser,\n    dropzoneUser: !id || id === Number(currentDropzone?.data?.dropzone?.currentUser?.id)\n      ? currentDropzone?.data?.dropzone?.currentUser\n      : dropzoneUser?.data?.dropzone?.dropzoneUser,\n  };\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { Permission } from '../../../graphql/schema.d';\n\n\ninterface IRigForm {\n  showTypeSelect?: boolean;\n}\nexport default function RigForm(props: IRigForm) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n\n  const canCreateRigs = useRestriction(Permission.CreateRig);\n\n  return ( \n    <View>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      \n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      { !props.showTypeSelect ? null : (\n        <ChipSelect\n          items={[\"student\", \"sport\", \"tandem\"]}\n          renderItemLabel={(item) => item}\n          isDisabled={(item) => !canCreateRigs ? item !== \"sport\" : false}\n          selected={[state.fields.rigType?.value || \"sport\"]}\n          onChangeSelected={([rigType]) =>\n            dispatch(actions.forms.rig.setField([\"rigType\", rigType]))\n          }\n        />\n      )}\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.forms.rig.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n      <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.repackExpiresAt.error || \"\" }\n      </HelperText>\n\n      \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Mutation } from \"../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\ninterface IRigDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IRigDialog) {\n  const { open, onClose, userId, dropzoneId } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.rig);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const isLoading = createData.loading || updateData.loading;\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"repackExpiresAt\", \"You must select a repack date in the future\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: Number(state.original?.id) } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          rigType: state.fields.rigType.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(actions.forms.rig.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(actions.forms.rig.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(actions.forms.rig.setFieldError([\"serial\", message]));\n          case \"canopy_size\":\n            return dispatch(actions.forms.rig.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(actions.forms.rig.setFieldError([\"repackExpiresAt\", message]));\n          case \"rig_type\":\n            return dispatch(actions.forms.rig.setFieldError([\"rigType\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, mutationUpdateRig, props.onSuccess])\n\n  return (\n    <DialogOrSheet\n      title={ state.original?.id ? \"Edit rig\" : \"New rig\"}\n      open={open}\n      snapPoints={[0, 580]}\n      onClose={() => {\n        props.onClose();\n        dispatch(actions.forms.rig.reset());\n      }}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n      loading={isLoading}\n    >\n      <RigForm showTypeSelect={!!props.dropzoneId} />\n    </DialogOrSheet>\n  )\n}\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Query, UserRole } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { HelperText, List } from 'react-native-paper';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport RoleSelect from '../../input/dropdown_select/RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { Permission } from '../../../graphql/schema.d';\n\nexport default function DropzoneUserForm() {\n  const state = useAppSelector(state => state.forms.dropzoneUser);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(Permission.GrantPermission);\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.forms.dropzoneUser.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.forms.dropzoneUser.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { DropzoneUser, Mutation } from \"../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(user: DropzoneUser): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.dropzoneUser);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    \n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.dropzoneUser.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.dropzoneUser.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = response.data?.updateDropzoneUser;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(actions.forms.dropzoneUser.setFieldError([\"role\", message]));\n          case \"expires_at\":\n            return dispatch(actions.forms.dropzoneUser.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess(result.dropzoneUser);\n      } else {\n        console.error(result.fieldErrors);\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.dropzoneUser.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TextInput, HelperText, Divider, Dialog, DataTable } from 'react-native-paper';\nimport { Tabs, TabScreen } from \"react-native-paper-tabs\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nexport default function CreditsForm() {\n  const state = useAppSelector(state => state.forms.credits);\n  const dispatch = useAppDispatch();\n\n  const currentCredits = (state.original?.credits || 0)\n  const amount = (state.fields.amount.value || 0);\n\n  const subtotal = state.fields.status.value === \"deposit\"\n    ? amount + currentCredits\n    : amount - currentCredits;\n  return ( \n    <>\n      <Tabs\n        defaultIndex={0} // default = 0\n        onChangeIndex={(newIndex) => {\n          dispatch(actions.forms.credits.setField([\"status\", newIndex === 1 ? \"withdrawal\" : \"deposit\"]));\n        }}\n        mode=\"fixed\"\n      >\n        <TabScreen label=\"Deposit\" icon=\"arrow-up\"><View /></TabScreen>\n        <TabScreen label=\"Withdraw\" icon=\"arrow-down\"><View /></TabScreen>\n      </Tabs>\n      <Dialog.Content style={{ paddingTop: 16 }}>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Message\"\n            error={!!state.fields.message.error}\n            value={state.fields.message.value?.toString() || \"\"}\n            onChangeText={(newValue: string) => dispatch(actions.forms.credits.setField([\"message\", newValue]))}\n          />\n          <HelperText type={!!state.fields.message.error ? \"error\" : \"info\"}>\n            { state.fields.message.error || \"\" }\n          </HelperText>\n          { state.fields.status.value === \"deposit\" \n            ? (\n                <View>\n                  \n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Add amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue: string) => dispatch(actions.forms.credits.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original?.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Deposit</DataTable.Title>\n                      <DataTable.Cell numeric>{`+$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            ) : (\n                <View>\n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Withdraw amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue: string) => dispatch(actions.forms.credits.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original?.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Withdraw</DataTable.Title>\n                      <DataTable.Cell numeric>{`-$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            )}\n      </Dialog.Content>\n      </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport CreditsForm from \"../../forms/credits/CreditsForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_TRANSACTION = gql`\n  mutation CreatrTransaction(\n    $message: String,\n    $status: String,\n    $amount: Float,\n    $dropzoneUserId: Int,\n  ) {\n    createTransaction(\n      input: {\n        attributes: {\n          amount: $amount,\n          dropzoneUserId: $dropzoneUserId,\n          message: $message,\n          status: $status,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      transaction {\n        id\n        amount\n        message\n\n        dropzoneUser {\n          id\n          credits\n\n          transactions {\n            edges {\n              node {\n                id\n                status\n                amount\n                createdAt\n                message\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.credits);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateTransaction, createData] = useMutation<Mutation>(MUTATION_CREATE_TRANSACTION);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.amount.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.credits.setFieldError([\"amount\", \"You must specify an amount\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationCreateTransaction({\n        variables: {\n          amount: state.fields.amount.value,\n          message: state.fields.message.value,\n          status: state.fields.status.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"amount\":\n            return dispatch(actions.forms.credits.setFieldError([\"amount\", message]));\n          case \"message\":\n            return dispatch(actions.forms.credits.setFieldError([\"message\", message]));\n          case \"status\":\n            return dispatch(actions.forms.credits.setFieldError([\"status\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        dispatch(actions.forms.credits.reset());\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateTransaction, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <CreditsForm />\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.credits.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from \"react\";\nimport UserForm from '../forms/user/UserForm';\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\nimport useMutationUpdateUser from \"../../graphql/hooks/useMutationUpdateUser\";\n\ninterface IUpdateUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\nexport default function UpdateUserDialog(props: IUpdateUserDialog) {\n  const { open, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: (payload) => {\n      dispatch(\n        actions.notifications.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n      );\n      dispatch(actions.forms.user.reset());\n      onSuccess();\n    },\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.user.setFieldError([field as any, value])),\n    onError: (error) =>\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n  });\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser.mutate({\n          id: Number(state.original!.id!),\n          name: name.value,\n          licenseId: !license.value?.id ? null : Number(license.value!.id),\n          phone: phone.value,\n          exitWeight: parseFloat(exitWeight.value!),\n          email: email.value,\n        });        \n      } catch (error) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n\n  return (\n    <DialogOrSheet\n      title=\"Update information\"\n      open={open}\n      snapPoints={[0, 740]}\n      loading={mutationUpdateUser.loading}\n      onClose={() => {\n        props.onClose();\n        dispatch(actions.forms.user.reset());\n      }}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n    >\n      <UserForm />\n    </DialogOrSheet>\n  )\n}\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { IconButton, List} from 'react-native-paper';\n\n\nimport { useAppSelector } from '../../../../redux';\n\ninterface ITableCard {\n  children: React.ReactNode;\n  title: string;\n  buttonIcon?: string;\n  onPressButton?(): void;\n}\nexport default function TableCard(props: ITableCard) {\n  const state = useAppSelector(state => state.global);\n  const { title, children, buttonIcon, onPressButton } = props;\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.container}>\n        <List.Subheader style={styles.title}>{title}</List.Subheader>\n        {\n          buttonIcon && (\n            <IconButton\n              icon={buttonIcon}\n              onPress={() => !onPressButton ? null : onPressButton()}\n              color={state.theme.colors.primary}\n            />\n        )}\n      </View>\n      {children}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  title: { flexGrow: 1 },\n  card: {\n    marginVertical: 8,\n    width: \"100%\",\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, IconButton, Paragraph, Title, TouchableRipple } from 'react-native-paper';\n\nimport { useAppSelector } from '../../../../redux';\nimport { DropzoneUser } from '../../../../graphql/schema';\n\n\ninterface IUserHeader {\n  dropzoneUser?: DropzoneUser;\n  canEdit?: boolean;\n  children?: React.ReactNode;\n  onPressAvatar?(): void;\n  onEdit?(): void;\n}\nexport default function UserHeader(props: IUserHeader) {\n  const { dropzoneUser, onEdit, canEdit, children, onPressAvatar } = props;\n  const { theme } = useAppSelector(state => state.global);\n  return (\n      <View style={[styles.container, { backgroundColor: theme.colors.primary }]}>\n        <View style={styles.actions}>\n        {\n          !canEdit ? null : (\n            <IconButton\n              icon=\"pencil\"\n              size={20}\n              color={theme.colors.surface}\n              onPress={() => onEdit ? onEdit() : null}\n            />\n          )}\n        </View>\n        <View style={styles.avatarContainer}>\n          <View style={{ flex: 1/3 }}>\n            <TouchableRipple onPress={onPressAvatar}>\n              {\n                !dropzoneUser?.user?.image\n                ? <Avatar.Icon\n                    size={80}\n                    icon=\"account\"\n                    color={theme.colors.primary}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n                : <Avatar.Image\n                    size={80}\n                    source={{ uri: dropzoneUser?.user.image }}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n              }\n            </TouchableRipple>\n          </View>\n          <View style={styles.titleContainer}>\n            <Title style={styles.title}>{dropzoneUser?.user?.name}</Title>\n            <Paragraph style={styles.paragraph}>{dropzoneUser?.role?.name}</Paragraph>\n          </View>\n        </View>\n\n        {children}\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    paddingTop: 16\n  },\n  actions: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\"\n  },\n  avatarContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  titleContainer: {\n    paddingLeft: 48,\n    flex: 2/3,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  title: {\n    color: \"white\"\n  },\n  paragraph: {\n    color: \"white\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Divider, List } from 'react-native-paper';\n\ninterface IInfoGrid {\n  items: Array<{ title: string, value: string, onPress?(): void; bold?: boolean }>;\n}\nexport default function InfoGrid(props: IInfoGrid) {\n  const { items } = props;\n  const flex = 1 / items.length;\n\n  return (\n    <>\n      <Divider style={styles.divider} />\n      <View style={styles.container}>\n        {\n          items.map((item, i) =>\n          <>\n            <View style={{ flex }} key={`info-grid-${i}`}>\n              <List.Item\n                titleStyle={[styles.title, {\n                  fontWeight: item.bold !== false ? \"bold\" : undefined\n                }]}\n                title={item.value}\n                descriptionStyle={styles.description}\n                description={item.title}\n                onPress={item.onPress}\n              />\n            </View>\n            {i === items.length - 1 ? null : <Divider key={`info-grid-divider-${i}`} style={styles.verticalDivider} />}\n          </>\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n container: { width: \"100%\", flexDirection: \"row\" },\n  divider: {\n    height: StyleSheet.hairlineWidth,\n    width: '100%',\n    backgroundColor: \"white\",\n  },\n  verticalDivider: {\n    width: StyleSheet.hairlineWidth,\n    height: '100%',\n    backgroundColor: \"white\",\n  },\n  title: {\n    textAlign: \"center\",\n    color: \"white\",\n  },\n  description: {\n    textAlign: \"center\",\n    color: \"white\",\n  }\n});\n","import * as React from \"react\";\nimport { Chip } from \"react-native-paper\";\nimport { Permission } from \"../graphql/schema.d\";\n\n\nexport interface IBadgeProps {\n  disabled?: boolean;\n  selected?: boolean;\n  onPress?(): void;\n  type:\n    | Permission.ActAsDzso\n    | Permission.ActAsGca\n    | Permission.ActAsLoadMaster\n    | Permission.ActAsPilot\n    | Permission.ActAsRigInspector;\n}\n\nfunction Badge(props: IBadgeProps) {\n\n  const { type, selected, disabled, onPress } = props;\n  const iconName = {\n    \"actAsDZSO\": \"shield-cross\",\n    \"actAsGCA\": \"radio-handheld\",\n    \"actAsLoadMaster\": \"shield-account\",\n    \"actAsPilot\": \"shield-airplane\",\n    \"actAsRigInspector\": \"shield-search\"\n  }[props.type];\n\n  const label = {\n    \"actAsDZSO\": \"DZSO\",\n    \"actAsGCA\": \"GCA\",\n    \"actAsLoadMaster\": \"Load Master\",\n    \"actAsPilot\": \"Pilot\",\n    \"actAsRigInspector\": \"Rig Inspector\"\n  }[props.type];\n\n  return (\n    <Chip\n      mode={selected ? \"outlined\" : \"flat\"}\n      icon={iconName}\n      textStyle={selected ? {} : { color: \"white\" }}\n      style={[\n        { marginHorizontal: 2, maxHeight: 35 },\n        selected ?  undefined : { backgroundColor: \"transparent\", borderColor: \"white\" }\n      ].filter(Boolean)}\n      disabled={disabled}\n      onPress={() => onPress()}\n    >\n      {label}\n    </Chip>\n  )\n}\n\nexport default Badge;","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { RevokePermissionPayload } from \"../schema\";\n\n\nexport const MUTATION_REVOKE_PERMISSION = gql`\nmutation RevokePermission(\n  $dropzoneUserId: Int!,\n  $permissionName: Permission!,\n){\n  revokePermission(input: { id: $dropzoneUserId, permission: $permissionName }) {\n    dropzoneUser {\n      id\n      permissions\n    }\n    fieldErrors {\n      field\n      message\n    }\n    errors\n  }\n}\n`;\n\n\nexport default createMutation<{\n  dropzoneUserId: number,\n  permissionName: string,\n}, RevokePermissionPayload>(\n  MUTATION_REVOKE_PERMISSION, {\n    getPayload: (result) => result.revokePermission,\n    validates: {\n      permissionName: [\n        isRequired(\"Permission name is required\")\n      ]\n    }\n  }\n)","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { GrantPermissionPayload } from \"../schema\";\n\n\nexport const MUTATION_GRANT_PERMISSION = gql`\nmutation GrantPermission(\n  $dropzoneUserId: Int!,\n  $permissionName: Permission!,\n){\n  grantPermission(input: { id: $dropzoneUserId, permission: $permissionName }) {\n    dropzoneUser {\n      id\n      permissions\n    }\n    fieldErrors {\n      field\n      message\n    }\n    errors\n  }\n}\n`;\n\n\nexport default createMutation<{\n  dropzoneUserId: number,\n  permissionName: string,\n}, GrantPermissionPayload>(\n  MUTATION_GRANT_PERMISSION, {\n    getPayload: (result) => result.grantPermission,\n    validates: {\n      permissionName: [\n        isRequired(\"Permission name is required\")\n      ]\n    }\n  }\n)","import { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { Platform, RefreshControl, StyleSheet, Text } from 'react-native';\nimport { Chip, DataTable, Divider, IconButton, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport gql from 'graphql-tag';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { IconProps } from 'react-native-paper/lib/typescript/components/MaterialCommunityIcon';\nimport * as ImagePicker from 'expo-image-picker';\nimport { QUERY_PERMISSION_USER } from \"../../../components/chips/GcaChip\";\n\nimport { successColor, warningColor } from \"../../../constants/Colors\";\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Mutation, Permission, Query } from '../../../graphql/schema.d';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport CreditsSheet from '../../../components/dialogs/CreditsDialog/Credits';\nimport RigDialog from '../../../components/dialogs/Rig';\nimport EditUserSheet from '../../../components/dialogs/User';\n\nimport TableCard from \"./UserInfo/TableCard\";\nimport Header from \"./UserInfo/Header\";\nimport InfoGrid from './UserInfo/InfoGrid';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport useDropzoneUser from '../../../graphql/hooks/useDropzoneUser';\nimport Badge from '../../../components/Badge';\nimport useRestriction from '../../../hooks/useRestriction';\nimport useMutationRevokePermission from '../../../graphql/hooks/useMutationRevokePermission';\nimport useMutationGrantPermission from '../../../graphql/hooks/useMutationGrantPermission';\n\n\nconst MUTATION_UPDATE_IMAGE = gql`\n  mutation UpdateUserImage(\n    $id: Int,\n    $image: String\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        image: $image,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        image\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const forms = useAppSelector(state => state.forms);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const { currentUser } = useCurrentDropzone();\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = currentUser?.id === route.params.userId;\n\n  const { dropzoneUser, loading, refetch } = useDropzoneUser(Number(route.params.userId));\n  const canGrantPermission = useRestriction(Permission.GrantPermission);\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused])\n\n  const [mutationUpdateUser, mutation] = useMutation<Mutation>(MUTATION_UPDATE_IMAGE);\n  const revokePermission = useMutationRevokePermission({\n    onSuccess: (payload) => {\n      refetch();\n      dispatch(actions.notifications.showSnackbar({ message: \"Permission revoked\" }))\n    },\n    onError: (error) => {\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" }))\n    },\n  });\n  const grantPermission = useMutationGrantPermission({\n    onSuccess: (payload) => {\n      refetch();\n      dispatch(actions.notifications.showSnackbar({ message: \"Permission granted\" }));\n    },\n    onError: (error) => {\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" }))\n    },\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  \n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await ImagePicker.launchImageLibraryAsync({\n          mediaTypes: ImagePicker.MediaTypeOptions.Images,\n          allowsEditing: true,\n          aspect: [4, 3],\n          quality: 0.1,\n          base64: true,\n        }) as { base64: string };\n    \n\n        // Upload image\n        await mutationUpdateUser({\n          variables: {\n            id: Number(dropzoneUser?.user?.id),\n            image: `data:image/jpeg;base64,${result.base64}`,\n          }\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  const badges = dropzoneUser?.permissions?.filter((name) => /^actAs/.test(name)) || [];\n\n  const canAddTransaction = useRestriction(Permission.CreateUserTransaction);\n  const canUpdateUser = useRestriction(Permission.UpdateUser);\n  const shouldShowBadge = (permission: Permission) => canGrantPermission || badges.includes(permission);\n\n  return (\n    <>\n    {loading && <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />}\n    <ScrollableScreen contentContainerStyle={styles.content} refreshControl={<RefreshControl refreshing={loading} onRefresh={() => refetch()} />}>\n      <ScrollView horizontal style={{ width: \"100%\" }} contentContainerStyle={{ flexGrow: 1, padding: 8, justifyContent: \"space-evenly\", backgroundColor: state.theme.colors.primary }}>\n        {\n          [\n            Permission.ActAsPilot,\n            Permission.ActAsDzso,\n            Permission.ActAsGca,\n            Permission.ActAsRigInspector,\n            Permission.ActAsLoadMaster,\n          ].map((permission) =>\n            !shouldShowBadge(permission)\n              ? null\n              : <Badge\n                  type={permission as any}\n                  selected={badges.includes(permission)}\n                  onPress={() => !canGrantPermission ? null :\n                    badges.includes(permission) \n                      ? revokePermission.mutate({\n                          permissionName: permission,\n                          dropzoneUserId: Number(dropzoneUser.id)\n                        }, {\n                        update: async (client, { data }) => {\n                          const c = client.readQuery<Query>({\n                            query: QUERY_PERMISSION_USER,\n                            variables: {\n                              permissions: [permission],\n                              dropzoneId: Number(state.currentDropzoneId),\n                            }\n                          });\n\n                          const updatedList = (c?.dropzone?.dropzoneUsers?.edges || []).filter((edge) => edge.node.id !== dropzoneUser.id);\n                          \n                          client.writeQuery({\n                            query: QUERY_PERMISSION_USER,\n                            variables: {\n                              permissions: [permission],\n                              dropzoneId: Number(state.currentDropzoneId),\n                            },\n                            data: {\n                              ...c,\n                              dropzone: {\n                                ...c?.dropzone,\n                                dropzoneUsers: updatedList\n                              }\n                            }\n                          });\n\n                          return {\n                            data: {\n                              ...c,\n                              dropzone: {\n                                ...c?.dropzone,\n                                dropzoneUsers: updatedList\n                              }\n                            }\n                          };\n                        }\n                      })\n                      : grantPermission.mutate({\n                          permissionName: permission,\n                          dropzoneUserId: Number(dropzoneUser.id),\n                        }, {\n                          update: async (client, { data }) => {\n                            const c = client.readQuery<Query>({\n                              query: QUERY_PERMISSION_USER,\n                              variables: {\n                                permissions: [permission],\n                                dropzoneId: Number(state.currentDropzoneId),\n                              },\n                            });\n  \n                            const current = (c?.dropzone?.dropzoneUsers?.edges || []);\n                            const shouldUpdate = !!current.find((edge) => edge.node.id === dropzoneUser.id);\n\n                            \n                            const updatedGcaList = shouldUpdate? [\n                              ...(c?.dropzone?.dropzoneUsers?.edges || []).map(\n                                (edge) => edge.node.id !== dropzoneUser.id\n                                ? edge\n                                : {\n                                    ...edge,\n                                    node: {\n                                      ...edge.node,\n                                      ...data.grantPermission?.dropzoneUser,\n                                    }\n                                  }\n                              ),\n                            ] : [\n                              ...(c?.dropzone?.dropzoneUsers?.edges || []),\n                              { edge: { node: data.grantPermission?.dropzoneUser}}\n                            ]\n                            const newData = {\n                              ...c,\n                              dropzone: {\n                                ...c?.dropzone,\n                                dropzoneUsers: updatedGcaList\n                              }\n                            };\n                            client.writeQuery({\n                              query: QUERY_PERMISSION_USER,\n                              variables: {\n                                dropzoneId: Number(state.currentDropzoneId),\n                                permissions: [permission]\n                              },\n                              data: newData\n                            });\n\n                            return {\n                              data: newData\n                            };\n                          }\n                        })\n                  }\n                />\n          )\n        }\n      </ScrollView>\n      <Header\n        dropzoneUser={dropzoneUser!}\n        canEdit={isSelf}\n        onEdit={() => {\n          if (dropzoneUser?.user) {\n            dispatch(actions.forms.user.setOpen(dropzoneUser?.user));\n          }\n        }}\n        onPressAvatar={onPickImage}\n      >\n       \n\n        <ScrollView horizontal style={{ marginVertical: 8 }}>\n          <Chip\n            // @ts-ignore\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"email\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n          >\n            {dropzoneUser?.user?.email  || \"-\"}\n          </Chip>\n\n          <Chip\n            // @ts-ignore\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"phone\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n          >\n            {dropzoneUser?.user?.phone  || \"-\"}\n          </Chip>\n\n          <Chip\n            // @ts-ignore\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"card-account-details-star-outline\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n            onPress={() => {\n              if (canUpdateUser) {\n                dispatch(actions.forms.dropzoneUser.setOpen(dropzoneUser!));\n              }\n            }}\n          >\n            {!dropzoneUser?.expiresAt\n                  ? \"Not a member\"\n                  : format((dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")}\n          </Chip>\n        </ScrollView>\n        <Divider style={styles.divider} />\n        <InfoGrid\n          items={[\n            {\n              title: \"Funds\",\n              value: `$${dropzoneUser?.credits || 0}`,\n              onPress: () => {\n                if (dropzoneUser && canAddTransaction) {\n                  dispatch(actions.forms.credits.setOpen(dropzoneUser));\n                }\n              }\n            },\n            { title: \"License\", value: `${dropzoneUser?.user?.license?.name || \"-\"}`},\n            { title: \"Exit weight\", value: Math.round(Number(dropzoneUser?.user?.exitWeight)).toString() || \"-\" }\n          ]}\n        />\n        <Divider style={[styles.divider, { backgroundColor: \"white\" }]} />\n      </Header>\n      \n      <TableCard title=\"Rigs\" buttonIcon=\"plus\" onPressButton={() => dispatch(actions.forms.rig.setOpen(true))}>\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>\n              Container\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Repack due\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Canopy size\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Inspected\n            </DataTable.Title>\n          </DataTable.Header>\n\n          {\n            dropzoneUser?.user?.rigs?.map((rig) =>\n              <DataTable.Row\n                key={`rig-${rig!.id}`}\n                onPress={() => {\n                  dispatch(actions.forms.rig.setOpen(rig));\n                }}\n                onLongPress={() =>\n                  navigation.navigate(\"RigInspectionScreen\", {\n                    dropzoneUserId: Number(route.params.userId),\n                    rig\n                  })\n                }\n                pointerEvents=\"none\"\n              >\n                <DataTable.Cell>\n                  {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {`${rig?.canopySize}`}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  <IconButton\n                    icon={\n                      dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                      ? \"eye-check\"\n                      : \"eye-minus\"\n                    }\n                    color={\n                      dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                      ? successColor\n                      : warningColor\n                    }\n                    onPress={() =>\n                      navigation.navigate(\"RigInspectionScreen\", {\n                        dropzoneUserId: Number(route.params.userId),\n                        rig\n                      })\n                    }\n                  />\n                </DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n        </DataTable>\n      </TableCard>\n        \n      <TableCard\n        title=\"Transactions\"\n        {\n          ...canAddTransaction ? {\n            buttonIcon: \"plus\",\n            onPressButton: () => {\n              if (dropzoneUser) {\n                dispatch(actions.forms.credits.setOpen(dropzoneUser!));\n              }\n            }\n          } : {}\n        }\n      >\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Time</DataTable.Title>\n            <DataTable.Title>Type</DataTable.Title>\n            <DataTable.Title>Message</DataTable.Title>\n            <DataTable.Title numeric>Amount</DataTable.Title>\n          </DataTable.Header>\n          {\n            dropzoneUser?.transactions?.edges?.map((edge) => (\n              <DataTable.Row key={`transaction-${edge?.node?.id}`}>\n                <DataTable.Cell>\n                  <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{!edge?.node?.createdAt ? null : format(edge?.node?.createdAt * 1000, \"yyyy/MM/dd hh:mm\")}</Text>\n                </DataTable.Cell>\n                <DataTable.Cell>\n                  <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{edge?.node?.status}</Text>\n                </DataTable.Cell>\n                <DataTable.Cell>\n                  {edge?.node?.message}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {edge?.node?.amount}\n                </DataTable.Cell>\n              </DataTable.Row>\n            ))\n          }\n        </DataTable>\n      </TableCard>\n    </ScrollableScreen>\n        \n    <RigDialog\n      onClose={() => dispatch(actions.forms.rig.setOpen(false))}\n      onSuccess={() => dispatch(actions.forms.rig.setOpen(false))}\n      open={forms.rig.open}\n      userId={Number(dropzoneUser?.user?.id)}\n    />\n    \n    <DropzoneUserDialog\n      onClose={() => dispatch(actions.forms.dropzoneUser.setOpen(false))}\n      onSuccess={(user) => {\n        dispatch(actions.forms.dropzoneUser.setOpen(false));\n        if (currentUser?.id === dropzoneUser?.id) {\n          dispatch(actions.global.setUser(user.user));\n        }\n      }}\n      open={forms.dropzoneUser.open}\n    />\n\n    <CreditsSheet\n      onClose={() => dispatch(actions.forms.credits.setOpen(false))}\n      onSuccess={() => dispatch(actions.forms.credits.setOpen(false))}\n      open={forms.credits.open}\n      dropzoneUser={dropzoneUser || undefined}\n    />\n\n    <EditUserSheet\n      onClose={() => dispatch(actions.forms.user.setOpen(false))} \n      onSuccess={() => dispatch(actions.forms.user.setOpen(false))}\n      open={forms.user.open}\n    />\n  </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    paddingBottom: 56,\n    paddingHorizontal: 0,\n  },\n  divider: {\n    height: 1,\n    width: '100%',\n  },\n  chip: {\n    margin: 1,\n    backgroundColor: \"transparent\",\n    minHeight: 23,\n    borderWidth: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    display: \"flex\",\n  },\n  chipTitle: {\n    color: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 12,\n    lineHeight: 24,\n    textAlignVertical: \"center\"\n  }\n});\n"],"sourceRoot":""}