{"version":3,"sources":["DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","components/layout/DialogOrSheet.web.tsx","components/forms/rig/RigForm.tsx","components/dialogs/Rig.tsx","screens/authenticated/settings/DropzoneRigsScreen.tsx"],"names":["DataTableCell","rest","style","styles","numeric","numberOfLines","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent","DataTableHeader","borderBottomColor","color","theme","header","height","paddingHorizontal","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","content","pointerEvents","DataTable","width","DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","colors","accent","Title","Content","ScrollArea","Actions","onClose","create","button","borderRadius","padding","contentContainer","paddingBottom","sheet","elevation","backgroundColor","flexGrow","display","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","RigForm","forms","rig","dispatch","useAppDispatch","canCreateRigs","useRestriction","Permission","CreateRig","View","TextInput","field","mode","error","fields","make","value","onChangeText","newValue","actions","setField","HelperText","type","model","serial","canopySize","toString","keyboardType","Number","showTypeSelect","ChipSelect","items","renderItemLabel","item","isDisabled","selected","rigType","onChangeSelected","timestamp","repackExpiresAt","Date","getTime","onChange","time","marginBottom","MUTATION_CREATE_RIG","gql","MUTATION_UPDATE_RIG","RigDialog","userId","dropzoneId","useMutation","mutationCreateRig","createData","mutationUpdateRig","updateData","isLoading","validate","hasErrors","setFieldError","JSON","stringify","onSave","a","async","mutation","original","id","variables","response","result","data","updateRig","createRig","fieldErrors","map","message","errors","length","notifications","showSnackbar","variant","onSuccess","snapPoints","reset","QUERY_DROPZONE_RIGS","DropzoneRigsScreen","rigForm","useQuery","currentDropzoneId","refetch","isFocused","useIsFocused","canCreateRig","CreateDropzoneRig","contentContainerStyle","refreshControl","refreshing","onRefresh","Header","dropzone","rigs","Row","key","Cell","setOpen","join","format","onValueChange","isPublic","fab","small","position","margin","bottom","empty"],"mappings":"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","file":"static/js/9.7099aa01.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { Permission } from '../../../graphql/schema.d';\n\n\ninterface IRigForm {\n  showTypeSelect?: boolean;\n}\nexport default function RigForm(props: IRigForm) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n\n  const canCreateRigs = useRestriction(Permission.CreateRig);\n\n  return ( \n    <View>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      \n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      { !props.showTypeSelect ? null : (\n        <ChipSelect\n          items={[\"student\", \"sport\", \"tandem\"]}\n          renderItemLabel={(item) => item}\n          isDisabled={(item) => !canCreateRigs ? item !== \"sport\" : false}\n          selected={[state.fields.rigType?.value || \"sport\"]}\n          onChangeSelected={([rigType]) =>\n            dispatch(actions.forms.rig.setField([\"rigType\", rigType]))\n          }\n        />\n      )}\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.forms.rig.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n      <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.repackExpiresAt.error || \"\" }\n      </HelperText>\n\n      \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Mutation } from \"../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\ninterface IRigDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IRigDialog) {\n  const { open, onClose, userId, dropzoneId } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.rig);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const isLoading = createData.loading || updateData.loading;\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"repackExpiresAt\", \"You must select a repack date in the future\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: Number(state.original?.id) } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          rigType: state.fields.rigType.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(actions.forms.rig.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(actions.forms.rig.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(actions.forms.rig.setFieldError([\"serial\", message]));\n          case \"canopy_size\":\n            return dispatch(actions.forms.rig.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(actions.forms.rig.setFieldError([\"repackExpiresAt\", message]));\n          case \"rig_type\":\n            return dispatch(actions.forms.rig.setFieldError([\"rigType\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, mutationUpdateRig, props.onSuccess])\n\n  return (\n    <DialogOrSheet\n      title={ state.original?.id ? \"Edit rig\" : \"New rig\"}\n      open={open}\n      snapPoints={[0, 580]}\n      onClose={() => {\n        props.onClose();\n        dispatch(actions.forms.rig.reset());\n      }}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n      loading={isLoading}\n    >\n      <RigForm showTypeSelect={!!props.dropzoneId} />\n    </DialogOrSheet>\n  )\n}\n","import { useMutation, useQuery } from '@apollo/client';\nimport { useIsFocused,  } from '@react-navigation/core';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, RefreshControl } from 'react-native';\nimport { FAB, DataTable, ProgressBar } from 'react-native-paper';\nimport { Mutation, Permission, Query } from \"../../../graphql/schema.d\";\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { format } from 'date-fns';\nimport RigDialog from '../../../components/dialogs/Rig';\nimport { Switch } from 'react-native-gesture-handler';\nimport useRestriction from '../../../hooks/useRestriction';\n\n\nconst QUERY_DROPZONE_RIGS = gql`\n  query QueryDropzoneRigs(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      rigs {\n        id\n        make\n        isPublic\n        model\n        serial\n        rigType\n        repackExpiresAt\n        canopySize\n        packValue\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateDropzoneRig(\n    $id: Int!\n    $isPublic: Boolean,\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          isPublic: $isPublic\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        isPublic\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        dropzone {\n          id\n          rigs {\n            id\n            make\n            model\n            isPublic\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneRigsScreen() {\n  const state = useAppSelector(state => state.global);\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONE_RIGS, {\n    variables: {\n      dropzoneId: Number(state.currentDropzoneId)\n    }\n  });\n  const dispatch = useAppDispatch();\n  const isFocused = useIsFocused();\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const canCreateRig = useRestriction(Permission.CreateDropzoneRig);\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  return (\n      <ScrollableScreen style={styles.container} contentContainerStyle={[styles.content, {  backgroundColor: \"white\" }]} refreshControl={<RefreshControl refreshing={loading} onRefresh={() => refetch()} />}>\n      <ProgressBar visible={loading || updateData.loading} color={state.theme.colors.accent} />\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>\n              Container\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Repack due\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Canopy size\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Type\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Public\n            </DataTable.Title>\n          </DataTable.Header>\n\n          {\n            data?.dropzone?.rigs?.map((rig) =>\n              <DataTable.Row key={`rig-${rig!.id}`}>\n                <DataTable.Cell\n                  onPress={() => {\n                    dispatch(actions.forms.rig.setOpen(rig));\n                  }}\n                >\n                  {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {`${rig?.canopySize}`}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {rig.rigType}\n                </DataTable.Cell>\n                  <DataTable.Cell numeric>\n                    <Switch\n                      onValueChange={async () => {\n                        const { data: result } = await mutationUpdateRig({\n                          variables: {\n                            id: Number(rig.id),\n                            isPublic: !rig.isPublic\n                          }\n                        });\n\n                        if (result?.updateRig?.errors?.length) {\n                          dispatch(\n                            actions.notifications.showSnackbar({\n                              message: result?.updateRig.errors[0],\n                              variant: \"error\"\n                            })\n                          )\n                        }\n                      }}\n                      value={!!rig.isPublic}\n                    />\n                </DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n        </DataTable>\n\n        <RigDialog\n          onClose={() => dispatch(actions.forms.rig.setOpen(false))}\n          onSuccess={() => {\n            dispatch(actions.forms.rig.setOpen(false))\n            refetch();\n          }}\n          dropzoneId={Number(state.currentDropzoneId)}\n          open={rigForm.open}\n        />\n        \n        <FAB\n          visible={canCreateRig}\n          style={styles.fab}\n          small\n          icon=\"plus\"\n          onPress={() =>\n            dispatch(actions.forms.rig.setOpen(true))\n          }\n          label=\"New rig\"\n        />\n      </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    display: \"flex\"\n  },\n  content: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}