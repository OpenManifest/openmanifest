{"version":3,"sources":["screens/authenticated/settings/DropzoneMasterLogScreen.tsx"],"names":["QUERY_MASTER_LOG","gql","DropzoneMasterLogScreen","currentDropzone","useCurrentDropzone","React","startOfDay","Date","getTime","timestamp","setTimestamp","navigation","useNavigation","setOptions","headerRight","onChange","time","color","data","useQuery","variables","dropzoneId","Number","dropzone","id","Math","floor","allSlots","flatten","masterLog","loads","map","slots","groupBy","jumpType","name","style","width","load","marginVertical","Title","title","loadNumber","Content","Item","description","pilot","user","gca","plane","registration","Header","numeric","slot","Row","Cell","ticketType","altitude"],"mappings":"oTAcMA,EAAmBC,YAAH,22BA0DP,SAASC,IAA2B,IAAD,cAC1CC,EAAkBC,cACxB,EAAkCC,WAAeC,YAAW,IAAIC,MAAQC,WAAxE,WAAOC,EAAP,KAAkBC,EAAlB,KACMC,EAAaC,0BAGnBP,mBAAsB,WACpBM,EAAWE,WAAW,CACpBC,YAAa,kBACX,gBAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAUN,EAAoB,IAAPM,IACjCP,UAAWA,EAAY,IACvBQ,MAAM,iBAGX,CAACN,EAAYF,IAEhB,IAAQS,EAASC,mBAAgBnB,EAAkB,CACjDoB,UAAW,CACTC,WAAYC,OAAM,MAACnB,GAAD,SAACA,EAAiBoB,eAAlB,EAAC,EAA2BC,IAC9Cf,UAAWgB,KAAKC,MAAMjB,EAAY,QAH9BS,KAOFS,EAAWC,IAAO,MACtBV,GADsB,SACtBA,EAAMK,WADgB,SACtB,EAAgBM,YADM,SACtB,EAA2BC,YADL,EACtB,EAAkCC,KAAI,qBAAGC,UAGnBC,IACtBN,GACA,gBAAGO,EAAH,EAAGA,SAAH,aAAkBA,OAAlB,EAAkBA,EAAUC,QAG9B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAMC,MAAO,CAAEC,MAAO,UADxB,MAKInB,GALJ,SAKIA,EAAMK,WALV,SAKI,EAAgBM,YALpB,SAKI,EAA2BC,YAL/B,EAKI,EAAkCC,KAAI,SAACO,GAAD,2BACpC,gBAAC,IAAD,CAAMF,MAAO,CAAEC,MAAO,OAAQE,eAAgB,KAC5C,gBAAC,IAAKC,MAAN,CAAYC,MAAK,QAAUH,EAAKI,aAChC,gBAAC,IAAKC,QAAN,KACE,gBAAC,IAAKC,KAAN,CACEH,MAAM,QACNI,YAAW,MAAEP,GAAF,SAAEA,EAAMQ,QAAR,SAAE,EAAaC,WAAf,EAAE,EAAmBZ,OAElC,gBAAC,IAAKS,KAAN,CACEH,MAAM,MACNI,YAAW,MAAEP,GAAF,SAAEA,EAAMU,MAAR,SAAE,EAAWD,WAAb,EAAE,EAAiBZ,OAEhC,gBAAC,IAAKS,KAAN,CACEH,MAAM,QACNI,YACM,MAAJP,GAAA,SAAAA,EAAMW,QAAN,EAAazB,IAAb,MAAqBc,GAArB,SAAqBA,EAAMW,YAA3B,EAAqB,EAAad,MAAlC,YAA2CG,GAA3C,SAA2CA,EAAMW,YAAjD,EAA2C,EAAaC,cAAxD,IAA0E,sBAG9E,gBAAC,IAAD,KACE,gBAAC,IAAUC,OAAX,KACE,gBAAC,IAAUX,MAAX,aACA,gBAAC,IAAUA,MAAX,kBACA,gBAAC,IAAUA,MAAX,CAAiBY,SAAO,GAAxB,aAJJ,SAQId,EAAKN,YART,EAQI,EAAYD,KAAI,SAACsB,GAAD,iBACd,gBAAC,IAAUC,IAAX,KACE,gBAAC,IAAUC,KAAX,cAAiBF,EAAKN,WAAtB,EAAiB,EAAWZ,MAC5B,gBAAC,IAAUoB,KAAX,cAAiBF,EAAKnB,eAAtB,EAAiB,EAAeC,MAChC,gBAAC,IAAUoB,KAAX,CAAgBH,SAAO,GAAvB,SAAyBC,EAAKG,iBAA9B,EAAyB,EAAiBC","file":"static/js/26.e1e89be5.chunk.js","sourcesContent":["import { useQuery } from \"@apollo/client\";\nimport groupBy from \"lodash/groupBy\";\nimport flatten from \"lodash/flatten\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Card, DataTable, List } from \"react-native-paper\";\nimport startOfDay from \"date-fns/startOfDay\";\nimport ScrollableScreen from \"../../../components/layout/ScrollableScreen\";\nimport { Query, Slot } from \"../../../graphql/schema.d\";\nimport DatePicker from \"../../../components/input/date_picker/DatePicker\";\nimport { View } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\n\nconst QUERY_MASTER_LOG = gql`\nquery MasterLog($dropzoneId: Int!, $timestamp: Int!) {\n  dropzone(id: $dropzoneId) {\n    id\n    masterLog(date: $timestamp) {\n      id\n      dzso {\n        id\n        user {\n          id\n          name\n        }\n      }\n\n      loads {\n        id\n        name\n        loadNumber\n\n        loadMaster {\n          id\n          user {\n            name\n          }\n        }\n\n        gca {\n          id\n          user {\n            name\n          }\n        }\n\n        slots {\n          id\n          user {\n            id\n            name\n            license {\n              id\n              name\n            }\n          }\n          ticketType {\n            id\n            name\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\nexport default function DropzoneMasterLogScreen() {\n  const currentDropzone = useCurrentDropzone();\n  const [timestamp, setTimestamp] = React.useState(startOfDay(new Date()).getTime());\n  const navigation = useNavigation();\n\n\n  React.useLayoutEffect(() => {\n    navigation.setOptions({\n      headerRight: () =>\n        <DatePicker\n          onChange={(time) => setTimestamp(time * 1000)}\n          timestamp={timestamp / 1000}\n          color=\"#FFFFFF\"\n        />\n    })\n  }, [navigation, timestamp])\n\n  const { data } = useQuery<Query>(QUERY_MASTER_LOG, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n      timestamp: Math.floor(timestamp / 1000),\n    },\n  });\n\n  const allSlots = flatten(\n    data?.dropzone?.masterLog?.loads?.map(({ slots }) => slots)\n  ) as Slot[];\n\n  const slotsByJumpType = groupBy(\n    allSlots,\n    ({ jumpType }) => jumpType?.name,\n  );\n\n  return (\n    <ScrollableScreen>\n      <View style={{ width: \"100%\" }}>\n        \n      </View>\n      {\n        data?.dropzone?.masterLog?.loads?.map((load) =>\n          <Card style={{ width: \"100%\", marginVertical: 16 }}>\n            <Card.Title title={`Load ${load.loadNumber}`} />\n            <Card.Content>\n              <List.Item\n                title=\"Pilot\"\n                description={load?.pilot?.user?.name}\n              />\n              <List.Item\n                title=\"GCA\"\n                description={load?.gca?.user?.name}\n              />\n              <List.Item\n                title=\"Plane\"\n                description={\n                  load?.plane?.id ? `${load?.plane?.name} (${load?.plane?.registration})` : \"No plane selected\"\n                }\n              />\n              <DataTable>\n                <DataTable.Header>\n                  <DataTable.Title>Name</DataTable.Title>\n                  <DataTable.Title>Jump type</DataTable.Title>\n                  <DataTable.Title numeric>Altitude</DataTable.Title>\n                </DataTable.Header>\n\n                {\n                  load.slots?.map((slot) =>\n                    <DataTable.Row>\n                      <DataTable.Cell>{slot.user?.name}</DataTable.Cell>\n                      <DataTable.Cell>{slot.jumpType?.name}</DataTable.Cell>\n                      <DataTable.Cell numeric>{slot.ticketType?.altitude}</DataTable.Cell>\n                    </DataTable.Row>\n                  )\n                }\n              </DataTable>\n            </Card.Content>\n          </Card>\n        )\n      }\n    </ScrollableScreen>\n  );\n}"],"sourceRoot":""}