{"version":3,"sources":["components/forms/credits/slice.tsx","components/forms/dropzone/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/plane/slice.tsx","components/forms/rig/slice.tsx","components/forms/rig_inspection/slice.tsx","components/forms/rig_inspection_template/slice.tsx","components/forms/manifest/slice.tsx","components/forms/manifest_group/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/user/slice.tsx","components/forms/slice.ts","screens/authenticated/users/slice.ts","screens/unauthenticated/login/slice.ts","screens/authenticated/manifest/slice.ts","screens/unauthenticated/signup/slice.ts","screens/slice.ts","redux/store.ts","constants/Colors.ts","components/notifications/slice.ts","components/layout/ScrollableScreen.tsx","redux/index.ts","redux/global.ts","hooks/useColorScheme.web.ts","assets/images/logo.png","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","graphql/hooks/useCurrentDropzone.ts","components/notifications/Notifications.tsx","hooks/usePalette.ts","graphql/hooks/useMutationUpdateUser.ts","components/forms/dropzone/DropzoneForm.tsx","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","navigation/SetupWarning.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","navigation/tabs/notifications.tsx","navigation/tabs/profile.tsx","navigation/tabs/settings.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","navigation/RootNavigator.tsx","App.tsx","hooks/useCachedResources.ts","web-build/register-service-worker.js","assets/fonts/SpaceMono-Regular.ttf","components/Themed.tsx","graphql/createMutation.tsx","hooks/useRestriction.ts","graphql/schema.d.ts"],"names":["initialState","original","open","fields","amount","value","error","status","message","createSlice","name","reducers","setField","state","action","payload","field","setFieldError","setOpen","reset","federation","secondaryColor","primaryColor","banner","isCreditSystemEnabled","isPublic","key","typedKey","role","expiresAt","registration","minSlots","maxSlots","hours","nextMaintenanceHours","make","model","serial","repackExpiresAt","canopySize","rigType","ok","setOk","index","item","console","log","map","idx","setFields","JSON","parse","definition","err","jumpType","extras","load","rig","ticketType","dropzoneUser","exitWeight","passengerName","passengerExitWeight","users","setFromSlots","slot","id","Number","user","rigId","find","i","setDropzoneUsers","dzUser","availableRigs","cost","altitude","allowManifestingSelf","isTandem","email","phone","rigs","license","setFederation","extra","credits","dropzone","plane","rigInspection","rigInspectionTemplate","manifest","manifestGroup","isSearchVisible","searchText","setSearchText","setSearchVisible","password","setEmail","setPassword","setEmailError","setPasswordError","selectedUsers","setSelected","passwordConfirmation","login","signup","initialStateGlobal","initialStateNotification","persistConfig","storage","Platform","OS","require","default","AsyncStorage","whitelist","screenReducers","Object","keys","screens","reduce","obj","reducer","formReducers","forms","screenActions","actions","global","globalSlice","notifications","notificationSlice","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","successColor","warningColor","light","text","background","tint","tabIconDefault","tabIconSelected","success","warning","info","dark","queue","hideSnackbar","slice","showSnackbar","push","ScrollableScreen","props","height","useWindowDimensions","theme","style","children","contentContainerStyle","rest","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","styles","container","backgroundColor","colors","surface","content","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","primary","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","currentUser","currentDropzone","currentDropzoneId","permissions","credentials","expoPushToken","isDarkMode","setCredentials","setUser","setExpoPushToken","setPermissions","setPrimaryColor","setAccentColor","accent","setDropzone","toggleDarkMode","logout","useColorScheme","module","exports","ticketTypeIds","ticketTypes","gca","dispatchAt","isOpen","loadMaster","pilot","QUERY_DROPZONE","gql","useCurrentDropzone","dropzoneId","pushToken","useQuery","variables","earliestTimestamp","startOfDay","Date","getTime","fetchPolicy","mutationUpdateUser","useMutationUpdateUser","onSuccess","onError","React","userId","data","remoteToken","localToken","loading","called","mutate","MyComponent","dispatch","palette","usePalette","notification","length","variantStyle","testID","visible","onDismiss","duration","variant","colorScheme","MUTATION_UPDATE_USER","createMutation","getPayload","result","updateUser","fieldErrorMap","exit_weight","QUERY_FEDERATIONS","DropzoneForm","federationMenuOpen","setFederationMenuOpen","colorPicker","setColorPicker","federations","stringify","onPickImage","a","async","getDocumentAsync","multiple","type","uri","Title","Content","padding","onColorSelected","color","sliderComponent","SliderComponent","defaultColor","undefined","hideSliders","Actions","onPress","disabled","current","next","width","maxHeight","marginVertical","title","Cover","source","resizeMode","justifyContent","Subheader","subheader","mode","label","onChangeText","newValue","anchor","Item","icon","left","description","display","marginBottom","paddingLeft","httpLink","createHttpLink","Constants","url","Apollo","errorLink","graphQLErrors","networkError","some","extensions","code","locations","path","authLink","setContext","_","headers","accessToken","tokenType","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","prefixes","Linking","config","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","View","Text","TouchableOpacity","replace","linkText","fontSize","fontWeight","marginTop","paddingVertical","Warning","Paragraph","Button","SetupWarning","isRigSetUp","isExitWeightDefined","isMembershipInDate","isReserveInDate","isRigInspectionComplete","useNavigation","missing","filter","Boolean","join","navigate","flexDirection","QUERY_CURRENT_USER","AppBar","previous","scene","hideWarnings","contextMenuOpen","setContextMenuOpen","useLazyQuery","loadData","Appbar","Header","BackAction","goBack","descriptor","options","titleStyle","headerRight","tintColor","Chip","Menu","IconButton","Divider","isRigInspected","rigInspections","inspection","isRepackInDate","ManifestScreen","CreateLoadScreen","ManifestGroupScreen","ManifestGroupUserSelectScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","NotificationsScreen","Profile","Notifications","UpdateUserScreen","ProfileTab","initialParams","SettingsScreen","TicketTypeSettingsScreen","CreatePlaneScreen","UpdatePlaneScreen","UpdateDropzoneScreen","PlanesScreen","RigInspectionTemplateScreen","DropzoneRigsScreen","DropzonePermissionScreen","DropzoneMasterLogScreen","CreateExtraScreen","UpdateExtraScreen","ExtrasScreen","Settings","SettingsTab","UsersScreen","SearchableAppBar","RigInspectionScreen","searchVisible","onSearch","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","useRestriction","Permission","ReadUser","canUpdateDropzone","UpdateDropzone","canUpdatePlane","UpdatePlane","canUpdateTicketTypes","UpdateTicketType","canUpdateExtras","UpdateExtra","canUpdatePermissions","GrantPermission","canUpdateDzRigs","UpdateDropzoneRig","canUpdateRigInspectionTemplate","UpdateFormTemplate","shouldShowSettings","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","size","MaterialCommunityIcons","unmountOnBlur","NotificationTab","UsersTab","QUERY_DROPZONES","refetch","SafeAreaView","FlatList","dropzones","edges","numColumns","refreshing","onRefresh","ListEmptyComponent","empty","renderItem","Card","Dimensions","get","margin","node","shouldPushRoute","screen","FAB","fab","small","position","right","bottom","MUTATION_CREATE_DROPZONE","createDropzone","validates","isRequired","useMutationCreateDropzone","e","onFieldError","federationId","separator","Stack","MUTATION_LOG_IN","useMutation","mutationLogin","onLogin","emailRegex","RegExp","hasError","test","userLogin","authenticatable","Image","logo","TextInput","HelperText","secureTextEntry","labelStyle","buttonLabel","button","textButtonLabel","textButton","paddingTop","maxWidth","MUTATION_USER_SIGNUP","userSignUp","isEmail","SignupScreen","useMutationSignUp","onSignUp","toString","keyboardType","Affix","parseFloat","textContentType","passwordRules","licenseId","borderColor","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","notificationListener","responseListener","isDevice","existingStatus","finalStatus","warn","token","importance","MAX","vibrationPattern","lightColor","registerForPushNotificationsAsync","then","request","body","response","fallback","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","App","isLoadingComplete","setLoadingComplete","SplashScreen","Font","Ionicons","font","useCachedResources","ActivityIndicator","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","navigator","window","addEventListener","serviceWorker","register","scope","catch","useThemeColor","colorName","colorFromProps","Colors","darkColor","otherProps","pattern","callback","mutation","opts","hasErrors","forEach","x","variable","validator","validate","fieldErrors","fieldName","errors","QUERY_PERMISSIONS","permission","includes"],"mappings":"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","file":"static/js/app.a0a71813.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser, Maybe, Transaction } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Transaction,\n  | \"amount\"\n  | \"status\"\n  | \"message\"\n>;\n\ninterface IDropzoneEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Transaction[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    amount: {\n      value: null,\n      error: null,\n    },\n    status: {\n      value: \"deposit\",\n      error: null,\n    },\n    message: {\n      value: \"\",\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/credits',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<DropzoneUser | boolean>) => {\n      \n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && (state.fields[field as T]).error) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneUserEditState = {\n  original: null,\n  open: false,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/dropzoneUser',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneUserEditState, action: PayloadAction<boolean | DropzoneUser>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema.d\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IPlaneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IPlaneEditState, action: PayloadAction<boolean | Plane>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.hours.value = action.payload.hours!;\n        state.fields.minSlots.value = action.payload.minSlots!;\n        state.fields.maxSlots.value = action.payload.maxSlots!;\n        state.fields.name.value = action.payload.name!;\n        state.fields.registration.value = action.payload.registration!;\n        state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n      }\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n  | \"rigType\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IRigEditState = {\n  original: null,\n  open: false,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n    rigType: {\n      value: \"sport\",\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IRigEditState, action: PayloadAction<boolean | Rig>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldItem } from \"../rig_inspection_template/slice\";\n\n\n\ninterface IRigInspectionEditState {\n  fields: FieldItem[],\n  open: boolean;\n  ok: boolean;\n}\n\nexport const initialState: IRigInspectionEditState = {\n  fields: [],\n  open: false,\n  ok: false\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n\n    setOk: (state: IRigInspectionEditState, action: PayloadAction<boolean>) => {\n      state.ok = action.payload;\n    },\n    setField: (state: IRigInspectionEditState, action: PayloadAction<[number, FieldItem]>) => {\n      const [index, item] = action.payload;\n\n      console.log({ item, index, fields: state.fields });\n      state.fields = state.fields.map((field, idx) => idx === index ? item : field);\n    },\n\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<string>) => {\n      try {\n        state.fields = JSON.parse(action.payload)\n      } catch (error) {\n        console.error(\"Failed to read rig inspection template\", error.message, action.payload);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.ok = initialState.ok;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, FormTemplate } from \"../../../graphql/schema.d\";\n\n\nexport interface FieldItem {\n  label: string;\n  description?: string;\n  isRequired?: boolean;\n  valueType: \"integer\" | \"boolean\" | \"date\" | \"string\";\n  value?: number | boolean | string;\n}\n\ninterface IRigInspectionEditState {\n  original: FormTemplate | null;\n  fields: FieldItem[],\n}\n\nexport const initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'forms/rigInspection',\n  initialState,\n  reducers: {\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<FieldItem[]>) => {\n      state.fields = action.payload;\n    },\n\n    setOpen: (state: IRigInspectionEditState, action: PayloadAction<FormTemplate>) => {\n      state.original = action.payload;\n\n      try {\n        state.fields = JSON.parse(action.payload.definition!);\n      } catch(err) {\n        console.log(\"Invalid json: \", action.payload.definition);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"dropzoneUser\"\n  | \"exitWeight\"\n  | \"extras\"\n  | \"passengerExitWeight\"\n  | \"passengerName\"\n>\n\ninterface ISlotEditState {\n  original: Slot | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Fields[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    dropzoneUser: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n    passengerName: {\n      value: null,\n      error: null,\n    },\n    passengerExitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifest',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | Slot>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { pick, pickBy } from \"lodash\";\nimport { SlotUser, Slot, DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ninterface IFields extends Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"extras\"\n> {\n  users: SlotUser[];\n}\n\ninterface ISlotEditState {\n  original: IFields | null;\n  open: boolean;\n  fields: {\n    [K in keyof IFields] - ?: {\n      value: IFields[K] | null;\n      error: string | null;\n    }\n  },\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    users: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifestGroup',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      \n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setFromSlots: (state: ISlotEditState, action: PayloadAction<Slot[]>) => {\n      state.fields.users.value = action.payload.map((slot) => ({\n          id: Number(slot.user?.id),\n          rigId: Number(slot.rig?.id),\n          exitWeight: Number(slot.exitWeight),\n        })\n      ) as SlotUser[];\n\n      state.fields.jumpType.value = action.payload.find(i => i)?.jumpType;\n      state.fields.load.value = action.payload.find(i => i)?.load!;\n      state.fields.extras.value = action.payload.find(i => i)?.extras;\n    },\n\n    setDropzoneUsers: (state: ISlotEditState, action: PayloadAction<DropzoneUser[]>) => {\n      state.fields.users.value = action.payload.map<SlotUser>((dzUser) => ({\n          id: Number(dzUser.user.id),\n          rigId: Number(dzUser?.availableRigs?.find(({ id }) => id)?.id),\n          exitWeight: Number(dzUser?.user.exitWeight),\n        })\n      ) as SlotUser[];\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | IFields>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nexport const initialState: ITicketTypeEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/ticketType',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ITicketTypeEditState, action: PayloadAction<boolean | TicketType>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.altitude.value = action.payload.altitude!;\n        state.fields.cost.value = action.payload.cost!;\n        state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  open: boolean;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IUserEditState = {\n  original: null,\n  open: false,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/user',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserEditState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.federation.value = action.payload.license?.federation!;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import * as credits from \"./credits/slice\";\nimport * as dropzone from \"./dropzone/slice\";\nimport * as dropzoneUser from \"./dropzone_user/slice\";\nimport * as extra from \"./extra/slice\";\nimport * as load from \"./load/slice\";\nimport * as plane from \"./plane/slice\";\nimport * as rig from \"./rig/slice\";\nimport * as rigInspection from \"./rig_inspection/slice\";\nimport * as rigInspectionTemplate from \"./rig_inspection_template/slice\";\nimport * as manifest from \"./manifest/slice\";\nimport * as manifestGroup from \"./manifest_group/slice\";\nimport * as ticketType from \"./ticket_type/slice\";\nimport * as user from \"./user/slice\";\n\nexport const initialState = {\n  credits: credits.initialState,\n  dropzone: dropzone.initialState,\n  dropzoneUser: dropzoneUser.initialState,\n  extra: extra.initialState,\n  load: load.initialState,\n  plane: plane.initialState,\n  rig: rig.initialState,\n  rigInspection: rigInspection.initialState,\n  rigInspectionTemplate: rigInspectionTemplate.initialState,\n  manifest: manifest.initialState,\n  manifestGroup: manifestGroup.initialState,\n  ticketType: ticketType.initialState,\n  user: user.initialState,\n}\nexport const reducers = {\n  credits: credits.default,\n  dropzone: dropzone.default,\n  dropzoneUser: dropzoneUser.default,\n  extra: extra.default,\n  load: load.default,\n  plane: plane.default,\n  rig: rig.default,\n  rigInspection: rigInspection.default,\n  rigInspectionTemplate: rigInspectionTemplate.default,\n  manifest: manifest.default,\n  manifestGroup: manifestGroup.default,\n  ticketType: ticketType.default,\n  user: user.default,\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nexport const initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'screens/user',\n  initialState,\n  reducers: {\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IManifestScreenState {\n  isSearchVisible: boolean;\n  selectedUsers: DropzoneUser[]\n  searchText: string;\n}\n\nexport const initialState: IManifestScreenState = {\n  isSearchVisible: false,\n  selectedUsers: [],\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'manifestScreen',\n  initialState,\n  reducers: {\n    setSelected: (state: IManifestScreenState, action: PayloadAction<DropzoneUser[]>) => {\n      state.selectedUsers = action.payload;\n    },\n    setSearchText: (state: IManifestScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IManifestScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IManifestScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema.d\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport * as users from \"./authenticated/users/slice\";\nimport * as login from \"./unauthenticated/login/slice\";\nimport * as manifest from \"./authenticated/manifest/slice\";\nimport * as signup from \"./unauthenticated/signup/slice\";\n\nexport const initialState = {\n  manifest: manifest.initialState,\n  users: users.initialState,\n  login: login.initialState,\n  signup: signup.initialState,\n}\nexport const reducers = {\n  manifest: manifest.default,\n  users: users.default,\n  login: login.default,\n  signup: signup.default,\n}","import { combineReducers, configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport AsyncStorage from '@react-native-community/async-storage';\n\n\n\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { reducers as forms, initialState as initialStateForms } from \"../components/forms/slice\";\nimport { reducers as screens, initialState as initialStateScreens } from \"../screens/slice\";\n\n\nimport globalSlice, { initialState as initialStateGlobal } from \"./global\";\nimport notificationSlice, { initialState as initialStateNotification } from \"../components/notifications/slice\";\n\n\nexport const initialState = {\n  forms: initialStateForms,\n  screens: initialStateScreens,\n  global: initialStateGlobal,\n  notifications: initialStateNotification,\n} as RootState;\n\nconst persistConfig = {\n  key: 'open-manifest.0.9.1',\n  storage: Platform.OS === \"web\" || false ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconst screenReducers = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].reducer }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"reducer\"]\n};\nconst formReducers = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].reducer }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"reducer\"]\n};\n\nexport const screenActions = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].actions }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"actions\"]\n};\nexport const formActions = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].actions }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"actions\"]\n};\n\nexport const actions = {\n  forms: formActions,\n  screens: screenActions,\n  global: globalSlice.actions,\n  notifications: notificationSlice.actions,\n}\n\nexport const rootReducer = combineReducers({\n    global: globalSlice.reducer,\n    notifications: notificationSlice.reducer,\n    screens: combineReducers(screenReducers),\n    forms: combineReducers(formReducers),\n  });\n\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\n\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","export const tintColorLight = '#2f95dc';\nexport const tintColorDark = '#fff';\nexport const successColor = \"#00C851\";\nexport const errorColor = \"#ff4444\";\nexport const warningColor = \"#FF8800\";\nexport const infoColor = \"#0099CC\";\n\nexport const primaryColor = \"#FF1414\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\" | \"warning\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport const initialState = { queue: [] } as INotificationState;\nexport default createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import * as React from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default function ScrollableScreen(props: IScrollableScreen) {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n  const { style, children, contentContainerStyle, ...rest } = props;\n\n\n  return (\n    <ScrollView\n      {...rest}\n      keyboardDismissMode=\"on-drag\"\n      keyboardShouldPersistTaps=\"handled\"\n      contentInsetAdjustmentBehavior=\"always\"\n      style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, style]}\n      contentContainerStyle={[styles.content, contentContainerStyle]}\n    >\n      {children}\n    </ScrollView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","export * from \"./store\";","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n    primary: \"#333333\",\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n    primary: \"#333333\",\n  },\n};\n\ninterface IGlobalState {\n\n  currentDropzoneId: number;\n  // @deprecated\n  currentUser: User | null;\n  credentials: Credential | null;\n  // @deprecated\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  expoPushToken: string;\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nexport const initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  currentDropzoneId: null,\n  permissions: [],\n  credentials: null,\n  expoPushToken: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setExpoPushToken: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.expoPushToken = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone | null>) => {\n      state.currentDropzone = action.payload;\n      state.currentDropzoneId = action.payload?.id ? Number(action.payload?.id) : null;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"static/media/logo.6fa2ed95.png\";","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema.d\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nexport const initialState: IExtraEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/extra',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IExtraEditState, action: PayloadAction<boolean | Extra>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n        state.fields.cost.value = action.payload.cost;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ILoadEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/load',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ILoadEditState, action: PayloadAction<boolean | Load>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useMutationUpdateUser from \"./useMutationUpdateUser\";\n\nexport const QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        credits\n        hasCredits\n        hasExitWeight\n        hasMembership\n        hasReserveInDate\n        hasRigInspection\n        hasLicense\n        permissions\n        expiresAt\n\n        role {\n          id\n          name\n        }\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              amount\n            }\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          pushToken\n\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            loadNumber\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function useCurrentDropzone() {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const pushToken = useAppSelector(state => state.global.expoPushToken);\n\n\n  const currentDropzone = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: dropzoneId,\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: () => null,\n    onError: () => null,\n  });\n\n  // Update remote push token if we have a local token, but no\n  // token saved on the server. This is done so that the server\n  // is able to send us push notifications\n  React.useEffect(() => {\n    const userId = currentDropzone?.data?.dropzone?.currentUser?.user?.id;\n    const remoteToken = currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken;\n    const localToken = pushToken;\n\n    if (!currentDropzone.loading && currentDropzone.called) {\n      if (localToken && localToken !== remoteToken) {\n        mutationUpdateUser.mutate({\n          id: Number(userId),\n          pushToken: localToken,\n        })\n      }\n    }\n\n  }, [pushToken, currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken])\n  return {\n    ...currentDropzone,\n    dropzone: currentDropzone?.data?.dropzone,\n    currentUser: currentDropzone?.data?.dropzone?.currentUser,\n  }\n}","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      testID=\"snackbar-message\"\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\n\nexport default MyComponent;","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateUserArgs, UpdateUserPayload, UserSignUpPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $pushToken: String,\n    $nickname: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        pushToken: $pushToken\n        name: $name,\n        phone: $phone,\n        email: $email,\n        nickname: $nickname,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        pushToken\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateUserArgs[\"input\"][\"attributes\"], UpdateUserPayload>(\n  MUTATION_UPDATE_USER, {\n    getPayload: (result) => result.updateUser,\n    fieldErrorMap: {\n      license: \"licenseId\",\n      exit_weight: \"exitWeight\",\n    },\n  }\n);","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport { ColorPicker } from \"react-native-color-picker\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\n\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = React.useState(false);\n  const [colorPicker, setColorPicker] = React.useState<\"primary\" | \"secondary\" | null>(null);\n\n  React.useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.forms.dropzone.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.forms.dropzone.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Portal>\n        <Dialog\n          visible={!!colorPicker}\n          onDismiss={() => setColorPicker(null)}\n        >\n            <Dialog.Title>Pick a {colorPicker === \"primary\" ? \"primary color\" : \"secondary color\"}</Dialog.Title>\n            <Dialog.Content style={{ padding: 20, height: 400 }}>\n              <ColorPicker\n                onColorSelected={color => {\n                dispatch(\n                  colorPicker === \"primary\"\n                    ? actions.forms.dropzone.setField([\"primaryColor\", color])\n                    : actions.forms.dropzone.setField([\"secondaryColor\", color])\n                )\n                }}\n                style={{ flex: 1 }}\n                sliderComponent={SliderComponent as any}\n                defaultColor={(colorPicker === \"primary\" ? state.fields.primaryColor.value : state.fields.secondaryColor.value) || undefined}\n                hideSliders\n              />\n            </Dialog.Content>\n            <Dialog.Actions>\n              <Button onPress={() => setColorPicker(null)}>Cancel</Button>\n              <Button\n                disabled={\n                  (colorPicker === \"primary\" && !state.fields.primaryColor.value) ||\n                  (colorPicker === \"secondary\" && !state.fields.secondaryColor.value)\n                }\n                onPress={() => {\n                  console.log({\n                    current: global.theme.colors.accent,\n                    next: state.fields.secondaryColor.value\n                  })\n                  if (colorPicker === \"primary\") {\n                    dispatch(\n                      actions.global.setPrimaryColor(state.fields.primaryColor.value!),\n                    );\n                  } else {\n                    dispatch(\n                      actions.global.setAccentColor(state.fields.secondaryColor.value!),\n                    );\n                  }\n                  setColorPicker(null);\n                }}\n              >\n                Save\n              </Button>\n            </Dialog.Actions>\n          </Dialog>\n      </Portal>\n      <Card style={{ width: \"100%\", maxHeight: 300, marginVertical: 16 }}>\n        <Card.Title title=\"Banner\" />\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={{ width: \"100%\", marginVertical: 16, paddingHorizontal: 16 }}>\n        <List.Subheader style={styles.subheader}>Dropzone</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        \n\n        <List.Subheader style={styles.subheader}>Federation</List.Subheader>\n        \n        <Menu\n          onDismiss={() => setFederationMenuOpen(false)}\n          visible={federationMenuOpen}\n          anchor={\n            <Menu.Item\n              onPress={() => setFederationMenuOpen(true)}\n              title={state.fields?.federation?.value?.name || \"\"}\n              icon=\"parachute\"\n            />}>\n          {\n            data?.federations?.map((federation) =>\n              <Menu.Item\n                key={`federation-select-${federation.id}`}\n                title={federation.name}\n                onPress={() => {\n                  dispatch(actions.forms.dropzone.setField([\"federation\", federation]));\n                  setFederationMenuOpen(false);\n                }}\n              />\n            )\n          }\n        </Menu>\n        <HelperText type=\"error\">\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n        <List.Subheader style={styles.subheader}>Branding</List.Subheader>\n        <List.Item\n          title=\"Primary color\"\n          onPress={() => setColorPicker(\"primary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.primary\n              }}\n            />\n        }/>\n\n        <List.Item\n          title=\"Secondary color\"\n          onPress={() => setColorPicker(\"secondary\")}\n          left={() =>\n            <View\n              style={{\n                width: 24,\n                height: 24,\n                backgroundColor: global.theme.colors.accent\n              }}\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport * as React from 'react';\nimport Constants from \"expo-constants\";\nimport { actions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = React.useMemo(() =>\n    onError(({ graphQLErrors, networkError }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `Session expires`, variant: \"error\" })\n        )\n        dispatch(\n          actions.global.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n          dispatch(\n            actions.notifications.showSnackbar({ message: `[GraphQL error]: ${message}, ${locations}, ${path}`, variant: \"error\" })\n          )\n        );\n      if (networkError) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = React.useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = React.useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/'), \"https://openmanifest.org\", \"openmanifest://\"],\n  config: {\n    screens: {\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as React from \"react\";\nimport { Paragraph, Button} from \"react-native-paper\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\n\n\ninterface ISetupWarning {\n  credits: number;\n  loading: boolean;\n  isRigSetUp: boolean;\n  isRigInspectionComplete: boolean;\n  isCreditSystemEnabled: boolean;\n  isExitWeightDefined: boolean;\n  isReserveInDate: boolean;\n  isMembershipInDate: boolean;\n}\n\nfunction Warning(props: { title: string, action?: () => void }) {\n  return (\n    <View style={styles.warning}>\n        <Paragraph>\n          {props.title}\n        </Paragraph>\n        {!props.action ? null : (\n          <Button color=\"black\" mode=\"outlined\" onPress={() => props.action!()}>\n            Take me there\n          </Button>\n        )}\n      </View>\n  );\n}\n\nexport default function SetupWarning(props: ISetupWarning) {\n  const { credits, loading, isCreditSystemEnabled, isRigSetUp, isExitWeightDefined, isMembershipInDate, isReserveInDate, isRigInspectionComplete } = props;\n\n  if (props.loading) {\n    return null;\n  }\n  \n  const navigation = useNavigation();\n\n  if (!isExitWeightDefined || !isRigSetUp) {\n    const missing = [\n      !isExitWeightDefined ? \"exit weight\" : null,\n      !isRigSetUp ? \"at least one rig\" : null,\n    ].filter(Boolean);\n\n    return (\n      <Warning\n        title={`You need to define ${missing.join(\"and\")} in your profile`}\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    );\n  } else if (!isMembershipInDate) {\n    return (\n      <Warning\n        title=\"Your membership seems to be out of date\"\n        action={() => navigation.navigate(\"Profile\")}\n      />\n    )\n  } else if (!isRigInspectionComplete) {\n    return (\n      <Warning\n        title={`Your rig must be inspected before you can manifest at this dropzone`}\n      />\n    );\n  } else if (!isReserveInDate) {\n    return (\n      <Warning\n        title={`Your reserve repack is due. You cannot manifest if your repack is out of date.`}\n      />\n    );\n  } else if (isCreditSystemEnabled && !credits && !loading) {\n    return (\n      <Warning\n        title=\"You'll need to top up on credits before you can manifest\"\n      />\n    );\n  }\n\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n","import * as React from \"react\";\nimport { Appbar, Menu, IconButton, Divider, Chip } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { StyleSheet } from \"react-native\";\nimport SetupWarning from \"./SetupWarning\";\n\nconst QUERY_CURRENT_USER = gql`\n  query QueryDropzone($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      isCreditSystemEnabled\n\n      currentUser {\n        id\n        credits\n        expiresAt\n        \n        rigInspections {\n          id\n          rig {\n            id\n            repackExpiresAt\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface IAppBarProps extends StackHeaderProps {\n  hideWarnings?: boolean;\n}\n\n\nfunction AppBar(props: IAppBarProps) {\n  const { navigation, previous, scene, hideWarnings } = props;\n  const [contextMenuOpen, setContextMenuOpen] = React.useState(false);\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [loadData, { data, loading }] = useLazyQuery<Query>(QUERY_CURRENT_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    }\n  });\n\n  React.useEffect(() => {\n    if (currentDropzone) {\n      loadData();\n    }\n  }, [loadData, currentDropzone])\n  \n  const showCredits = !!data?.dropzone?.isCreditSystemEnabled;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} titleStyle={{ fontWeight: \"bold\" }} />\n\n      { scene.descriptor.options.headerRight\n        ? scene.descriptor.options.headerRight({ tintColor: \"white\" })\n        : (\n          <Chip mode=\"outlined\">\n            {`$${data?.dropzone?.currentUser?.credits || 0}`}\n          </Chip>\n        )}\n      <Menu\n        onDismiss={() => setContextMenuOpen(false)}\n        visible={contextMenuOpen}\n        anchor={\n          <IconButton\n            icon=\"dots-vertical\"\n            color=\"#FFFFFF\"\n            onPress={() => setContextMenuOpen(true)}\n          />\n      }>\n        <Menu.Item\n          title=\"Change dropzone\"\n          icon=\"radar\"\n          onPress={() => {\n            navigation.replace(\"DropzonesScreen\");\n            setContextMenuOpen(false);\n          }}\n        />\n        <Divider />\n        <Menu.Item\n          title=\"Log out\"\n          icon=\"logout\"\n          onPress={() => {\n            dispatch(actions.global.logout());\n            setContextMenuOpen(false);\n          }}\n        />\n      </Menu>\n    </Appbar.Header>\n    { hideWarnings ? null : (\n      <SetupWarning\n        credits={data?.dropzone?.currentUser?.credits || 0}\n        loading={loading}\n        isCreditSystemEnabled={!!data?.dropzone?.isCreditSystemEnabled}\n        isExitWeightDefined={!!data?.dropzone?.currentUser?.user?.exitWeight}\n        isMembershipInDate={!!data?.dropzone?.currentUser?.expiresAt && data?.dropzone?.currentUser?.expiresAt > (new Date().getTime() / 1000)}\n        isReserveInDate={\n          !!data?.dropzone?.currentUser?.user?.rigs?.some((rig) => {\n            const isRigInspected = data.dropzone?.currentUser?.rigInspections?.map((inspection) => inspection?.rig?.id === rig.id);\n            const isRepackInDate = (rig.repackExpiresAt || 0) > (new Date().getTime() / 1000);\n            return isRigInspected && isRepackInDate;\n          })\n        }\n        isRigInspectionComplete={!!data?.dropzone?.currentUser?.rigInspections?.length}\n        isRigSetUp={!!data?.dropzone?.currentUser?.user?.rigs?.length}\n      />\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { DropzoneUser, Slot } from '../../graphql/schema';\nimport { useAppSelector } from '../../redux';\n\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nconst ManifestGroupScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupScreen'));\nconst ManifestGroupUserSelectScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupUserSelectScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  CreateLoadScreen: undefined;\n  ManifestGroupUserSelectScreen: undefined;\n  ManifestGroupScreen: {\n    users?: DropzoneUser[];\n    slots?: Slot[]\n    loadId?: number\n  };\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n      <Manifest.Screen name=\"ManifestGroupScreen\" component={ManifestGroupScreen} options={{ title: \"Manifest group\" }}/>\n      <Manifest.Screen name=\"ManifestGroupUserSelectScreen\" component={ManifestGroupUserSelectScreen} options={{ title: \"Select users\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\n\nconst NotificationsScreen = React.lazy(() => import('../../screens/authenticated/notifications/NotificationsScreen'));\n\nexport type IProfileTabParams = {\n  NotificationsScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function Notifications() {\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"NotificationsScreen\"\n        component={NotificationsScreen}\n        options={{ title: \"Notifications\" }}\n      />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nconst UpdateUserScreen = React.lazy(() => import('../../screens/authenticated/profile/UpdateUserScreen'));\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentUser } = useCurrentDropzone();\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst SettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/SettingsScreen'));\nconst TicketTypeSettingsScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/TicketTypesScreen'));\nconst CreatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/CreatePlaneScreen'));\nconst UpdatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/UpdatePlaneScreen'));\nconst UpdateDropzoneScreen = React.lazy(() => import('../../screens/authenticated/dropzones/UpdateDropzoneScreen'));\nconst PlanesScreen = React.lazy(() => import('../../screens/authenticated/planes/PlanesScreen'));\nconst RigInspectionTemplateScreen = React.lazy(() => import('../../screens/authenticated/settings/RigInspectionTemplateScreen'));\nconst DropzoneRigsScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneRigsScreen'));\nconst DropzonePermissionScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzonePermissionScreen'));\nconst DropzoneMasterLogScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneMasterLogScreen'));\n\n\nconst CreateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/CreateExtraScreen'));\nconst UpdateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/UpdateExtraScreen'));\nconst ExtrasScreen = React.lazy(() => import('../../screens/authenticated/extras/ExtrasScreen'));\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n  RigInspectionTemplateScreen: undefined;\n  DropzoneRigsScreen: undefined;\n  DropzonePermissionScreen: undefined;\n  DropzoneMasterLogScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} options={{ title: \"Basic settings\" }} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n      <Settings.Screen name=\"RigInspectionTemplateScreen\" component={RigInspectionTemplateScreen} options={{ title: \"Rig Inspection Form\" }} />\n      <Settings.Screen name=\"DropzoneRigsScreen\" component={DropzoneRigsScreen} options={{ title: \"Dropzone rigs\" }} />\n      <Settings.Screen name=\"DropzonePermissionScreen\" component={DropzonePermissionScreen} options={{ title: \"Permissions\" }} />\n      <Settings.Screen\n        name=\"DropzoneMasterLogScreen\"\n        component={DropzoneMasterLogScreen}\n        options={{ title: \"Master log\"}}\n        />\n    </Settings.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst UsersScreen = React.lazy(() => import('../../screens/authenticated/users/UsersScreen'));\nconst SearchableAppBar = React.lazy(() => import('../../screens/authenticated/users/AppBar'));\nconst RigInspectionScreen = React.lazy(() => import('../../screens/authenticated/rig/RigInspectionScreen'));\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nimport { actions, useAppDispatch, useAppSelector } from '../../redux';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: {\n    select?: boolean;\n    loadId: number;\n    onSelect?(): void;\n  };\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.screens.users);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(actions.screens.users.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(actions.screens.users.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport NotificationTab from \"./tabs/notifications\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useRestriction from '../hooks/useRestriction';\nimport { Permission } from '../graphql/schema.d';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Notifications: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(Permission.ReadUser);\n\n  const canUpdateDropzone = useRestriction(Permission.UpdateDropzone);\n  const canUpdatePlane = useRestriction(Permission.UpdatePlane);\n  const canUpdateTicketTypes = useRestriction(Permission.UpdateTicketType);\n  const canUpdateExtras = useRestriction(Permission.UpdateExtra);\n  const canUpdatePermissions = useRestriction(Permission.GrantPermission);\n  const canUpdateDzRigs = useRestriction(Permission.UpdateDropzoneRig);\n  const canUpdateRigInspectionTemplate = useRestriction(Permission.UpdateFormTemplate);\n\n  const shouldShowSettings = canUpdateDropzone\n  || canUpdatePlane\n  || canUpdateTicketTypes\n  || canUpdateExtras\n  || canUpdatePermissions\n  || canUpdateDzRigs\n  || canUpdateRigInspectionTemplate;\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n        style: {\n          backgroundColor: theme.colors.primary,\n        }\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Notifications\"\n        component={NotificationTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"bell\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n\n     \n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { shouldShowSettings && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions } from 'react-native';\nimport { Card, Title, FAB, Paragraph } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema.d\";\n\nimport { useNavigation } from '@react-navigation/core';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        \n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1 }}\n        contentContainerStyle={{ flexGrow: 1 }}\n        ListEmptyComponent={() =>\n          <View style={styles.empty}>\n            <Title>No dropzones?</Title>\n            <Paragraph>\n              You can set one up!\n            </Paragraph>\n          </View>\n        }\n        renderItem={({ item }) => {\n          return (\n            <Card\n              style={{\n                width: (Dimensions.get(\"window\").width / 2) - 32,\n                margin: 8\n              }}\n              onPress={async ()=> {\n                if (item?.node) {\n                  const shouldPushRoute = !!globalState.currentDropzoneId; \n                  dispatch(\n                    actions.global.setDropzone(item.node)\n                  );\n\n                  if (shouldPushRoute) {\n                    navigation.replace(\"Authenticated\", { screen: \"HomeScreen\"});\n                  }\n                }\n              }}\n            >\n              <Card.Cover source={{ uri: item?.node?.banner as string }} />\n              <Card.Content>\n                <Title>{item?.node?.name}</Title>\n              </Card.Content>\n            </Card>\n          )\n        }}\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => navigation.navigate(\"CreateDropzoneScreen\")}\n        label=\"Create dropzone\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 32,\n    right: 16,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String!,\n  $federationId: Int!\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner: string,\n  federationId: number,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\n\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\n\nexport default function CreateDropzoneScreen() {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(actions.notifications.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(actions.global.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { Image, StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { View } from '../../../components/Themed';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Mutation } from '../../../graphql/schema';\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\n\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.screens.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = React.useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              actions.global.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              actions.global.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(actions.notifications.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Image source={logo} style={{ height: 300, width: \"100%\" }} resizeMode=\"contain\" />\n      <View style={styles.fields}>\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" labelStyle={styles.buttonLabel} style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button labelStyle={styles.textButtonLabel} style={styles.textButton} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: primaryColor,\n    paddingTop: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  \n  fields: {\n    marginBottom: 10,\n    marginTop: -50,\n    maxWidth: 400,\n    width: \"100%\",\n    paddingHorizontal: 56,\n    backgroundColor: \"transparent\"\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  textButton: {\n    marginTop: 10,\n    backgroundColor: \"transparent\",\n    color: \"white\",\n    width: \"100%\"\n  },\n  textButtonLabel: {\n    color: \"#FFFFFF\",\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $pushToken: String\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      pushToken: $pushToken,\n      licenseId: $licenseId\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { Image, StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Text, View } from '../../../components/Themed';\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.screens.signup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      if (payload.credentials) {\n        dispatch(\n          actions.global.setCredentials(payload.credentials)\n        );\n        dispatch(\n          actions.global.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.screens.signup.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen style={styles.container} contentContainerStyle={styles.content}>\n      <Image source={logo} style={{ width: \"100%\", height: 200 }} resizeMode=\"contain\" />\n      <View style={styles.fields}>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Exit weight\"\n          error={!!state.fields.exitWeight.error}\n          value={state.fields.exitWeight?.value?.toString() || \"\"}\n          keyboardType=\"numbers-and-punctuation\"\n          right={() => <TextInput.Affix text=\"kg\" />}\n          onChangeText={(newValue) =>\n            !newValue || /\\d+/.test(newValue) ? dispatch(actions.screens.signup.setField([\"exitWeight\", parseFloat(newValue || \"0\")])) : null\n          }\n        />\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          labelStyle={styles.buttonLabel} \n          style={styles.button}\n          onPress={() =>\n            onSignUp({\n              pushToken: globalState.expoPushToken,\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: primaryColor,\n  },\n  content: {\n    paddingHorizontal: 60,\n    alignItems: \"center\",\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    maxWidth: 400,\n    backgroundColor: \"transparent\"\n  },\n  field: {\n    marginBottom: 8,\n    backgroundColor: \"pink\",\n    borderColor: \"white\",\n    color: \"white\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"LoginScreen\"\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\nimport AppBar from \"./AppBar\";\n\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport DropzonesScreen from '../screens/authenticated/dropzones/DropzonesScreen';\n\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  Dropzones: undefined;\n  DropzonesScreen: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n        )\n      }\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport Constants from \"expo-constants\";\nimport * as Notifications from 'expo-notifications';\nimport * as React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar } from \"react-native-paper\"\nimport { Platform, View } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector, useAppDispatch } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport NotificationArea from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\nimport { actions } from './redux';\n\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\nasync function sendPushNotification(expoPushToken) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: 'And here is the body!',\n    data: { someData: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      console.warn('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    console.warn('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const notificationListener = React.useRef<ReturnType<typeof Notifications.addNotificationReceivedListener>>();\n  const responseListener = React.useRef<ReturnType<typeof Notifications.addNotificationResponseReceivedListener>>();\n\n  React.useEffect(() => {\n    registerForPushNotificationsAsync().then(token => dispatch(actions.global.setExpoPushToken(token)));\n\n    // This listener is fired whenever a notification is received while the app is foregrounded\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      dispatch(actions.notifications.showSnackbar({ message: notification.request.content.body, variant: \"warning\" }));\n    });\n\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  return (\n    <React.Suspense\n      fallback={\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n            </NavigationContainer>\n\n            <StatusBar />\n            <NotificationArea />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </React.Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n          <PersistGate\n            persistor={persistor}\n            loading={\n              <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n                <ActivityIndicator size=\"large\" />\n              </View>\n          }>\n            <Content />\n          </PersistGate>\n        </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = React.useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Permission } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\nexport const QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: Permission): boolean {\n  const { currentDropzone } = useAppSelector(state => state.global);\n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.id)\n    }\n  });\n\n  const permissions = data?.dropzone?.currentUser?.permissions || [];\n  return permissions?.includes(permission as any) || false;\n}","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AnyResource = {};\n\n/** Autogenerated input type of CreateDropzone */\nexport type CreateDropzoneInput = {\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateDropzone */\nexport type CreateDropzonePayload = {\n  __typename?: 'CreateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateExtra */\nexport type CreateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateExtra */\nexport type CreateExtraPayload = {\n  __typename?: 'CreateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateLoad */\nexport type CreateLoadInput = {\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateLoad */\nexport type CreateLoadPayload = {\n  __typename?: 'CreateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreatePlane */\nexport type CreatePlaneInput = {\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreatePlane */\nexport type CreatePlanePayload = {\n  __typename?: 'CreatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of CreateRig */\nexport type CreateRigInput = {\n  attributes: RigInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateRigInspection */\nexport type CreateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateRigInspection */\nexport type CreateRigInspectionPayload = {\n  __typename?: 'CreateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of CreateRig */\nexport type CreateRigPayload = {\n  __typename?: 'CreateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of CreateSlot */\nexport type CreateSlotInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlot */\nexport type CreateSlotPayload = {\n  __typename?: 'CreateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of CreateSlots */\nexport type CreateSlotsInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlots */\nexport type CreateSlotsPayload = {\n  __typename?: 'CreateSlotsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreateTicket */\nexport type CreateTicketInput = {\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTicket */\nexport type CreateTicketPayload = {\n  __typename?: 'CreateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of CreateTransaction */\nexport type CreateTransactionInput = {\n  attributes: TransactionInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTransaction */\nexport type CreateTransactionPayload = {\n  __typename?: 'CreateTransactionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  transaction?: Maybe<Transaction>;\n};\n\nexport type Credential = {\n  __typename?: 'Credential';\n  accessToken: Scalars['String'];\n  client: Scalars['String'];\n  expiry: Scalars['Int'];\n  tokenType: Scalars['String'];\n  uid: Scalars['String'];\n};\n\n/** Autogenerated input type of DeleteDropzone */\nexport type DeleteDropzoneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteDropzone */\nexport type DeleteDropzonePayload = {\n  __typename?: 'DeleteDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n};\n\n/** Autogenerated input type of DeleteLoad */\nexport type DeleteLoadInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteLoad */\nexport type DeleteLoadPayload = {\n  __typename?: 'DeleteLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of DeletePlane */\nexport type DeletePlaneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeletePlane */\nexport type DeletePlanePayload = {\n  __typename?: 'DeletePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of DeleteSlot */\nexport type DeleteSlotInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteSlot */\nexport type DeleteSlotPayload = {\n  __typename?: 'DeleteSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of DeleteTicket */\nexport type DeleteTicketInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteTicket */\nexport type DeleteTicketPayload = {\n  __typename?: 'DeleteTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\nexport type Dropzone = AnyResource & {\n  __typename?: 'Dropzone';\n  allowedJumpTypes: Array<JumpType>;\n  banner?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Int'];\n  currentUser: DropzoneUser;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  dropzoneUsers: DropzoneUserConnection;\n  extras: Array<Extra>;\n  federation: Federation;\n  id: Scalars['ID'];\n  isCreditSystemEnabled: Scalars['Boolean'];\n  isPublic: Scalars['Boolean'];\n  loads: LoadConnection;\n  /** Get the master log entry for a given date */\n  masterLog: MasterLog;\n  name?: Maybe<Scalars['String']>;\n  planes: Array<Plane>;\n  primaryColor?: Maybe<Scalars['String']>;\n  rigInspectionTemplate?: Maybe<FormTemplate>;\n  /** Get rigs for dropzone */\n  rigs?: Maybe<Array<Rig>>;\n  roles: Array<UserRole>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n  userRoles: Array<UserRole>;\n};\n\n\nexport type DropzoneAllowedJumpTypesArgs = {\n  userId: Array<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUserArgs = {\n  id?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUsersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  permissions?: Maybe<Array<Permission>>;\n  search?: Maybe<Scalars['String']>;\n  licensed?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type DropzoneLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneMasterLogArgs = {\n  date: Scalars['Int'];\n};\n\n\nexport type DropzoneTicketTypesArgs = {\n  isPublic?: Maybe<Scalars['Boolean']>;\n};\n\n/** The connection type for Dropzone. */\nexport type DropzoneConnection = {\n  __typename?: 'DropzoneConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Dropzone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneEdge = {\n  __typename?: 'DropzoneEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Dropzone>;\n};\n\nexport type DropzoneInput = {\n  name: Scalars['String'];\n  banner?: Maybe<Scalars['String']>;\n  federationId: Scalars['Int'];\n  isPublic?: Maybe<Scalars['Boolean']>;\n  primaryColor?: Maybe<Scalars['String']>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  isCreditSystemEnabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DropzoneUser = AnyResource & {\n  __typename?: 'DropzoneUser';\n  /** Get user rigs that have been inspected and marked as OK + dropzone rigs */\n  availableRigs?: Maybe<Array<Rig>>;\n  createdAt: Scalars['Int'];\n  credits?: Maybe<Scalars['Int']>;\n  expiresAt?: Maybe<Scalars['Int']>;\n  hasCredits: Scalars['Boolean'];\n  hasExitWeight: Scalars['Boolean'];\n  hasLicense: Scalars['Boolean'];\n  hasMembership: Scalars['Boolean'];\n  hasReserveInDate: Scalars['Boolean'];\n  hasRigInspection: Scalars['Boolean'];\n  id: Scalars['ID'];\n  notifications?: Maybe<NotificationConnection>;\n  permissions?: Maybe<Array<Permission>>;\n  rigInspections?: Maybe<Array<RigInspection>>;\n  role?: Maybe<UserRole>;\n  transactions?: Maybe<TransactionConnection>;\n  unseenNotifications: Scalars['Int'];\n  updatedAt: Scalars['Int'];\n  user: User;\n};\n\n\nexport type DropzoneUserNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneUserTransactionsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for DropzoneUser. */\nexport type DropzoneUserConnection = {\n  __typename?: 'DropzoneUserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DropzoneUser>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneUserEdge = {\n  __typename?: 'DropzoneUserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DropzoneUser>;\n};\n\nexport type DropzoneUserInput = {\n  expiresAt?: Maybe<Scalars['Int']>;\n  credits?: Maybe<Scalars['Float']>;\n  userRoleId?: Maybe<Scalars['Int']>;\n};\n\nexport type Extra = {\n  __typename?: 'Extra';\n  cost: Scalars['Int'];\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type ExtraInput = {\n  name?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  ticketTypeIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Federation = {\n  __typename?: 'Federation';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type FormTemplate = {\n  __typename?: 'FormTemplate';\n  createdAt: Scalars['Int'];\n  definition?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FormTemplateInput = {\n  name?: Maybe<Scalars['String']>;\n  definition?: Maybe<Scalars['String']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of GrantPermission */\nexport type GrantPermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of GrantPermission */\nexport type GrantPermissionPayload = {\n  __typename?: 'GrantPermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type JumpType = {\n  __typename?: 'JumpType';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type License = AnyResource & {\n  __typename?: 'License';\n  createdAt: Scalars['Int'];\n  federation?: Maybe<Federation>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Load = AnyResource & {\n  __typename?: 'Load';\n  createdAt: Scalars['Int'];\n  dispatchAt?: Maybe<Scalars['Int']>;\n  gca?: Maybe<DropzoneUser>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isFull: Scalars['Boolean'];\n  isOpen: Scalars['Boolean'];\n  isReady: Scalars['Boolean'];\n  loadMaster?: Maybe<DropzoneUser>;\n  loadNumber: Scalars['Int'];\n  maxSlots: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  pilot?: Maybe<DropzoneUser>;\n  plane: Plane;\n  slots?: Maybe<Array<Slot>>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Load. */\nexport type LoadConnection = {\n  __typename?: 'LoadConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LoadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Load>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type LoadEdge = {\n  __typename?: 'LoadEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Load>;\n};\n\nexport type LoadInput = {\n  dispatchAt?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  isOpen?: Maybe<Scalars['Boolean']>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  pilotId?: Maybe<Scalars['Int']>;\n  planeId?: Maybe<Scalars['Int']>;\n  gcaId?: Maybe<Scalars['Int']>;\n  loadMasterId?: Maybe<Scalars['Int']>;\n};\n\nexport type MasterLog = {\n  __typename?: 'MasterLog';\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  dzso?: Maybe<Array<DropzoneUser>>;\n  id: Scalars['ID'];\n  loads?: Maybe<Array<Load>>;\n  notes?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createDropzone?: Maybe<CreateDropzonePayload>;\n  createExtra?: Maybe<CreateExtraPayload>;\n  createLoad?: Maybe<CreateLoadPayload>;\n  createPlane?: Maybe<CreatePlanePayload>;\n  createRig?: Maybe<CreateRigPayload>;\n  createRigInspection?: Maybe<CreateRigInspectionPayload>;\n  createSlot?: Maybe<CreateSlotPayload>;\n  createSlots?: Maybe<CreateSlotsPayload>;\n  createTicketType?: Maybe<CreateTicketPayload>;\n  createTransaction?: Maybe<CreateTransactionPayload>;\n  deleteDropzone?: Maybe<DeleteDropzonePayload>;\n  deleteLoad?: Maybe<DeleteLoadPayload>;\n  deletePlane?: Maybe<DeletePlanePayload>;\n  deleteSlot?: Maybe<DeleteSlotPayload>;\n  deleteTicketType?: Maybe<DeleteTicketPayload>;\n  grantPermission?: Maybe<GrantPermissionPayload>;\n  revokePermission?: Maybe<RevokePermissionPayload>;\n  updateDropzone?: Maybe<UpdateDropzonePayload>;\n  updateDropzoneUser?: Maybe<UpdateDropzoneUserPayload>;\n  updateExtra?: Maybe<UpdateExtraPayload>;\n  updateFormTemplate?: Maybe<UpdateFormTemplatePayload>;\n  updateLoad?: Maybe<UpdateLoadPayload>;\n  updateNotification?: Maybe<UpdateNotificationPayload>;\n  updatePlane?: Maybe<UpdatePlanePayload>;\n  updateRig?: Maybe<UpdateRigPayload>;\n  updateRigInspection?: Maybe<UpdateRigInspectionPayload>;\n  updateRole?: Maybe<UpdateRolePayload>;\n  updateSlot?: Maybe<UpdateSlotPayload>;\n  updateTicketType?: Maybe<UpdateTicketPayload>;\n  updateUser?: Maybe<UpdateUserPayload>;\n  userLogin?: Maybe<UserLoginPayload>;\n  userLogout?: Maybe<UserLogoutPayload>;\n  userResendConfirmation?: Maybe<UserResendConfirmationPayload>;\n  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;\n  userSendPasswordResetWithToken?: Maybe<UserSendPasswordResetWithTokenPayload>;\n  userSignUp?: Maybe<UserSignUpPayload>;\n  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;\n  userUpdatePasswordWithToken?: Maybe<UserUpdatePasswordWithTokenPayload>;\n};\n\n\nexport type MutationCreateDropzoneArgs = {\n  input: CreateDropzoneInput;\n};\n\n\nexport type MutationCreateExtraArgs = {\n  input: CreateExtraInput;\n};\n\n\nexport type MutationCreateLoadArgs = {\n  input: CreateLoadInput;\n};\n\n\nexport type MutationCreatePlaneArgs = {\n  input: CreatePlaneInput;\n};\n\n\nexport type MutationCreateRigArgs = {\n  input: CreateRigInput;\n};\n\n\nexport type MutationCreateRigInspectionArgs = {\n  input: CreateRigInspectionInput;\n};\n\n\nexport type MutationCreateSlotArgs = {\n  input: CreateSlotInput;\n};\n\n\nexport type MutationCreateSlotsArgs = {\n  input: CreateSlotsInput;\n};\n\n\nexport type MutationCreateTicketTypeArgs = {\n  input: CreateTicketInput;\n};\n\n\nexport type MutationCreateTransactionArgs = {\n  input: CreateTransactionInput;\n};\n\n\nexport type MutationDeleteDropzoneArgs = {\n  input: DeleteDropzoneInput;\n};\n\n\nexport type MutationDeleteLoadArgs = {\n  input: DeleteLoadInput;\n};\n\n\nexport type MutationDeletePlaneArgs = {\n  input: DeletePlaneInput;\n};\n\n\nexport type MutationDeleteSlotArgs = {\n  input: DeleteSlotInput;\n};\n\n\nexport type MutationDeleteTicketTypeArgs = {\n  input: DeleteTicketInput;\n};\n\n\nexport type MutationGrantPermissionArgs = {\n  input: GrantPermissionInput;\n};\n\n\nexport type MutationRevokePermissionArgs = {\n  input: RevokePermissionInput;\n};\n\n\nexport type MutationUpdateDropzoneArgs = {\n  input: UpdateDropzoneInput;\n};\n\n\nexport type MutationUpdateDropzoneUserArgs = {\n  input: UpdateDropzoneUserInput;\n};\n\n\nexport type MutationUpdateExtraArgs = {\n  input: UpdateExtraInput;\n};\n\n\nexport type MutationUpdateFormTemplateArgs = {\n  input: UpdateFormTemplateInput;\n};\n\n\nexport type MutationUpdateLoadArgs = {\n  input: UpdateLoadInput;\n};\n\n\nexport type MutationUpdateNotificationArgs = {\n  input: UpdateNotificationInput;\n};\n\n\nexport type MutationUpdatePlaneArgs = {\n  input: UpdatePlaneInput;\n};\n\n\nexport type MutationUpdateRigArgs = {\n  input: UpdateRigInput;\n};\n\n\nexport type MutationUpdateRigInspectionArgs = {\n  input: UpdateRigInspectionInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationUpdateSlotArgs = {\n  input: UpdateSlotInput;\n};\n\n\nexport type MutationUpdateTicketTypeArgs = {\n  input: UpdateTicketInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationUserLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUserResendConfirmationArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetWithTokenArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSignUpArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  confirmSuccessUrl?: Maybe<Scalars['String']>;\n  phone: Scalars['String'];\n  exitWeight: Scalars['Float'];\n  name: Scalars['String'];\n  licenseId?: Maybe<Scalars['Int']>;\n  pushToken?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  currentPassword?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordWithTokenArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  isSeen: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n  notificationType?: Maybe<Scalars['String']>;\n  receivedBy: DropzoneUser;\n  resource?: Maybe<AnyResource>;\n  sentBy?: Maybe<DropzoneUser>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  __typename?: 'NotificationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  __typename?: 'NotificationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type NotificationInput = {\n  isSeen: Scalars['Boolean'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport enum Permission {\n  /** updateDropzone */\n  UpdateDropzone = 'updateDropzone',\n  /** deleteDropzone */\n  DeleteDropzone = 'deleteDropzone',\n  /** createLoad */\n  CreateLoad = 'createLoad',\n  /** updateLoad */\n  UpdateLoad = 'updateLoad',\n  /** deleteLoad */\n  DeleteLoad = 'deleteLoad',\n  /** readLoad */\n  ReadLoad = 'readLoad',\n  /** createSlot */\n  CreateSlot = 'createSlot',\n  /** updateSlot */\n  UpdateSlot = 'updateSlot',\n  /** deleteSlot */\n  DeleteSlot = 'deleteSlot',\n  /** createUserSlot */\n  CreateUserSlot = 'createUserSlot',\n  /** createUserSlotWithSelf */\n  CreateUserSlotWithSelf = 'createUserSlotWithSelf',\n  /** updateUserSlot */\n  UpdateUserSlot = 'updateUserSlot',\n  /** deleteUserSlot */\n  DeleteUserSlot = 'deleteUserSlot',\n  /** createStudentSlot */\n  CreateStudentSlot = 'createStudentSlot',\n  /** updateStudentSlot */\n  UpdateStudentSlot = 'updateStudentSlot',\n  /** deleteStudentSlot */\n  DeleteStudentSlot = 'deleteStudentSlot',\n  /** createTicketType */\n  CreateTicketType = 'createTicketType',\n  /** updateTicketType */\n  UpdateTicketType = 'updateTicketType',\n  /** deleteTicketType */\n  DeleteTicketType = 'deleteTicketType',\n  /** createExtra */\n  CreateExtra = 'createExtra',\n  /** updateExtra */\n  UpdateExtra = 'updateExtra',\n  /** deleteExtra */\n  DeleteExtra = 'deleteExtra',\n  /** readExtra */\n  ReadExtra = 'readExtra',\n  /** createPlane */\n  CreatePlane = 'createPlane',\n  /** updatePlane */\n  UpdatePlane = 'updatePlane',\n  /** deletePlane */\n  DeletePlane = 'deletePlane',\n  /** createRig */\n  CreateRig = 'createRig',\n  /** updateRig */\n  UpdateRig = 'updateRig',\n  /** deleteRig */\n  DeleteRig = 'deleteRig',\n  /** readRig */\n  ReadRig = 'readRig',\n  /** createDropzoneRig */\n  CreateDropzoneRig = 'createDropzoneRig',\n  /** updateDropzoneRig */\n  UpdateDropzoneRig = 'updateDropzoneRig',\n  /** deleteDropzoneRig */\n  DeleteDropzoneRig = 'deleteDropzoneRig',\n  /** readDropzoneRig */\n  ReadDropzoneRig = 'readDropzoneRig',\n  /** readPermissions */\n  ReadPermissions = 'readPermissions',\n  /** updatePermissions */\n  UpdatePermissions = 'updatePermissions',\n  /** createPackjob */\n  CreatePackjob = 'createPackjob',\n  /** updatePackjob */\n  UpdatePackjob = 'updatePackjob',\n  /** deletePackjob */\n  DeletePackjob = 'deletePackjob',\n  /** readPackjob */\n  ReadPackjob = 'readPackjob',\n  /** createFormTemplate */\n  CreateFormTemplate = 'createFormTemplate',\n  /** updateFormTemplate */\n  UpdateFormTemplate = 'updateFormTemplate',\n  /** deleteFormTemplate */\n  DeleteFormTemplate = 'deleteFormTemplate',\n  /** readFormTemplate */\n  ReadFormTemplate = 'readFormTemplate',\n  /** readUser */\n  ReadUser = 'readUser',\n  /** updateUser */\n  UpdateUser = 'updateUser',\n  /** deleteUser */\n  DeleteUser = 'deleteUser',\n  /** createUser */\n  CreateUser = 'createUser',\n  /** actAsPilot */\n  ActAsPilot = 'actAsPilot',\n  /** actAsLoadMaster */\n  ActAsLoadMaster = 'actAsLoadMaster',\n  /** actAsGCA */\n  ActAsGca = 'actAsGCA',\n  /** actAsDZSO */\n  ActAsDzso = 'actAsDZSO',\n  /** actAsRigInspector */\n  ActAsRigInspector = 'actAsRigInspector',\n  /** createUserTransaction */\n  CreateUserTransaction = 'createUserTransaction',\n  /** readUserTransactions */\n  ReadUserTransactions = 'readUserTransactions',\n  /** grantPermission */\n  GrantPermission = 'grantPermission',\n  /** revokePermission */\n  RevokePermission = 'revokePermission'\n}\n\nexport type Plane = AnyResource & {\n  __typename?: 'Plane';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  hours?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  maxSlots?: Maybe<Scalars['Int']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type PlaneInput = {\n  name?: Maybe<Scalars['String']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  hours?: Maybe<Scalars['Int']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get dropzone details */\n  dropzone: Dropzone;\n  /** Get all available dropzones */\n  dropzones: DropzoneConnection;\n  /** Get ticket addons for a dropzone */\n  extras: Array<Extra>;\n  /** Available federations */\n  federations: Array<Federation>;\n  /** Load base64 images as graphql */\n  image?: Maybe<Scalars['String']>;\n  /** Get all jump types */\n  jumpTypes: Array<JumpType>;\n  /** Get all licenses for a federation */\n  licenses: Array<License>;\n  /** Get load by id */\n  load: Load;\n  /** Get loads */\n  loads: LoadConnection;\n  /** Get planes from a dropzone */\n  planes: Array<Plane>;\n  /** Get ticket types for a dropzone */\n  ticketTypes: Array<TicketType>;\n  userCheckPasswordToken: User;\n  userConfirmAccount: User;\n};\n\n\nexport type QueryDropzoneArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryDropzonesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryExtrasArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryImageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryJumpTypesArgs = {\n  allowedForUserId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLicensesArgs = {\n  federationId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLoadArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  dropzoneId: Scalars['Int'];\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPlanesArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryTicketTypesArgs = {\n  dropzoneId: Scalars['Int'];\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryUserCheckPasswordTokenArgs = {\n  resetPasswordToken: Scalars['String'];\n  redirectUrl?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryUserConfirmAccountArgs = {\n  confirmationToken: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n/** Autogenerated input type of RevokePermission */\nexport type RevokePermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of RevokePermission */\nexport type RevokePermissionPayload = {\n  __typename?: 'RevokePermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type Rig = AnyResource & {\n  __typename?: 'Rig';\n  canopySize?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  id: Scalars['ID'];\n  isPublic: Scalars['Boolean'];\n  maintainedAt?: Maybe<Scalars['Int']>;\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  rigType?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n  user?: Maybe<User>;\n};\n\nexport type RigInput = {\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  maintainedAt?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n  /** student / sport / tandem */\n  rigType?: Maybe<Scalars['String']>;\n  isPublic?: Maybe<Scalars['Boolean']>;\n  canopySize?: Maybe<Scalars['Int']>;\n};\n\nexport type RigInspection = {\n  __typename?: 'RigInspection';\n  createdAt: Scalars['Int'];\n  definition: Scalars['String'];\n  dropzoneUser: DropzoneUser;\n  formTemplate: FormTemplate;\n  id: Scalars['ID'];\n  inspectedBy: DropzoneUser;\n  isOk: Scalars['Boolean'];\n  rig?: Maybe<Rig>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type RigInspectionInput = {\n  dropzoneId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  definition?: Maybe<Scalars['String']>;\n  isOk?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Slot = AnyResource & {\n  __typename?: 'Slot';\n  createdAt: Scalars['Int'];\n  dropzoneUser?: Maybe<DropzoneUser>;\n  exitWeight: Scalars['Int'];\n  extras?: Maybe<Array<Extra>>;\n  groupNumber: Scalars['Int'];\n  id: Scalars['ID'];\n  jumpType?: Maybe<JumpType>;\n  load: Load;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n  passengerName?: Maybe<Scalars['String']>;\n  rig?: Maybe<Rig>;\n  ticketType?: Maybe<TicketType>;\n  user?: Maybe<User>;\n  wingLoading?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotInput = {\n  userId?: Maybe<Scalars['Int']>;\n  ticketTypeId?: Maybe<Scalars['Int']>;\n  jumpTypeId?: Maybe<Scalars['Int']>;\n  loadId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n  userGroup?: Maybe<Array<SlotUser>>;\n  passengerName?: Maybe<Scalars['String']>;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotUser = {\n  id: Scalars['Int'];\n  exitWeight: Scalars['Float'];\n  rigId?: Maybe<Scalars['Int']>;\n};\n\nexport type TicketType = AnyResource & {\n  __typename?: 'TicketType';\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  altitude?: Maybe<Scalars['Int']>;\n  cost?: Maybe<Scalars['Float']>;\n  createdAt: Scalars['Int'];\n  currency?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  extras: Array<Extra>;\n  id: Scalars['ID'];\n  isTandem?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type TicketTypeInput = {\n  currency?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  name?: Maybe<Scalars['String']>;\n  altitude?: Maybe<Scalars['Int']>;\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  isTandem?: Maybe<Scalars['Boolean']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  amount: Scalars['Float'];\n  createdAt: Scalars['Int'];\n  dropzoneUser: DropzoneUser;\n  id: Scalars['ID'];\n  message?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Transaction. */\nexport type TransactionConnection = {\n  __typename?: 'TransactionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type TransactionEdge = {\n  __typename?: 'TransactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transaction>;\n};\n\nexport type TransactionInput = {\n  status?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  dropzoneUserId?: Maybe<Scalars['Int']>;\n  amount?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated input type of UpdateDropzone */\nexport type UpdateDropzoneInput = {\n  id: Scalars['Int'];\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzone */\nexport type UpdateDropzonePayload = {\n  __typename?: 'UpdateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserInput = {\n  attributes: DropzoneUserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserPayload = {\n  __typename?: 'UpdateDropzoneUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateExtra */\nexport type UpdateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateExtra */\nexport type UpdateExtraPayload = {\n  __typename?: 'UpdateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateFormTemplate */\nexport type UpdateFormTemplateInput = {\n  attributes: FormTemplateInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateFormTemplate */\nexport type UpdateFormTemplatePayload = {\n  __typename?: 'UpdateFormTemplatePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  formTemplate?: Maybe<FormTemplate>;\n};\n\n/** Autogenerated input type of UpdateLoad */\nexport type UpdateLoadInput = {\n  id: Scalars['Int'];\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateLoad */\nexport type UpdateLoadPayload = {\n  __typename?: 'UpdateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of UpdateNotification */\nexport type UpdateNotificationInput = {\n  attributes: NotificationInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateNotification */\nexport type UpdateNotificationPayload = {\n  __typename?: 'UpdateNotificationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  notification?: Maybe<Notification>;\n};\n\n/** Autogenerated input type of UpdatePlane */\nexport type UpdatePlaneInput = {\n  id: Scalars['Int'];\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdatePlane */\nexport type UpdatePlanePayload = {\n  __typename?: 'UpdatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of UpdateRig */\nexport type UpdateRigInput = {\n  attributes: RigInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateRigInspection */\nexport type UpdateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRigInspection */\nexport type UpdateRigInspectionPayload = {\n  __typename?: 'UpdateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of UpdateRig */\nexport type UpdateRigPayload = {\n  __typename?: 'UpdateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of UpdateRole */\nexport type UpdateRoleInput = {\n  permission: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRole */\nexport type UpdateRolePayload = {\n  __typename?: 'UpdateRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  role?: Maybe<UserRole>;\n};\n\n/** Autogenerated input type of UpdateSlot */\nexport type UpdateSlotInput = {\n  id: Scalars['Int'];\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateSlot */\nexport type UpdateSlotPayload = {\n  __typename?: 'UpdateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of UpdateTicket */\nexport type UpdateTicketInput = {\n  id: Scalars['Int'];\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateTicket */\nexport type UpdateTicketPayload = {\n  __typename?: 'UpdateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of UpdateUser */\nexport type UpdateUserInput = {\n  attributes: UserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateUser */\nexport type UpdateUserPayload = {\n  __typename?: 'UpdateUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type User = AnyResource & {\n  __typename?: 'User';\n  createdAt: Scalars['Int'];\n  dropzoneUsers?: Maybe<Array<DropzoneUser>>;\n  email?: Maybe<Scalars['String']>;\n  exitWeight?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Scalars['String']>;\n  jumpTypes?: Maybe<Array<JumpType>>;\n  license?: Maybe<License>;\n  name?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  rigs?: Maybe<Array<Rig>>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type UserInput = {\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  licenseId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated return type of UserLogin */\nexport type UserLoginPayload = {\n  __typename?: 'UserLoginPayload';\n  authenticatable: User;\n  credentials: Credential;\n};\n\n/** Autogenerated return type of UserLogout */\nexport type UserLogoutPayload = {\n  __typename?: 'UserLogoutPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserResendConfirmation */\nexport type UserResendConfirmationPayload = {\n  __typename?: 'UserResendConfirmationPayload';\n  message: Scalars['String'];\n};\n\nexport type UserRole = {\n  __typename?: 'UserRole';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  dropzoneId: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  permissions: Array<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** Autogenerated return type of UserSendPasswordReset */\nexport type UserSendPasswordResetPayload = {\n  __typename?: 'UserSendPasswordResetPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSendPasswordResetWithToken */\nexport type UserSendPasswordResetWithTokenPayload = {\n  __typename?: 'UserSendPasswordResetWithTokenPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSignUp */\nexport type UserSignUpPayload = {\n  __typename?: 'UserSignUpPayload';\n  authenticatable?: Maybe<User>;\n  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */\n  credentials?: Maybe<Credential>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated return type of UserUpdatePassword */\nexport type UserUpdatePasswordPayload = {\n  __typename?: 'UserUpdatePasswordPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserUpdatePasswordWithToken */\nexport type UserUpdatePasswordWithTokenPayload = {\n  __typename?: 'UserUpdatePasswordWithTokenPayload';\n  authenticatable: User;\n  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */\n  credentials?: Maybe<Credential>;\n};\n"],"sourceRoot":""}