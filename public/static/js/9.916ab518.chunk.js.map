{"version":3,"sources":["DataTableCell.tsx","DataTableHeader.tsx","DataTableTitle.tsx","DataTablePagination.tsx","DataTableRow.tsx","DataTable.tsx","components/NoResults.tsx","components/layout/DialogOrSheet.web.tsx","components/forms/extra/ExtraForm.tsx","components/dialogs/TicketTypeExtra.tsx","screens/authenticated/extras/ExtrasScreen.tsx"],"names":["DataTableCell","rest","style","styles","numeric","numberOfLines","StyleSheet","container","flex","flexDirection","alignItems","right","justifyContent","DataTableHeader","borderBottomColor","color","theme","header","height","paddingHorizontal","borderBottomWidth","withTheme","DataTableTitle","spinAnim","React","Animated","sortDirection","current","toValue","duration","useNativeDriver","textColor","spin","inputRange","outputRange","icon","transform","rotate","name","size","direction","I18nManager","disabled","onPress","alignContent","paddingVertical","cell","lineHeight","fontSize","fontWeight","sorted","marginLeft","DataTablePagination","labelColor","page","onPageChange","numberOfPages","paddingLeft","label","marginRight","borderStyle","minHeight","content","pointerEvents","DataTable","width","NoResults","title","subtitle","empty","textAlign","create","padding","display","fab","position","margin","bottom","DialogOrSheet","props","buttonLabel","buttonAction","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","colors","accent","Title","Content","ScrollArea","Actions","onClose","button","borderRadius","contentContainer","paddingBottom","sheet","elevation","backgroundColor","flexGrow","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","QUERY_TICKET_TYPES","gql","ExtraForm","forms","extra","dispatch","useAppDispatch","currentDropzone","useCurrentDropzone","data","useQuery","variables","dropzoneId","Number","dropzone","id","field","mode","error","fields","value","onChangeText","newValue","actions","setField","type","cost","toString","Subheader","ticketTypes","map","ticket","Item","status","ticketTypeIds","includes","xor","marginBottom","MUTATION_UPDATE_EXTRA","MUTATION_CREATE_EXTRA","TicketTypeExtraDialog","useMutation","mutationCreateExtra","mutationUpdateExtra","update","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","mutation","original","result","payload","updateExtra","createExtra","errors","notifications","showSnackbar","message","variant","fieldErrors","forEach","reset","snapPoints","QUERY_TICKET_TYPE","ExtrasScreen","formState","refetch","canCreateExtras","useRestriction","Permission","CreateExtra","ProgressBar","Header","extras","Row","setOpen","Cell","FAB","small"],"mappings":"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","file":"static/js/9.916ab518.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableCell`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a single cell inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * If you want to support multiline text, please use View instead, as multiline text doesn't comply with\n * MD Guidelines (https://github.com/callstack/react-native-paper/issues/2381).\n */\n\nconst DataTableCell = ({ children, style, numeric, ...rest }: Props) => (\n  <TouchableRipple\n    {...rest}\n    style={[styles.container, numeric && styles.right, style]}\n  >\n    <Text numberOfLines={1}>{children}</Text>\n  </TouchableRipple>\n);\n\nDataTableCell.displayName = 'DataTable.Cell';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n});\n\nexport default DataTableCell;\n","import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTableHeader`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableHeader = ({ children, style, theme, ...rest }: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <View {...rest} style={[styles.header, { borderBottomColor }, style]}>\n      {children}\n    </View>\n  );\n};\n\nDataTableHeader.displayName = 'DataTable.Header';\n\nconst styles = StyleSheet.create({\n  header: {\n    flexDirection: 'row',\n    height: 48,\n    paddingHorizontal: 16,\n    borderBottomWidth: StyleSheet.hairlineWidth * 2,\n  },\n});\n\nexport default withTheme(DataTableHeader);\n\n// @component-docs ignore-next-line\nexport { DataTableHeader };\n","import * as React from 'react';\nimport {\n  Animated,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Text content of the `DataTableTitle`.\n   */\n  children: React.ReactNode;\n  /**\n   * Align the text to the right. Generally monetary or number fields are aligned to right.\n   */\n  numeric?: boolean;\n  /**\n   * Direction of sorting. An arrow indicating the direction is displayed when this is given.\n   */\n  sortDirection?: 'ascending' | 'descending';\n  /**\n   * The number of lines to show.\n   */\n  numberOfLines?: number;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to display title in table header.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-header.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *       <DataTable>\n *         <DataTable.Header>\n *           <DataTable.Title\n *             sortDirection='descending'\n *           >\n *             Dessert\n *           </DataTable.Title>\n *           <DataTable.Title numeric>Calories</DataTable.Title>\n *           <DataTable.Title numeric>Fat (g)</DataTable.Title>\n *         </DataTable.Header>\n *       </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableTitle = ({\n  numeric,\n  children,\n  onPress,\n  sortDirection,\n  theme,\n  style,\n  numberOfLines = 1,\n  ...rest\n}: Props) => {\n  const { current: spinAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(sortDirection === 'ascending' ? 0 : 1)\n  );\n\n  React.useEffect(() => {\n    Animated.timing(spinAnim, {\n      toValue: sortDirection === 'ascending' ? 0 : 1,\n      duration: 150,\n      useNativeDriver: true,\n    }).start();\n  }, [sortDirection, spinAnim]);\n\n  const textColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  const spin = spinAnim.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '180deg'],\n  });\n\n  const icon = sortDirection ? (\n    <Animated.View style={[styles.icon, { transform: [{ rotate: spin }] }]}>\n      <MaterialCommunityIcon\n        name=\"arrow-up\"\n        size={16}\n        color={theme.colors.text}\n        direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n      />\n    </Animated.View>\n  ) : null;\n\n  return (\n    <TouchableWithoutFeedback disabled={!onPress} onPress={onPress} {...rest}>\n      <View style={[styles.container, numeric && styles.right, style]}>\n        {icon}\n\n        <Text\n          style={[\n            styles.cell,\n            sortDirection ? styles.sorted : { color: textColor },\n          ]}\n          numberOfLines={numberOfLines}\n        >\n          {children}\n        </Text>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nDataTableTitle.displayName = 'DataTable.Title';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignContent: 'center',\n    paddingVertical: 12,\n  },\n\n  right: {\n    justifyContent: 'flex-end',\n  },\n\n  cell: {\n    height: 24,\n    lineHeight: 24,\n    fontSize: 12,\n    fontWeight: '500',\n    alignItems: 'center',\n  },\n\n  sorted: {\n    marginLeft: 8,\n  },\n\n  icon: {\n    height: 24,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(DataTableTitle);\n\n// @component-docs ignore-next-line\nexport { DataTableTitle };\n","import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Label text to display\n   */\n  label?: React.ReactNode;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const itemsPerPage = 2;\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const from = page * itemsPerPage;\n *   const to = (page + 1) * itemsPerPage;\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.floor(items.length / itemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTablePagination = ({\n  label,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View {...rest} style={[styles.container, style]}>\n      <Text style={[styles.label, { color: labelColor }]} numberOfLines={1}>\n        {label}\n      </Text>\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={theme.colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n      />\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n  },\n\n  label: {\n    fontSize: 12,\n    marginRight: 44,\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n","import * as React from 'react';\nimport color from 'color';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  ViewProps,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Content of the `DataTableRow`.\n   */\n  children: React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * `pointerEvents` passed to the `View` container, which is wrapping children within `TouchableRipple`.\n   */\n  pointerEvents?: ViewProps['pointerEvents'];\n};\n\n/**\n * A component to show a single row inside of a table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-row-cell.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *      <DataTable.Row>\n *        <DataTable.Cell numeric>1</DataTable.Cell>\n *        <DataTable.Cell numeric>2</DataTable.Cell>\n *        <DataTable.Cell numeric>3</DataTable.Cell>\n *        <DataTable.Cell numeric>4</DataTable.Cell>\n *      </DataTable.Row>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nconst DataTableRow = ({\n  onPress,\n  style,\n  theme,\n  children,\n  pointerEvents,\n  ...rest\n}: Props) => {\n  const borderBottomColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <TouchableRipple\n      {...rest}\n      onPress={onPress}\n      style={[styles.container, { borderBottomColor }, style]}\n    >\n      <View style={styles.content} pointerEvents={pointerEvents}>\n        {children}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderStyle: 'solid',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    minHeight: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n\nexport default withTheme(DataTableRow);\n\n// @component-docs ignore-next-line\nexport { DataTableRow };\n","import * as React from 'react';\nimport { StyleSheet, StyleProp, View, ViewStyle } from 'react-native';\nimport DataTableCell from './DataTableCell';\nimport DataTableHeader, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableHeader as _DataTableHeader,\n} from './DataTableHeader';\nimport DataTableTitle, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTableTitle as _DataTableTitle,\n} from './DataTableTitle';\nimport DataTablePagination, {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTablePagination as _DataTablePagination,\n} from './DataTablePagination';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DataTableRow, { DataTableRow as _DataTableRow } from './DataTableRow';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DataTable`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Data tables allow displaying sets of data.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/data-table.png\" />\n *     <figcaption>Data table</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <DataTable>\n *     <DataTable.Header>\n *       <DataTable.Title>Dessert</DataTable.Title>\n *       <DataTable.Title numeric>Calories</DataTable.Title>\n *       <DataTable.Title numeric>Fat</DataTable.Title>\n *     </DataTable.Header>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Frozen yogurt</DataTable.Cell>\n *       <DataTable.Cell numeric>159</DataTable.Cell>\n *       <DataTable.Cell numeric>6.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Row>\n *       <DataTable.Cell>Ice cream sandwich</DataTable.Cell>\n *       <DataTable.Cell numeric>237</DataTable.Cell>\n *       <DataTable.Cell numeric>8.0</DataTable.Cell>\n *     </DataTable.Row>\n *\n *     <DataTable.Pagination\n *       page={1}\n *       numberOfPages={3}\n *       onPageChange={page => {\n *         console.log(page);\n *       }}\n *       label=\"1-2 of 6\"\n *     />\n *   </DataTable>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DataTable = ({ children, style, ...rest }: Props) => (\n  <View {...rest} style={[styles.container, style]}>\n    {children}\n  </View>\n);\n\n// @component ./DataTableHeader.tsx\nDataTable.Header = DataTableHeader;\n\n// @component ./DataTableTitle.tsx\nDataTable.Title = DataTableTitle;\n\n// @component ./DataTableRow.tsx\nDataTable.Row = DataTableRow;\n\n// @component ./DataTableCell.tsx\nDataTable.Cell = DataTableCell;\n\n// @component ./DataTablePagination.tsx\nDataTable.Pagination = DataTablePagination;\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n  },\n});\n\nexport default DataTable;\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\nexport default function NoResults({ title, subtitle }: { title: string, subtitle: string}) {\n  return (\n    <View style={styles.empty}>\n      <Title>{title}</Title>\n      <Paragraph style={{ textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, List } from 'react-native-paper';\nimport { xor } from \"lodash\";\nimport { Query } from '../../../graphql/schema';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_TICKET_TYPES = gql`\n  query QueryTicketType(\n    $dropzoneId: Int!\n  ) {\n    ticketTypes(dropzoneId: $dropzoneId) {\n      id\n      cost\n      currency\n      name\n      allowManifestingSelf\n\n      extras {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function ExtraForm() {\n  const state = useAppSelector(state => state.forms.extra);\n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n  const { data } = useQuery<Query>(QUERY_TICKET_TYPES, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id),\n    }\n  });\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.forms.extra.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Price\"\n        error={!!state.fields.cost.error}\n        value={state.fields.cost?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.extra.setField([\"cost\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.cost.error ? \"error\" : \"info\"}>\n        { state.fields.cost.error || \"\" }\n      </HelperText>\n\n      <View style={{ width: \"100%\"}}>\n        <List.Subheader>\n          Compatible tickets\n        </List.Subheader>\n        {\n          data?.ticketTypes.map((ticket) =>\n            <Checkbox.Item\n              label={ticket.name!}\n              status={state.fields.ticketTypeIds.value.includes(Number(ticket.id))\n                ? \"checked\"\n                : \"unchecked\"\n              }\n              onPress={\n                () => dispatch(actions.forms.extra.setField([\"ticketTypeIds\", xor(state.fields.ticketTypeIds.value, [Number(ticket.id)])]))\n              }\n            />\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { actions, useAppSelector, useAppDispatch } from '../../redux';\nimport { Mutation } from '../../graphql/schema';\nimport ExtraForm from '../../components/forms/extra/ExtraForm';\nimport DialogOrSheet from '../layout/DialogOrSheet';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\nconst MUTATION_UPDATE_EXTRA = gql`\n  mutation UpdateExtra(\n    $id: Int!,\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    updateExtra(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        ...extra\n\n        dropzone {\n          id\n          extras {\n            ...extra\n          }\n        }\n      }\n    }\n  }\n\n  fragment extra on Extra {\n    id\n    name\n    cost\n\n    ticketTypes {\n      id\n      name\n      cost\n      altitude\n      allowManifestingSelf\n    }\n  }\n`;\n\nconst MUTATION_CREATE_EXTRA = gql`\n  mutation CreateExtra(\n    $name: String,\n    $ticketTypeIds: [Int!]\n    $cost: Float\n    $dropzoneId: Int\n  ){\n    createExtra(input: {\n      attributes: {\n        name: $name,\n        ticketTypeIds: $ticketTypeIds\n        cost: $cost\n        dropzoneId: $dropzoneId\n      }\n    }) {\n      extra {\n        ...extra\n\n        dropzone {\n          id\n          extras {\n            ...extra\n          }\n        }\n      }\n    }\n  }\n\n  fragment extra on Extra {\n    id\n    name\n    cost\n\n    ticketTypes {\n      id\n      name\n      cost\n      altitude\n      allowManifestingSelf\n    }\n  }\n`;\n\n\ninterface ITicketTypeExtraDialog {\n  open: boolean;\n  onClose(): void;\n}\nexport default function TicketTypeExtraDialog(props: ITicketTypeExtraDialog) {\n  const { open, onClose } = props;\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.extra);\n  const dispatch = useAppDispatch();\n\n\n  const [mutationCreateExtra, create] = useMutation<Mutation>(MUTATION_CREATE_EXTRA);\n  const [mutationUpdateExtra, update] = useMutation<Mutation>(MUTATION_UPDATE_EXTRA);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.extra.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (Number(state.fields.cost.value) < 0) {\n      hasError = true;\n      dispatch(\n        actions.forms.extra.setFieldError([\"cost\", \"Price must be a number\"])\n      );\n    }\n\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, cost, ticketTypeIds } = state.fields;\n\n    if (validate()) {\n\n      const mutation = state?.original?.id\n       ? mutationUpdateExtra\n       : mutationCreateExtra;\n\n      try {\n        const result = await mutation({\n          variables: {\n            ...state.original?.id ? { id: Number(state.original.id) } : {},\n            dropzoneId: Number(currentDropzone?.dropzone?.id),\n            name: name.value,\n            cost: cost.value,\n            ticketTypeIds: ticketTypeIds.value,\n          }\n        });\n\n        const payload = state.original?.id\n          ? result.data?.updateExtra\n          : result.data?.createExtra;\n\n        if (payload?.errors?.length) {\n          return dispatch(\n            actions.notifications.showSnackbar({ message: payload.errors[0], variant: \"error\" })\n          )\n        } else if (payload?.fieldErrors?.length) {\n          payload.fieldErrors?.forEach(({ field, message }) => {\n            switch(field) {\n              case \"name\":\n                return dispatch(actions.forms.extra.setFieldError([\"name\", message]));\n              case \"cost\":\n                return dispatch(actions.forms.extra.setFieldError([\"cost\", message]));\n              case \"ticket_type_ids\":\n                return dispatch(actions.forms.extra.setFieldError([\"ticketTypeIds\", message]));\n            }\n          });\n        } else if (payload?.extra) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: `Saved ${payload.extra.name}`, variant: \"success\" })\n          );\n          onClose();\n          dispatch(actions.forms.extra.reset());\n        }\n      } catch (error) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateExtra]);\n\n  return (\n    <DialogOrSheet\n      title={ state.original?.id ? \"Edit ticket addon\" : \"New ticket addon\"}\n      open={open}\n      onClose={onClose}\n      loading={create.loading || update.loading}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n      snapPoints={[0, \"50%\", \"80%\"]}\n    >\n      <ExtraForm />\n    </DialogOrSheet>\n  );\n}\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { FAB, DataTable, ProgressBar } from 'react-native-paper';\nimport { View } from '../../../components/Themed';\nimport { Permission, Query } from \"../../../graphql/schema.d\";\n\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport NoResults from '../../../components/NoResults';\nimport TicketTypeExtraDialog from '../../../components/dialogs/TicketTypeExtra';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport useRestriction from '../../../hooks/useRestriction';\n\n\nconst QUERY_TICKET_TYPE = gql`\n  query QueryExtra(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      extras {\n        id\n        cost\n        name\n        ticketTypes {\n          id\n          altitude\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function ExtrasScreen() {\n  const currentDropzone = useCurrentDropzone();\n  const globalState = useAppSelector(state => state.global);\n  const formState = useAppSelector(state => state.forms.extra);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_TICKET_TYPE, {\n    variables: {\n      dropzoneId: Number(currentDropzone?.dropzone?.id)\n    }\n  });\n  const dispatch = useAppDispatch();\n  const canCreateExtras = useRestriction(Permission.CreateExtra);\n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={globalState.theme.colors.accent} />\n    <View style={styles.container}>\n      <DataTable>\n        <DataTable.Header>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Cost</DataTable.Title>\n        </DataTable.Header>\n\n        { data?.dropzone?.extras?.map((extra) =>\n          <DataTable.Row\n            onPress={() => {\n              dispatch(actions.forms.extra.setOpen(extra));\n            }}\n            pointerEvents=\"none\"\n          >\n            <DataTable.Cell>{extra.name}</DataTable.Cell>\n            <DataTable.Cell numeric>${extra.cost}</DataTable.Cell>\n          </DataTable.Row>\n        )}\n      </DataTable>\n      { !loading && !data?.dropzone?.extras?.length && (\n          <NoResults\n            title=\"No ticket addons\"\n            subtitle=\"You can add multiple addons to assign to tickets, e.g outside camera, or coach\"\n          />\n      )}\n      \n      <FAB\n        style={styles.fab}\n        visible={canCreateExtras}\n        small\n        icon=\"plus\"\n        onPress={() => dispatch(actions.forms.extra.setOpen(true))}\n        label=\"New ticket addon\"\n      />\n    </View>\n    <TicketTypeExtraDialog\n      open={formState.open}\n      onClose={() => dispatch(actions.forms.extra.setOpen(false))}\n    />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\"\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n"],"sourceRoot":""}