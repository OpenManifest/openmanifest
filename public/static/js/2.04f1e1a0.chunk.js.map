{"version":3,"sources":["components/input/chip_select/ChipSelect.tsx","components/layout/DialogOrSheet.web.tsx","components/input/date_picker/DatePicker.web.tsx","components/input/chip_select/LicenseChipSelect.tsx","components/input/dropdown_select/FederationSelect.tsx","components/forms/user/UserForm.tsx","components/forms/rig/RigForm.tsx","components/dialogs/Rig.tsx","components/input/dropdown_select/RoleSelect.tsx","components/forms/dropzone_user/DropzoneUserForm.tsx","components/dialogs/DropzoneUserDialog.tsx","components/forms/credits/CreditsForm.tsx","components/dialogs/CreditsDialog/Credits.web.tsx","components/dialogs/User.tsx","screens/authenticated/profile/UserInfo/TableCard.tsx","screens/authenticated/profile/UserInfo/Header.tsx","screens/authenticated/profile/UserInfo/InfoGrid.tsx","graphql/hooks/useDropzoneUser.ts","components/Badge.tsx","graphql/hooks/useMutationRevokePermission.ts","graphql/hooks/useMutationGrantPermission.ts","screens/authenticated/profile/ProfileScreen.tsx"],"names":["ChipSelect","props","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","React","length","JSON","stringify","style","flexDirection","flexWrap","map","item","key","mode","some","value","isEqual","undefined","margin","disabled","onPress","xorBy","DialogOrSheet","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","justifyContent","onClose","StyleSheet","create","button","width","borderRadius","padding","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","height","display","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","DatePicker","setOpen","date","onChange","getTime","onDismiss","anchor","Item","label","description","timestamp","format","left","Icon","selectedDays","Date","onDayClick","QUERY_LICENSES","gql","LicenseChipSelect","data","useQuery","variables","federationId","Subheader","licenses","filter","Boolean","id","license","name","first","onSelect","QUERY_FEDERATIONS","FederationSelect","isMenuOpen","setMenuOpen","federations","Menu","required","federation","SlotForm","forms","user","dispatch","useAppDispatch","original","fields","exitWeight","actions","setField","rigs","TextInput","styles","field","error","toString","onChangeText","newValue","HelperText","type","email","phone","keyboardType","right","Affix","text","Divider","View","setFederation","Number","flex","paddingTop","marginBottom","ticketAddons","RigForm","rig","canCreateRigs","useRestriction","Permission","CreateRig","make","model","serial","canopySize","showTypeSelect","rigType","repackExpiresAt","time","MUTATION_CREATE_RIG","MUTATION_UPDATE_RIG","RigDialog","userId","dropzoneId","useMutation","mutationCreateRig","createData","mutationUpdateRig","updateData","isLoading","validate","hasErrors","setFieldError","onSave","a","async","mutation","response","result","updateRig","createRig","fieldErrors","message","errors","notifications","showSnackbar","variant","onSuccess","snapPoints","reset","QUERY_ROLES","RoleSelect","currentDropzoneId","refetch","paddingLeft","dropzone","roles","role","DropzoneUserForm","dropzoneUser","canUpdateRole","GrantPermission","newRole","expiresAt","MUTATION_EDIT_DROPZONE_USER","DropzoneUserDialog","mutationUpdateDropzoneUser","userRoleId","dropzoneUserId","updateDropzoneUser","console","Portal","Dialog","ProgressBar","Button","CreditsForm","credits","currentCredits","amount","subtotal","status","defaultIndex","onChangeIndex","newIndex","DataTable","Row","Cell","numeric","Text","fontWeight","MUTATION_CREATE_TRANSACTION","mutationCreateTransaction","UpdateUserDialog","mutationUpdateUser","useMutationUpdateUser","payload","onFieldError","onError","hasError","emailRegex","RegExp","test","mutate","licenseId","parseFloat","UserForm","TableCard","buttonIcon","onPressButton","card","container","IconButton","primary","marginVertical","UserHeader","onEdit","canEdit","onPressAvatar","size","surface","avatarContainer","TouchableRipple","image","Image","source","uri","titleContainer","Paragraph","paragraph","alignItems","InfoGrid","divider","i","titleStyle","bold","descriptionStyle","verticalDivider","hairlineWidth","textAlign","QUERY_DROPZONE_USER","Badge","iconName","Chip","marginHorizontal","borderColor","MUTATION_REVOKE_PERMISSION","createMutation","getPayload","revokePermission","validates","permissionName","isRequired","MUTATION_GRANT_PERMISSION","grantPermission","MUTATION_UPDATE_IMAGE","ProfileScreen","navigation","useNavigation","currentUser","useCurrentDropzone","route","useRoute","isSelf","params","currentDropzone","useDropzoneUser","canGrantPermission","isFocused","useIsFocused","useMutationRevokePermission","useMutationGrantPermission","Platform","OS","ImagePicker","alert","onPickImage","mediaTypes","Images","allowsEditing","aspect","quality","base64","log","badges","permissions","canAddTransaction","CreateUserTransaction","canUpdateUser","UpdateUser","ScrollableScreen","contentContainerStyle","content","refreshControl","RefreshControl","refreshing","onRefresh","horizontal","ActAsPilot","ActAsDzso","ActAsGca","ActAsRigInspector","ActAsLoadMaster","permission","includes","shouldShowBadge","MaterialCommunityIcons","chip","textStyle","chipTitle","Math","round","Header","onLongPress","navigate","join","rigInspections","insp","isOk","successColor","warningColor","transactions","edges","edge","node","fontSize","fontStyle","createdAt","Rig","setUser","minHeight","borderWidth","lineHeight","textAlignVertical"],"mappings":"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","file":"static/js/2.04f1e1a0.chunk.js","sourcesContent":["import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { License, Query } from \"../../../graphql/schema.d\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseChipSelect(props: ILicenseSelect) {\n\n  const { data } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        License\n      </List.Subheader>\n      <ChipSelect<License>\n        autoSelectFirst\n        icon=\"ticket-account\"\n        items={data?.licenses || []}\n        selected={[props.value].filter(Boolean) as License[]}\n        isSelected={(item) => item.id === props.value?.id}\n        renderItemLabel={(license) => license?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport { Federation, Query } from \"../../../graphql/schema.d\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  React.useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Please select federation\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.federations?.map((federation) => \n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n            key={`federation-select-${federation.id}`}\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Divider } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport LicenseChipSelect from '../../input/chip_select/LicenseChipSelect';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n  React.useEffect(() => {\n    if (state.original) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.user.setField([\"exitWeight\", state.original.exitWeight || \"60\"])\n        );\n      }\n\n      if (!state.fields.rigs.value && state.original?.id) {\n        dispatch(\n          actions.forms.user.setField([\"rigs\", state.original.rigs])\n        );\n      }\n\n    }\n  }, [state.original?.id]);\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"name\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Email\"\n        error={!!state.fields.email.error}\n        value={state.fields.email?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"email\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.email.error ? \"error\" : \"info\"}>\n        { state.fields.email.error || \" \" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Phone\"\n        error={!!state.fields.phone.error}\n        value={state.fields.phone?.value?.toString() || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"phone\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.phone.error ? \"error\" : \"info\"}>\n        { state.fields.phone.error || \"\" }\n      </HelperText>\n\n      \n      \n     <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.user.setField([\"exitWeight\", newValue]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      <Divider />\n\n      <View style={{ width: \"100%\"}}>\n        <FederationSelect\n          value={state?.fields?.license?.value?.federation || state.federation.value}\n          onSelect={(value) => dispatch(actions.forms.user.setFederation(value))}\n          required\n        />\n\n        <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n          { state.federation.error || \"\" }\n        </HelperText>\n\n        { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n          <>\n            <LicenseChipSelect\n              value={state.fields.license.value}\n              federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n              onSelect={(value) => dispatch(actions.forms.user.setField([\"license\", value]))}\n              required\n            />\n            <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n              { state.fields.license.error || \"\" }\n            </HelperText>\n          </>\n        )}\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\",\n    paddingTop: 32,\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { Permission } from '../../../graphql/schema.d';\n\n\ninterface IRigForm {\n  showTypeSelect?: boolean;\n}\nexport default function RigForm(props: IRigForm) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n\n  const canCreateRigs = useRestriction(Permission.CreateRig);\n\n  return ( \n    <View>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Make\"\n        error={!!state.fields.make.error}\n        value={state.fields.make.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"make\", newValue]))}\n      />\n      <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n        { state.fields.make.error || \"e.g Javelin, Mirage\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Model\"\n        error={!!state.fields.model.error}\n        value={state.fields.model.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"model\", newValue]))}\n      />\n      <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n        { state.fields.model.error || \"e.g G4.1\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Serial\"\n        error={!!state.fields.serial.error}\n        value={state.fields.serial.value || \"\"}\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"serial\", newValue]))}\n      />\n      <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n        { state.fields.serial.error || \"\" }\n      </HelperText>\n\n      \n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Current canopy size\"\n        error={!!state.fields.canopySize.error}\n        value={state.fields.canopySize.value?.toString() || \"\"}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"canopySize\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.canopySize.error ? \"error\" : \"info\"}>\n        { state.fields.canopySize.error || \"Size of canopy in container\" }\n      </HelperText>\n\n      { !props.showTypeSelect ? null : (\n        <ChipSelect\n          items={[\"student\", \"sport\", \"tandem\"]}\n          renderItemLabel={(item) => item}\n          isDisabled={(item) => !canCreateRigs ? item !== \"sport\" : false}\n          selected={[state.fields.rigType?.value || \"sport\"]}\n          onChangeSelected={([rigType]) =>\n            dispatch(actions.forms.rig.setField([\"rigType\", rigType]))\n          }\n        />\n      )}\n      <DatePicker\n        timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.forms.rig.setField([\"repackExpiresAt\", time]))}\n        label=\"Reserve repack expiry date\"\n      />\n      <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.repackExpiresAt.error || \"\" }\n      </HelperText>\n\n      \n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Mutation } from \"../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport RigForm from \"../forms/rig/RigForm\";\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\ninterface IRigDialog {\n  open?: boolean;\n  dropzoneId?: number;\n  userId?: number;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigDialog(props: IRigDialog) {\n  const { open, onClose, userId, dropzoneId } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.rig);\n  const [mutationCreateRig, createData] = useMutation<Mutation>(MUTATION_CREATE_RIG);\n  const [mutationUpdateRig, updateData] = useMutation<Mutation>(MUTATION_UPDATE_RIG);\n\n  const isLoading = createData.loading || updateData.loading;\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.make.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"make\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.model.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"model\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.serial.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"serial\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.canopySize.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"canopySize\", \"Required\"])\n      );\n    }\n\n    if (!state.fields.repackExpiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.rig.setFieldError([\"repackExpiresAt\", \"You must select a repack date in the future\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const mutation = state.original?.id ? mutationUpdateRig : mutationCreateRig;\n      const response = await mutation({\n        variables: {\n          ...state.original?.id ? { id: Number(state.original?.id) } : {},\n          make: state.fields.make.value,\n          model: state.fields.model.value,\n          serial: state.fields.serial.value,\n          canopySize: state.fields.canopySize.value,\n          rigType: state.fields.rigType.value,\n          repackExpiresAt: state.fields.repackExpiresAt.value,\n          userId: props.userId ? Number(props.userId) : null,\n          dropzoneId: props.dropzoneId ? Number(props.dropzoneId) : null,\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"make\":\n            return dispatch(actions.forms.rig.setFieldError([\"make\", message]));\n          case \"model\":\n            return dispatch(actions.forms.rig.setFieldError([\"model\", message]));\n          case \"serial\":\n            return dispatch(actions.forms.rig.setFieldError([\"serial\", message]));\n          case \"canopy_size\":\n            return dispatch(actions.forms.rig.setFieldError([\"canopySize\", message]));\n          case \"repack_expires_at\":\n            return dispatch(actions.forms.rig.setFieldError([\"repackExpiresAt\", message]));\n          case \"rig_type\":\n            return dispatch(actions.forms.rig.setFieldError([\"rigType\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateRig, mutationUpdateRig, props.onSuccess])\n\n  return (\n    <DialogOrSheet\n      title={ state.original?.id ? \"Edit rig\" : \"New rig\"}\n      open={open}\n      snapPoints={[0, 580]}\n      onClose={() => {\n        props.onClose();\n        dispatch(actions.forms.rig.reset());\n      }}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n      loading={isLoading}\n    >\n      <RigForm showTypeSelect={!!props.dropzoneId} />\n    </DialogOrSheet>\n  )\n}\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Query, UserRole } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\n\ninterface IRoleSelect {\n  value?: UserRole | null;\n  required?: boolean;\n  disabled?: boolean;\n  onSelect(jt: UserRole): void;\n}\n\nconst QUERY_ROLES = gql`\n  query RolesQuery($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n      }\n    }\n  }\n`;\n\nexport default function RoleSelect(props: IRoleSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data, loading, refetch } = useQuery<Query>(QUERY_ROLES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  return (\n    <>\n    <List.Subheader style={{ paddingLeft: 0 }}>\n      Access level\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={!props.disabled && isMenuOpen}\n      anchor={\n        <List.Item\n          left={() => <List.Icon icon=\"lock\" />}\n          onPress={props.disabled ? undefined : () => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value?.name || \"Access level\"\n          }\n          description={!props.required ? \"Optional\" : null}\n        />\n      }>\n      {\n        data?.dropzone?.roles?.map((role) =>\n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(role);\n            }}\n            title={\n              role.name || \"-\"\n            }\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { HelperText, List } from 'react-native-paper';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport DatePicker from '../../input/date_picker/DatePicker';\nimport RoleSelect from '../../input/dropdown_select/RoleSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { Permission } from '../../../graphql/schema.d';\n\nexport default function DropzoneUserForm() {\n  const state = useAppSelector(state => state.forms.dropzoneUser);\n  const dispatch = useAppDispatch();\n  const canUpdateRole = useRestriction(Permission.GrantPermission);\n\n  return ( \n    <>\n      <RoleSelect\n        value={state.fields.role.value}\n        onSelect={(newRole) => dispatch(actions.forms.dropzoneUser.setField([\"role\", newRole]))}\n        disabled={!canUpdateRole}\n        required\n      />\n      <HelperText type={!!state.fields.role.error ? \"error\" : \"info\"}>\n        { state.fields.role.error }\n      </HelperText>\n\n\n      <List.Subheader style={{ paddingLeft: 0 }}>\n        Financial\n      </List.Subheader>\n      <DatePicker\n        timestamp={state.fields.expiresAt.value || new Date().getTime() / 1000}\n        onChange={(time) => dispatch(actions.forms.dropzoneUser.setField([\"expiresAt\", time]))}\n        label=\"Membership expires\"\n      />\n      <HelperText type={!!state.fields.expiresAt.error ? \"error\" : \"info\"}>\n        { state.fields.expiresAt.error }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { DropzoneUser, Mutation } from \"../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DropzoneUserForm from \"../forms/dropzone_user/DropzoneUserForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(user: DropzoneUser): void;\n}\n\nconst MUTATION_EDIT_DROPZONE_USER = gql`\n  mutation UpdateDropzoneUser(\n    $userRoleId: Int,\n    $expiresAt: Int,\n    $dropzoneUserId: Int\n  ) {\n    updateDropzoneUser(\n      input: {\n        id: $dropzoneUserId,\n        attributes: {\n          userRoleId: $userRoleId,\n          expiresAt: $expiresAt,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      dropzoneUser {\n        id\n        credits\n        expiresAt\n        role {\n          id\n          name\n        }\n\n        user {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.dropzoneUser);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationUpdateDropzoneUser, createData] = useMutation<Mutation>(MUTATION_EDIT_DROPZONE_USER);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    \n    if (!state.fields.role.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.dropzoneUser.setFieldError([\"role\", \"User must have an access level\"])\n      );\n    }\n\n    if (!state.fields.expiresAt.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.dropzoneUser.setFieldError([\"expiresAt\", \"Membership expiry must be set\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationUpdateDropzoneUser({\n        variables: {\n          ...state.original?.id ? { id: state.original?.id } : {},\n          userRoleId: Number(state.fields.role.value?.id),\n          expiresAt: state.fields.expiresAt.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = response.data?.updateDropzoneUser;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"user_role\":\n            return dispatch(actions.forms.dropzoneUser.setFieldError([\"role\", message]));\n          case \"expires_at\":\n            return dispatch(actions.forms.dropzoneUser.setFieldError([\"expiresAt\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        props.onSuccess(result.dropzoneUser);\n      } else {\n        console.error(result.fieldErrors);\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationUpdateDropzoneUser, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`${state?.original?.id ? \"Edit\" : \"New\"} dropzone user`}\n        </Dialog.Title>\n        <Dialog.Content>\n          <DropzoneUserForm />\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.dropzoneUser.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TextInput, HelperText, Divider, Dialog, DataTable } from 'react-native-paper';\nimport { Tabs, TabScreen } from \"react-native-paper-tabs\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nexport default function CreditsForm() {\n  const state = useAppSelector(state => state.forms.credits);\n  const dispatch = useAppDispatch();\n\n  const currentCredits = (state.original?.credits || 0)\n  const amount = (state.fields.amount.value || 0);\n\n  const subtotal = state.fields.status.value === \"deposit\"\n    ? amount + currentCredits\n    : amount - currentCredits;\n  return ( \n    <>\n      <Tabs\n        defaultIndex={0} // default = 0\n        onChangeIndex={(newIndex) => {\n          dispatch(actions.forms.credits.setField([\"status\", newIndex === 1 ? \"withdrawal\" : \"deposit\"]));\n        }}\n        mode=\"fixed\"\n      >\n        <TabScreen label=\"Deposit\" icon=\"arrow-up\"><View /></TabScreen>\n        <TabScreen label=\"Withdraw\" icon=\"arrow-down\"><View /></TabScreen>\n      </Tabs>\n      <Dialog.Content style={{ paddingTop: 16 }}>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            label=\"Message\"\n            error={!!state.fields.message.error}\n            value={state.fields.message.value?.toString() || \"\"}\n            onChangeText={(newValue: string) => dispatch(actions.forms.credits.setField([\"message\", newValue]))}\n          />\n          <HelperText type={!!state.fields.message.error ? \"error\" : \"info\"}>\n            { state.fields.message.error || \"\" }\n          </HelperText>\n          { state.fields.status.value === \"deposit\" \n            ? (\n                <View>\n                  \n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Add amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue: string) => dispatch(actions.forms.credits.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original?.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Deposit</DataTable.Title>\n                      <DataTable.Cell numeric>{`+$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            ) : (\n                <View>\n                  <TextInput\n                    style={styles.field}\n                    mode=\"outlined\"\n                    label=\"Withdraw amount\"\n                    error={!!state.fields.amount.error}\n                    value={state.fields.amount.value?.toString() || \"\"}\n                    keyboardType=\"number-pad\"\n                    onChangeText={(newValue: string) => dispatch(actions.forms.credits.setField([\"amount\", Number(newValue)]))}\n                  />\n                  <HelperText type={!!state.fields.amount.error ? \"error\" : \"info\"}>\n                    { state.fields.amount.error || \"\" }\n                  </HelperText>\n\n                  <Divider />\n\n                  <DataTable>\n                    <DataTable.Row>\n                      <DataTable.Title>Current balance</DataTable.Title>\n                      <DataTable.Cell numeric>{`$${state.original?.credits || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>Withdraw</DataTable.Title>\n                      <DataTable.Cell numeric>{`-$${state.fields.amount.value || 0}`}</DataTable.Cell>\n                    </DataTable.Row>\n                    <DataTable.Row>\n                      <DataTable.Title>\n                        <Text style={{ fontWeight: \"bold\" }}>New total</Text>\n                      </DataTable.Title>\n                      <DataTable.Cell numeric>{`${subtotal < 0 ? \"-\" : \"\"}$${subtotal < 0 ? subtotal * -1 : subtotal}`}</DataTable.Cell>\n                    </DataTable.Row>\n                  </DataTable>\n                </View>\n            )}\n      </Dialog.Content>\n      </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport CreditsForm from \"../../forms/credits/CreditsForm\";\ninterface IDropzoneUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_TRANSACTION = gql`\n  mutation CreatrTransaction(\n    $message: String,\n    $status: String,\n    $amount: Float,\n    $dropzoneUserId: Int,\n  ) {\n    createTransaction(\n      input: {\n        attributes: {\n          amount: $amount,\n          dropzoneUserId: $dropzoneUserId,\n          message: $message,\n          status: $status,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      transaction {\n        id\n        amount\n        message\n\n        dropzoneUser {\n          id\n          credits\n\n          transactions {\n            edges {\n              node {\n                id\n                status\n                amount\n                createdAt\n                message\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzoneUserDialog(props: IDropzoneUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.credits);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateTransaction, createData] = useMutation<Mutation>(MUTATION_CREATE_TRANSACTION);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.amount.value) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.credits.setFieldError([\"amount\", \"You must specify an amount\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  \n  const onSave = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const response = await mutationCreateTransaction({\n        variables: {\n          amount: state.fields.amount.value,\n          message: state.fields.message.value,\n          status: state.fields.status.value,\n          dropzoneUserId: Number(state.original?.id),\n        }\n      });\n      const result = state.original?.id ? response.data?.updateRig : response.data?.createRig;\n\n      result?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"amount\":\n            return dispatch(actions.forms.credits.setFieldError([\"amount\", message]));\n          case \"message\":\n            return dispatch(actions.forms.credits.setFieldError([\"message\", message]));\n          case \"status\":\n            return dispatch(actions.forms.credits.setFieldError([\"status\", message]));\n        }\n      });\n      if (result?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.errors[0], variant: \"error\" }));\n      }\n      if (!result?.fieldErrors?.length) {\n        dispatch(actions.forms.credits.reset());\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateTransaction, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open}>\n        <ProgressBar indeterminate visible={createData.loading} color={globalState.theme.colors.accent} />\n        <CreditsForm />\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.credits.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={onSave}>\n            Save\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import * as React from \"react\";\nimport UserForm from '../forms/user/UserForm';\nimport { actions, useAppDispatch, useAppSelector } from \"../../redux\";\nimport DialogOrSheet from \"../layout/DialogOrSheet\";\nimport useMutationUpdateUser from \"../../graphql/hooks/useMutationUpdateUser\";\n\ninterface IUpdateUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\nexport default function UpdateUserDialog(props: IUpdateUserDialog) {\n  const { open, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: (payload) => {\n      dispatch(\n        actions.notifications.showSnackbar({ message: `Profile has been updated`, variant: \"success\" })\n      );\n      dispatch(actions.forms.user.reset());\n      onSuccess();\n    },\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.user.setFieldError([field as any, value])),\n    onError: (error) =>\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n  });\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n    if ((state.fields.name?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if ((state.fields.email?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"email\", \"Email is too short\"])\n      );\n    }\n\n    if ((state.fields.phone?.value?.length || 0) < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"phone\", \"Phone number is too short\"])\n      );\n    }\n\n    if (!emailRegex.test(state.fields?.email?.value || \"\")) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"email\", \"Please enter a valid email\"])\n      );\n    }\n\n    if ((state.fields.exitWeight?.value || 0) < 30) {\n      hasError = true;\n      dispatch(\n        actions.forms.user.setFieldError([\"exitWeight\", \"Exit weight seems too low?\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, license, phone, email, exitWeight } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdateUser.mutate({\n          id: Number(state.original!.id!),\n          name: name.value,\n          licenseId: !license.value?.id ? null : Number(license.value!.id),\n          phone: phone.value,\n          exitWeight: parseFloat(exitWeight.value!),\n          email: email.value,\n        });        \n      } catch (error) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdateUser]);\n\n\n  return (\n    <DialogOrSheet\n      title=\"Update information\"\n      open={open}\n      snapPoints={[0, 740]}\n      loading={mutationUpdateUser.loading}\n      onClose={() => {\n        props.onClose();\n        dispatch(actions.forms.user.reset());\n      }}\n      buttonAction={onSave}\n      buttonLabel=\"Save\"\n    >\n      <UserForm />\n    </DialogOrSheet>\n  )\n}\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { IconButton, List} from 'react-native-paper';\n\n\nimport { useAppSelector } from '../../../../redux';\n\ninterface ITableCard {\n  children: React.ReactNode;\n  title: string;\n  buttonIcon?: string;\n  onPressButton?(): void;\n}\nexport default function TableCard(props: ITableCard) {\n  const state = useAppSelector(state => state.global);\n  const { title, children, buttonIcon, onPressButton } = props;\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.container}>\n        <List.Subheader style={styles.title}>{title}</List.Subheader>\n        {\n          buttonIcon && (\n            <IconButton\n              icon={buttonIcon}\n              onPress={() => !onPressButton ? null : onPressButton()}\n              color={state.theme.colors.primary}\n            />\n        )}\n      </View>\n      {children}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\"\n  },\n  title: { flexGrow: 1 },\n  card: {\n    marginVertical: 8,\n    width: \"100%\",\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, IconButton, Paragraph, Title, TouchableRipple } from 'react-native-paper';\n\nimport { useAppSelector } from '../../../../redux';\nimport { DropzoneUser } from '../../../../graphql/schema';\n\n\ninterface IUserHeader {\n  dropzoneUser?: DropzoneUser;\n  canEdit?: boolean;\n  children?: React.ReactNode;\n  onPressAvatar?(): void;\n  onEdit?(): void;\n}\nexport default function UserHeader(props: IUserHeader) {\n  const { dropzoneUser, onEdit, canEdit, children, onPressAvatar } = props;\n  const { theme } = useAppSelector(state => state.global);\n  return (\n      <View style={[styles.container, { backgroundColor: theme.colors.primary }]}>\n        <View style={styles.actions}>\n        {\n          !canEdit ? null : (\n            <IconButton\n              icon=\"pencil\"\n              size={20}\n              color={theme.colors.surface}\n              onPress={() => onEdit ? onEdit() : null}\n            />\n          )}\n        </View>\n        <View style={styles.avatarContainer}>\n          <View style={{ flex: 1/3 }}>\n            <TouchableRipple onPress={onPressAvatar}>\n              {\n                !dropzoneUser?.user?.image\n                ? <Avatar.Icon\n                    size={80}\n                    icon=\"account\"\n                    color={theme.colors.primary}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n                : <Avatar.Image\n                    size={80}\n                    source={{ uri: dropzoneUser?.user.image }}\n                    style={{ backgroundColor: theme.colors.surface }}\n                  />\n              }\n            </TouchableRipple>\n          </View>\n          <View style={styles.titleContainer}>\n            <Title style={styles.title}>{dropzoneUser?.user?.name}</Title>\n            <Paragraph style={styles.paragraph}>{dropzoneUser?.role?.name}</Paragraph>\n          </View>\n        </View>\n\n        {children}\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: \"100%\",\n    paddingTop: 16\n  },\n  actions: {\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\"\n  },\n  avatarContainer: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingHorizontal: 16,\n    marginBottom: 16,\n  },\n  titleContainer: {\n    paddingLeft: 48,\n    flex: 2/3,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  title: {\n    color: \"white\"\n  },\n  paragraph: {\n    color: \"white\"\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Divider, List } from 'react-native-paper';\n\ninterface IInfoGrid {\n  items: Array<{ title: string, value: string, onPress?(): void; bold?: boolean }>;\n}\nexport default function InfoGrid(props: IInfoGrid) {\n  const { items } = props;\n  const flex = 1 / items.length;\n\n  return (\n    <>\n      <Divider style={styles.divider} />\n      <View style={styles.container}>\n        {\n          items.map((item, i) =>\n          <>\n            <View style={{ flex }} key={`info-grid-${i}`}>\n              <List.Item\n                titleStyle={[styles.title, {\n                  fontWeight: item.bold !== false ? \"bold\" : undefined\n                }]}\n                title={item.value}\n                descriptionStyle={styles.description}\n                description={item.title}\n                onPress={item.onPress}\n              />\n            </View>\n            {i === items.length - 1 ? null : <Divider key={`info-grid-divider-${i}`} style={styles.verticalDivider} />}\n          </>\n          )\n        }\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n container: { width: \"100%\", flexDirection: \"row\" },\n  divider: {\n    height: StyleSheet.hairlineWidth,\n    width: '100%',\n    backgroundColor: \"white\",\n  },\n  verticalDivider: {\n    width: StyleSheet.hairlineWidth,\n    height: '100%',\n    backgroundColor: \"white\",\n  },\n  title: {\n    textAlign: \"center\",\n    color: \"white\",\n  },\n  description: {\n    textAlign: \"center\",\n    color: \"white\",\n  }\n});\n","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useCurrentDropzone from \"./useCurrentDropzone\";\n\nconst QUERY_DROPZONE_USER = gql`\n  query QueryDropzoneUser($dropzoneId: Int!, $dropzoneUserId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUser(id: $dropzoneUserId) {\n        id\n        credits\n        expiresAt\n        permissions\n\n        role {\n          id\n          name\n        }\n        rigInspections {\n          id\n          isOk\n          rig {\n            id\n          }\n        }\n\n        notifications {\n          edges {\n            node {\n              id\n              message\n              notificationType\n              createdAt\n            }\n          }\n        }\n\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              message\n              amount\n              createdAt\n            }\n          }\n        }\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          image\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n            federation {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n// Returns current user if no ID is provided\nexport default function useDropzoneUser(id?: number) {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const currentDropzone = useCurrentDropzone();\n\n  const dropzoneUser = useQuery<Pick<Query, \"dropzone\">>(QUERY_DROPZONE_USER, {\n    variables: {\n      dropzoneId: dropzoneId,\n      dropzoneUserId: id || currentDropzone?.data?.dropzone?.currentUser?.id,\n    }\n  });\n\n  return {\n    ...dropzoneUser,\n    dropzoneUser: !id || id === Number(currentDropzone?.data?.dropzone?.currentUser?.id)\n      ? currentDropzone?.data?.dropzone?.currentUser\n      : dropzoneUser?.data?.dropzone?.dropzoneUser,\n  };\n}","import * as React from \"react\";\nimport { Chip } from \"react-native-paper\";\nimport { Permission } from \"../graphql/schema.d\";\n\n\nexport interface IBadgeProps {\n  disabled?: boolean;\n  selected?: boolean;\n  onPress?(): void;\n  type:\n    | Permission.ActAsDzso\n    | Permission.ActAsGca\n    | Permission.ActAsLoadMaster\n    | Permission.ActAsPilot\n    | Permission.ActAsRigInspector;\n}\n\nfunction Badge(props: IBadgeProps) {\n\n  const { type, selected, disabled, onPress } = props;\n  const iconName = {\n    \"actAsDZSO\": \"shield-cross\",\n    \"actAsGCA\": \"radio-handheld\",\n    \"actAsLoadMaster\": \"shield-account\",\n    \"actAsPilot\": \"shield-airplane\",\n    \"actAsRigInspector\": \"shield-search\"\n  }[props.type];\n\n  const label = {\n    \"actAsDZSO\": \"DZSO\",\n    \"actAsGCA\": \"GCA\",\n    \"actAsLoadMaster\": \"Load Master\",\n    \"actAsPilot\": \"Pilot\",\n    \"actAsRigInspector\": \"Rig Inspector\"\n  }[props.type];\n\n  return (\n    <Chip\n      mode={selected ? \"outlined\" : \"flat\"}\n      icon={iconName}\n      style={[\n        { marginHorizontal: 2 },\n        selected ?  undefined : { backgroundColor: \"transparent\", borderColor: \"white\" }\n      ].filter(Boolean)}\n      disabled={disabled}\n      onPress={() => onPress()}\n    >\n      {label}\n    </Chip>\n  )\n}\n\nexport default Badge;","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { RevokePermissionPayload } from \"../schema\";\n\n\nexport const MUTATION_REVOKE_PERMISSION = gql`\nmutation RevokePermission(\n  $dropzoneUserId: Int!,\n  $permissionName: Permission!,\n){\n  revokePermission(input: { id: $dropzoneUserId, permission: $permissionName }) {\n    dropzoneUser {\n      id\n      permissions\n    }\n    fieldErrors {\n      field\n      message\n    }\n    errors\n  }\n}\n`;\n\n\nexport default createMutation<{\n  dropzoneUserId: number,\n  permissionName: string,\n}, RevokePermissionPayload>(\n  MUTATION_REVOKE_PERMISSION, {\n    getPayload: (result) => result.revokePermission,\n    validates: {\n      permissionName: [\n        isRequired(\"Permission name is required\")\n      ]\n    }\n  }\n)","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { GrantPermissionPayload } from \"../schema\";\n\n\nexport const MUTATION_GRANT_PERMISSION = gql`\nmutation GrantPermission(\n  $dropzoneUserId: Int!,\n  $permissionName: Permission!,\n){\n  grantPermission(input: { id: $dropzoneUserId, permission: $permissionName }) {\n    dropzoneUser {\n      id\n      permissions\n    }\n    fieldErrors {\n      field\n      message\n    }\n    errors\n  }\n}\n`;\n\n\nexport default createMutation<{\n  dropzoneUserId: number,\n  permissionName: string,\n}, GrantPermissionPayload>(\n  MUTATION_GRANT_PERMISSION, {\n    getPayload: (result) => result.grantPermission,\n    validates: {\n      permissionName: [\n        isRequired(\"Permission name is required\")\n      ]\n    }\n  }\n)","import { MaterialCommunityIcons } from '@expo/vector-icons';\nimport { useIsFocused, useNavigation, useRoute } from '@react-navigation/core';\nimport { useMutation } from '@apollo/client';\nimport * as React from 'react';\nimport { Platform, RefreshControl, StyleSheet, Text } from 'react-native';\nimport { Chip, DataTable, Divider, IconButton, ProgressBar } from 'react-native-paper';\nimport format from \"date-fns/format\";\nimport gql from 'graphql-tag';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { IconProps } from 'react-native-paper/lib/typescript/components/MaterialCommunityIcon';\nimport * as ImagePicker from 'expo-image-picker';\n\n\nimport { successColor, warningColor } from \"../../../constants/Colors\";\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Mutation, Permission, Query } from '../../../graphql/schema.d';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport DropzoneUserDialog from '../../../components/dialogs/DropzoneUserDialog';\nimport CreditsSheet from '../../../components/dialogs/CreditsDialog/Credits';\nimport RigDialog from '../../../components/dialogs/Rig';\nimport EditUserSheet from '../../../components/dialogs/User';\n\nimport TableCard from \"./UserInfo/TableCard\";\nimport Header from \"./UserInfo/Header\";\nimport InfoGrid from './UserInfo/InfoGrid';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport useDropzoneUser from '../../../graphql/hooks/useDropzoneUser';\nimport Badge from '../../../components/Badge';\nimport useRestriction from '../../../hooks/useRestriction';\nimport useMutationRevokePermission from '../../../graphql/hooks/useMutationRevokePermission';\nimport useMutationGrantPermission from '../../../graphql/hooks/useMutationGrantPermission';\n\n\nconst MUTATION_UPDATE_IMAGE = gql`\n  mutation UpdateUserImage(\n    $id: Int,\n    $image: String\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        image: $image,\n      }\n    }) {\n      user {\n        id\n        name\n        exitWeight\n        email\n        image\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default function ProfileScreen() {\n  const state = useAppSelector(state => state.global);\n  const forms = useAppSelector(state => state.forms);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n  const { currentUser } = useCurrentDropzone();\n  const route = useRoute<{ key: string, name: string, params: { userId: string }}>();\n  const isSelf = currentUser?.id === route.params.userId;\n\n  const { dropzoneUser, loading, refetch } = useDropzoneUser(Number(route.params.userId));\n  const canGrantPermission = useRestriction(Permission.GrantPermission);\n\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused])\n\n  const [mutationUpdateUser, mutation] = useMutation<Mutation>(MUTATION_UPDATE_IMAGE);\n  const revokePermission = useMutationRevokePermission({\n    onSuccess: (payload) => {\n      refetch();\n      dispatch(actions.notifications.showSnackbar({ message: \"Permission revoked\" }))\n    },\n    onError: (error) => {\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" }))\n    },\n  });\n  const grantPermission = useMutationGrantPermission({\n    onSuccess: (payload) => {\n      refetch();\n      dispatch(actions.notifications.showSnackbar({ message: \"Permission granted\" }));\n    },\n    onError: (error) => {\n      dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" }))\n    },\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (Platform.OS !== 'web') {\n        const { status } = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (status !== 'granted') {\n          alert('Sorry, we need camera roll permissions to make this work!');\n        }\n      }\n    })();\n  }, []);\n\n  \n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await ImagePicker.launchImageLibraryAsync({\n          mediaTypes: ImagePicker.MediaTypeOptions.Images,\n          allowsEditing: true,\n          aspect: [4, 3],\n          quality: 0.1,\n          base64: true,\n        }) as { base64: string };\n    \n\n        // Upload image\n        await mutationUpdateUser({\n          variables: {\n            id: Number(dropzoneUser?.user?.id),\n            image: `data:image/jpeg;base64,${result.base64}`,\n          }\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  const badges = dropzoneUser?.permissions?.filter((name) => /^actAs/.test(name)) || [];\n\n  const canAddTransaction = useRestriction(Permission.CreateUserTransaction);\n  const canUpdateUser = useRestriction(Permission.UpdateUser);\n  const shouldShowBadge = (permission: Permission) => canGrantPermission || badges.includes(permission);\n\n  return (\n    <>\n    {loading && <ProgressBar color={state.theme.colors.accent} indeterminate visible={loading} />}\n    <ScrollableScreen contentContainerStyle={styles.content} refreshControl={<RefreshControl refreshing={loading} onRefresh={() => refetch()} />}>\n      <ScrollView horizontal style={{ width: \"100%\" }} contentContainerStyle={{ flexGrow: 1, padding: 8, justifyContent: \"space-evenly\", backgroundColor: state.theme.colors.primary }}>\n        {\n          [\n            Permission.ActAsPilot,\n            Permission.ActAsDzso,\n            Permission.ActAsGca,\n            Permission.ActAsRigInspector,\n            Permission.ActAsLoadMaster,\n          ].map((permission) =>\n            !shouldShowBadge(permission)\n              ? null\n              : <Badge\n                  type={permission as any}\n                  selected={badges.includes(permission)}\n                  onPress={() => !canGrantPermission ? null :\n                    badges.includes(permission) \n                      ? revokePermission.mutate({ permissionName: permission, dropzoneUserId: Number(dropzoneUser.id) })\n                      : grantPermission.mutate({ permissionName: permission, dropzoneUserId: Number(dropzoneUser.id) })\n                  }\n                />\n          )\n        }\n      </ScrollView>\n      <Header\n        dropzoneUser={dropzoneUser!}\n        canEdit={isSelf}\n        onEdit={() => {\n          if (dropzoneUser?.user) {\n            dispatch(actions.forms.user.setOpen(dropzoneUser?.user));\n          }\n        }}\n        onPressAvatar={onPickImage}\n      >\n       \n\n        <ScrollView horizontal style={{ marginVertical: 8 }}>\n          <Chip\n            // @ts-ignore\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"email\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n          >\n            {dropzoneUser?.user?.email  || \"-\"}\n          </Chip>\n\n          <Chip\n            // @ts-ignore\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"phone\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n          >\n            {dropzoneUser?.user?.phone  || \"-\"}\n          </Chip>\n\n          <Chip\n            // @ts-ignore\n            icon={({ size }: IconProps) =>\n              <MaterialCommunityIcons name=\"card-account-details-star-outline\" size={size} color=\"#FFFFFF\" />\n            }\n            mode=\"outlined\"\n            style={styles.chip}\n            textStyle={styles.chipTitle}\n            onPress={() => {\n              if (canUpdateUser) {\n                dispatch(actions.forms.dropzoneUser.setOpen(dropzoneUser!));\n              }\n            }}\n          >\n            {!dropzoneUser?.expiresAt\n                  ? \"Not a member\"\n                  : format((dropzoneUser?.expiresAt || 0) * 1000, \"yyyy/MM/dd\")}\n          </Chip>\n        </ScrollView>\n        <Divider style={styles.divider} />\n        <InfoGrid\n          items={[\n            {\n              title: \"Funds\",\n              value: `$${dropzoneUser?.credits || 0}`,\n              onPress: () => {\n                if (dropzoneUser) {\n                  dispatch(actions.forms.credits.setOpen(dropzoneUser));\n                }\n              }\n            },\n            { title: \"License\", value: `${dropzoneUser?.user?.license?.name || \"-\"}`},\n            { title: \"Exit weight\", value: Math.round(Number(dropzoneUser?.user?.exitWeight)).toString() || \"-\" }\n          ]}\n        />\n        <Divider style={[styles.divider, { backgroundColor: \"white\" }]} />\n      </Header>\n      \n      <TableCard title=\"Rigs\" buttonIcon=\"plus\" onPressButton={() => dispatch(actions.forms.rig.setOpen(true))}>\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>\n              Container\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Repack due\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Canopy size\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              Inspected\n            </DataTable.Title>\n          </DataTable.Header>\n\n          {\n            dropzoneUser?.user?.rigs?.map((rig) =>\n              <DataTable.Row\n                key={`rig-${rig!.id}`}\n                onPress={() => {\n                  dispatch(actions.forms.rig.setOpen(rig));\n                }}\n                onLongPress={() =>\n                  navigation.navigate(\"RigInspectionScreen\", {\n                    dropzoneUserId: Number(route.params.userId),\n                    rig\n                  })\n                }\n                pointerEvents=\"none\"\n              >\n                <DataTable.Cell>\n                  {[rig?.make, rig?.model, `#${rig?.serial}`].join(\" \")}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {rig?.repackExpiresAt ? format(rig.repackExpiresAt * 1000, \"yyyy/MM/dd\") : \"-\"}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {`${rig?.canopySize}`}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  <IconButton\n                    icon={\n                      dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                      ? \"eye-check\"\n                      : \"eye-minus\"\n                    }\n                    color={\n                      dropzoneUser?.rigInspections?.some((insp) => insp.rig?.id === rig.id && insp.isOk)\n                      ? successColor\n                      : warningColor\n                    }\n                    onPress={() =>\n                      navigation.navigate(\"RigInspectionScreen\", {\n                        dropzoneUserId: Number(route.params.userId),\n                        rig\n                      })\n                    }\n                  />\n                </DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n        </DataTable>\n      </TableCard>\n        \n      <TableCard\n        title=\"Transactions\"\n        {\n          ...canAddTransaction ? {\n            buttonIcon: \"plus\",\n            onPressButton: () => {\n              if (dropzoneUser) {\n                dispatch(actions.forms.credits.setOpen(dropzoneUser!));\n              }\n            }\n          } : {}\n        }\n      >\n        <DataTable>\n          <DataTable.Header>\n            <DataTable.Title>Time</DataTable.Title>\n            <DataTable.Title>Type</DataTable.Title>\n            <DataTable.Title>Message</DataTable.Title>\n            <DataTable.Title numeric>Amount</DataTable.Title>\n          </DataTable.Header>\n          {\n            dropzoneUser?.transactions?.edges?.map((edge) => (\n              <DataTable.Row key={`transaction-${edge?.node?.id}`}>\n                <DataTable.Cell>\n                  <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{!edge?.node?.createdAt ? null : format(edge?.node?.createdAt * 1000, \"yyyy/MM/dd hh:mm\")}</Text>\n                </DataTable.Cell>\n                <DataTable.Cell>\n                  <Text style={{ fontSize: 12, fontStyle: \"italic\", color: \"#999999\" }}>{edge?.node?.status}</Text>\n                </DataTable.Cell>\n                <DataTable.Cell>\n                  {edge?.node?.message}\n                </DataTable.Cell>\n                <DataTable.Cell numeric>\n                  {edge?.node?.amount}\n                </DataTable.Cell>\n              </DataTable.Row>\n            ))\n          }\n        </DataTable>\n      </TableCard>\n    </ScrollableScreen>\n        \n    <RigDialog\n      onClose={() => dispatch(actions.forms.rig.setOpen(false))}\n      onSuccess={() => dispatch(actions.forms.rig.setOpen(false))}\n      open={forms.rig.open}\n      userId={Number(dropzoneUser?.user?.id)}\n    />\n    \n    <DropzoneUserDialog\n      onClose={() => dispatch(actions.forms.dropzoneUser.setOpen(false))}\n      onSuccess={(user) => {\n        dispatch(actions.forms.dropzoneUser.setOpen(false));\n        if (currentUser?.id === dropzoneUser?.id) {\n          dispatch(actions.global.setUser(user.user));\n        }\n      }}\n      open={forms.dropzoneUser.open}\n    />\n\n    <CreditsSheet\n      onClose={() => dispatch(actions.forms.credits.setOpen(false))}\n      onSuccess={() => dispatch(actions.forms.credits.setOpen(false))}\n      open={forms.credits.open}\n      dropzoneUser={dropzoneUser || undefined}\n    />\n\n    <EditUserSheet\n      onClose={() => dispatch(actions.forms.user.setOpen(false))} \n      onSuccess={() => dispatch(actions.forms.user.setOpen(false))}\n      open={forms.user.open}\n    />\n  </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: {\n    flexGrow: 1,\n    paddingBottom: 56,\n    paddingHorizontal: 0,\n  },\n  divider: {\n    height: 1,\n    width: '100%',\n  },\n  chip: {\n    margin: 1,\n    backgroundColor: \"transparent\",\n    minHeight: 23,\n    borderWidth: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    display: \"flex\",\n  },\n  chipTitle: {\n    color: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 12,\n    lineHeight: 24,\n    textAlignVertical: \"center\"\n  }\n});\n"],"sourceRoot":""}