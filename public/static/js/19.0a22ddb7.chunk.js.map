{"version":3,"sources":["components/notifications/index.ts","components/forms/plane/PlaneForm.tsx","screens/authenticated/planes/UpdatePlaneScreen.tsx"],"names":["actions","slice","Notifications","DropzoneForm","state","useAppSelector","forms","plane","dispatch","useAppDispatch","style","styles","field","mode","label","error","fields","name","value","onChangeText","newValue","setField","type","registration","hours","toString","placeholder","Number","minSlots","keyboardType","maxSlots","StyleSheet","create","width","flex","marginBottom","MUTATION_CREATE_PLANE","gql","UpdatePlaneScreen","global","navigation","useNavigation","useRoute","params","React","setOpen","id","useMutation","mutationUpdatePlane","data","validate","hasError","length","setFieldError","JSON","stringify","onSave","a","async","nextMaintenanceHours","variables","original","result","updatePlane","snackbar","showSnackbar","message","variant","goBack","contentContainerStyle","content","size","color","alignSelf","disabled","loading","onPress","paddingHorizontal","title","fontSize","fontWeight","separator","marginVertical","height"],"mappings":"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","file":"static/js/19.0a22ddb7.chunk.js","sourcesContent":["import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { TextInput, HelperText } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nexport default function DropzoneForm() {\n  const state = useAppSelector(state => state.forms.plane);\n  const dispatch = useAppDispatch();\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        value={state.fields.name.value}\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Registration\"\n        error={!!state.fields.registration.error}\n        value={state.fields.registration.value}\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"registration\", newValue]))}\n      />\n      <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n        { state.fields.registration.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"hours\"\n        error={!!state.fields.hours.error}\n        value={state.fields.hours?.value?.toString()}\n        placeholder=\"Optional\"\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"hours\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.hours.error ? \"error\" : \"info\"}>\n        { state.fields.hours.error || \"\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Min slots\"\n        error={!!state.fields.minSlots.error}\n        value={state.fields.minSlots.value?.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"minSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.minSlots.error ? \"error\" : \"info\"}>\n        { state.fields.minSlots.error || \"Minimum tickets required to send it\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Max slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value.toString()}\n        keyboardType=\"number-pad\"\n        onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"Maximum amount of jumpers who can be manifested on one load\" }\n      </HelperText>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    width: \"100%\",\n    flex: 1,\n  },\n  field: {\n    width: \"100%\",\n    marginBottom: 8,\n  }\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { gql, useMutation } from \"@apollo/client\";\nimport { useNavigation, useRoute } from '@react-navigation/core';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\nimport { actions as snackbar } from \"../../../components/notifications\";\n\nimport { Mutation, Plane } from '../../../graphql/schema';\nimport PlaneForm from '../../../components/forms/plane/PlaneForm';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function UpdatePlaneScreen() {\n  const state = useAppSelector(state => state.forms.plane);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const navigation = useNavigation();\n  const route = useRoute<{ key: string, name: string, params: { plane: Plane }}>();\n  const plane = route.params!.plane;\n\n  React.useEffect(() => {\n    dispatch(actions.forms.plane.setOpen(plane));\n  }, [plane?.id]);\n\n  const [mutationUpdatePlane, data] = useMutation<Mutation>(MUTATION_CREATE_PLANE);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n    if (state.fields.name.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.plane.setFieldError([\"name\", \"Name is too short\"])\n      );\n    }\n\n    if (state.fields.registration.value.length < 3) {\n      hasError = true;\n      dispatch(\n        actions.forms.plane.setFieldError([\"registration\", \"Registration is too short\"])\n      );\n    }\n\n    if (!state.fields.maxSlots.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.plane.setFieldError([\"maxSlots\", \"Max slots must be specified\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, registration, maxSlots, minSlots, hours, nextMaintenanceHours } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationUpdatePlane({\n          variables: {\n            id: Number(state.original!.id!),\n            name: name.value,\n            registration: registration.value,\n            minSlots: minSlots.value,\n            maxSlots: maxSlots.value,\n            hours: hours.value,\n            nextMaintenanceHours: nextMaintenanceHours.value,\n          }\n        });\n        \n        if (result.data?.updatePlane?.plane) {\n          const { plane } = result.data.updatePlane;\n          dispatch(\n            snackbar.showSnackbar({ message: `Saved plane ${plane.name}`, variant: \"success\" })\n          );\n          navigation.goBack();\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationUpdatePlane]);\n\n  return (\n    <ScrollableScreen contentContainerStyle={styles.content}>\n        <MaterialCommunityIcons name=\"airplane\" size={100} color=\"#999999\" style={{ alignSelf: \"center\" }} />\n        <PlaneForm />\n        <View style={styles.actions}>\n          <Button mode=\"contained\" disabled={data.loading} onPress={onSave} loading={data.loading}>\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    paddingHorizontal: 48,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  actions: {\n    width: \"100%\",\n    marginBottom: 16\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n"],"sourceRoot":""}