{"version":3,"sources":["components/forms/credits/slice.tsx","components/forms/dropzone/slice.tsx","components/forms/dropzone_user/slice.tsx","components/forms/plane/slice.tsx","components/forms/rig/slice.tsx","components/forms/rig_inspection/slice.tsx","components/forms/rig_inspection_template/slice.tsx","components/forms/manifest/slice.tsx","components/forms/manifest_group/slice.tsx","components/forms/ticket_type/slice.tsx","components/forms/user/slice.tsx","components/dialogs/UserWizard/slice.tsx","components/dialogs/DropzoneWizard/slice.tsx","components/forms/slice.ts","screens/authenticated/users/slice.ts","screens/unauthenticated/login/slice.ts","screens/authenticated/manifest/slice.ts","screens/unauthenticated/signup/slice.ts","screens/slice.ts","redux/store.ts","components/layout/ScrollableScreen.tsx","components/Themed.tsx","components/notifications/slice.ts","components/input/dropdown_select/FederationSelect.tsx","components/input/colorpicker/ColorPickerDialog.tsx","components/input/colorpicker/ColorPicker.tsx","components/input/colorpicker/index.ts","components/theme_preview/Phone.tsx","components/theme_preview/Web.tsx","graphql/hooks/useMutationUpdateUser.ts","redux/global.ts","hooks/useColorScheme.web.ts","assets/images/logo.png","components/forms/extra/slice.tsx","components/forms/load/slice.tsx","graphql/hooks/useCurrentDropzone.ts","components/input/chip_select/ChipSelect.tsx","components/NoResults.tsx","components/notifications/Notifications.tsx","components/input/date_picker/DatePicker.web.tsx","components/input/chip_select/LicenseChipSelect.tsx","hooks/usePalette.ts","components/forms/dropzone/DropzoneForm.tsx","components/permissions/PermissionListItem.tsx","redux/index.ts","graphql/Apollo.tsx","navigation/Routes.ts","screens/NotFoundScreen.tsx","navigation/SetupWarning.tsx","navigation/AppBar.tsx","navigation/tabs/manifest.tsx","navigation/tabs/notifications.tsx","navigation/tabs/profile.tsx","navigation/tabs/settings.tsx","navigation/tabs/users.tsx","navigation/Authenticated.tsx","screens/authenticated/dropzones/DropzonesScreen.tsx","graphql/hooks/useMutationCreateDropzone.ts","screens/authenticated/dropzones/CreateDropzoneScreen.tsx","navigation/LimboRoutes.tsx","screens/unauthenticated/login/LoginScreen.tsx","graphql/hooks/useMutationSignUp.tsx","screens/unauthenticated/signup/SignUpScreen.tsx","navigation/Unauthenticated.tsx","screens/unauthenticated/signup/ConfirmUserScreen.tsx","navigation/RootNavigator.tsx","components/wizard/Pagination.tsx","components/wizard/Wizard.tsx","components/wizard/WizardScreen.tsx","components/wizard/WizardCompleteStep.tsx","components/dialogs/UserWizard/steps/Federation.tsx","components/dialogs/UserWizard/steps/Rig.tsx","components/dialogs/UserWizard/steps/ReserveRepack.tsx","components/dialogs/UserWizard/steps/Wingloading.tsx","graphql/hooks/useMutationUpdateRig.tsx","graphql/hooks/useMutationCreateRig.ts","components/dialogs/UserWizard/UserWizardScreen.tsx","components/dialogs/DropzoneWizard/steps/Name.tsx","components/dialogs/DropzoneWizard/steps/Aircraft.tsx","components/dialogs/DropzoneWizard/steps/Theming.tsx","components/dialogs/DropzoneWizard/steps/Permissions.tsx","components/dialogs/DropzoneWizard/steps/TicketType.tsx","graphql/hooks/useMutationUpdateDropzone.ts","graphql/hooks/useMutationCreatePlane.tsx","graphql/hooks/useMutationUpdatePlane.tsx","graphql/hooks/useMutationCreateTicketType.ts","graphql/hooks/useMutationUpdateTicketType.ts","components/dialogs/DropzoneWizard/DropzoneWizard.tsx","App.tsx","hooks/useCachedResources.ts","graphql/createMutation.tsx","assets/fonts/SpaceMono-Regular.ttf","constants/Colors.ts","graphql/schema.d.ts","hooks/useRestriction.ts"],"names":["initialState","original","open","fields","amount","value","error","status","message","createSlice","name","reducers","setField","state","action","payload","field","setFieldError","setOpen","reset","federation","secondaryColor","primaryColor","banner","isCreditSystemEnabled","isPublic","key","typedKey","role","expiresAt","registration","minSlots","maxSlots","hours","nextMaintenanceHours","make","model","serial","repackExpiresAt","canopySize","rigType","ok","setOk","index","item","console","log","map","idx","setFields","JSON","parse","definition","err","jumpType","extras","load","rig","ticketType","dropzoneUser","exitWeight","passengerName","passengerExitWeight","users","setFromSlots","slot","id","Number","user","rigId","find","i","setDropzoneUsers","dzUser","availableRigs","cost","altitude","allowManifestingSelf","isTandem","email","phone","rigs","license","setFederation","complete","dropzone","undefined","extra","credits","plane","rigInspection","rigInspectionTemplate","manifest","manifestGroup","userWizard","dropzoneWizard","isSearchVisible","searchText","setSearchText","setSearchVisible","password","setEmail","setPassword","setEmailError","setPasswordError","selectedUsers","setSelected","passwordConfirmation","login","signup","initialStateGlobal","initialStateNotification","persistConfig","storage","Platform","OS","require","default","AsyncStorage","whitelist","screenReducers","Object","keys","screens","reduce","obj","reducer","formReducers","forms","screenActions","actions","global","globalSlice","notifications","notificationSlice","rootReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","React","props","ref","height","useWindowDimensions","theme","style","children","contentContainerStyle","rest","keyboardDismissMode","keyboardShouldPersistTaps","contentInsetAdjustmentBehavior","styles","container","backgroundColor","colors","surface","content","StyleSheet","create","flex","paddingHorizontal","alignItems","flexGrow","paddingBottom","useThemeColor","colorName","useColorScheme","colorFromProps","Colors","Text","lightColor","darkColor","otherProps","color","light","dark","View","queue","hideSnackbar","slice","showSnackbar","push","QUERY_FEDERATIONS","gql","FederationSelect","isMenuOpen","setMenuOpen","data","useQuery","federations","length","onSelect","stringify","Subheader","onDismiss","visible","anchor","onPress","mode","disabled","minWidth","Item","title","ColorPickerDialog","onChange","onClose","Portal","Dialog","Title","Content","padding","sliderComponent","SliderComponent","defaultColor","hideSliders","Actions","Button","current","getColor","display","width","marginBottom","subheader","paddingLeft","COLOR_PRESETS","justifyContent","flexDirection","card","marginVertical","fontSize","fontWeight","textAlign","colorBox","margin","ColorPicker","helperText","isCustomColor","includes","isDialogOpen","setDialogOpen","Card","flexWrap","TouchableRipple","Surface","borderWidth","borderColor","MaterialIcons","size","HelperText","type","label","marginTop","previewContainer","borderRadius","hairlineWidth","alignSelf","previewAppBar","position","top","borderTopRightRadius","borderTopLeftRadius","previewTabBar","bottom","borderBottomRightRadius","borderBottomLeftRadius","previewLoadCard","marginHorizontal","previewLoadCard2","previewLoadCard3","previewButton","right","PhonePreview","left","WebPreview","MUTATION_UPDATE_USER","createMutation","getPayload","result","updateUser","fieldErrorMap","exit_weight","CombinedDefaultTheme","PaperDefaultTheme","NavigationDefaultTheme","primary","CombinedDarkTheme","PaperDarkTheme","NavigationDarkTheme","currentUser","currentDropzone","currentDropzoneId","permissions","credentials","expoPushToken","isDarkMode","setCredentials","setUser","setExpoPushToken","setPermissions","setPrimaryColor","setAccentColor","accent","setDropzone","toggleDarkMode","logout","module","exports","ticketTypeIds","ticketTypes","gca","dispatchAt","isOpen","loadMaster","pilot","QUERY_DROPZONE","useCurrentDropzone","dropzoneId","pushToken","variables","earliestTimestamp","startOfDay","Date","getTime","fetchPolicy","mutationUpdateUser","useMutationUpdateUser","onSuccess","onError","userId","remoteToken","localToken","loading","called","mutate","ChipSelect","items","selected","isSelected","isDisabled","icon","renderItemLabel","onChangeSelected","autoSelectFirst","some","isEqual","xorBy","NoResults","subtitle","empty","fab","MyComponent","dispatch","palette","usePalette","notification","variantStyle","info","success","warning","testID","duration","variant","DatePicker","date","description","timestamp","format","Icon","selectedDays","onDayClick","QUERY_LICENSES","LicenseChipSelect","federationId","licenses","filter","Boolean","first","colorScheme","DropzoneForm","onPickImage","a","async","getDocumentAsync","multiple","uri","Cover","source","resizeMode","onChangeText","newValue","required","MUTATION_UPDATE_ROLE","PermissionListItem","permissionName","canChangePermissions","useRestriction","Permission","GrantPermission","useMutation","mutationUpdatePermission","onValueChange","roleId","enabled","optimisticResponse","updateRole","errors","httpLink","createHttpLink","Constants","url","Apollo","errorLink","graphQLErrors","networkError","operation","response","extensions","code","authLink","setContext","_","headers","accessToken","tokenType","client","ApolloClient","link","concat","cache","InMemoryCache","ApolloProvider","prefixes","Linking","config","confirm","path","params","account_confirmation_success","Authenticated","HomeScreen","LoadScreen","PackingScreen","ProfileScreen","SetupScreen","Limbo","DropzonesScreen","CreateDropzoneScreen","Unauthenticated","LoginScreen","SignUpScreen","NotFoundScreen","navigation","TouchableOpacity","replace","linkText","paddingVertical","Warning","Paragraph","SetupWarning","isRigSetUp","isExitWeightDefined","isMembershipInDate","isReserveInDate","isRigInspectionComplete","onSetupWizard","useNavigation","missing","join","QUERY_CURRENT_USER","AppBar","previous","scene","hideWarnings","contextMenuOpen","setContextMenuOpen","useLazyQuery","loadData","Appbar","Header","BackAction","goBack","descriptor","options","titleStyle","headerRight","tintColor","Chip","Menu","IconButton","Divider","isRigInspected","rigInspections","inspection","isRepackInDate","ManifestScreen","CreateLoadScreen","ManifestGroupScreen","ManifestGroupUserSelectScreen","Manifest","createStackNavigator","ManifestTab","globalState","Navigator","screenOptions","headerShown","header","cardStyle","Screen","component","NotificationsScreen","Profile","Notifications","UpdateUserScreen","ProfileTab","initialParams","SettingsScreen","TicketTypeSettingsScreen","CreatePlaneScreen","UpdatePlaneScreen","UpdateDropzoneScreen","PlanesScreen","RigInspectionTemplateScreen","DropzoneRigsScreen","DropzonePermissionScreen","DropzoneMasterLogScreen","CreateExtraScreen","UpdateExtraScreen","ExtrasScreen","Settings","SettingsTab","UsersScreen","SearchableAppBar","RigInspectionScreen","searchVisible","onSearch","text","BottomTab","createBottomTabNavigator","AuthenticatedTabBar","useTheme","canViewUsers","ReadUser","canUpdateDropzone","UpdateDropzone","canUpdatePlane","UpdatePlane","canUpdateTicketTypes","UpdateTicketType","canUpdateExtras","UpdateExtra","canUpdatePermissions","canUpdateDzRigs","UpdateDropzoneRig","canUpdateRigInspectionTemplate","UpdateFormTemplate","shouldShowSettings","initialRouteName","tabBarOptions","activeTintColor","inactiveBackgroundColor","activeBackgroundColor","inactiveTintColor","showLabel","tabBarIcon","focused","MaterialCommunityIcons","unmountOnBlur","NotificationTab","UsersTab","QUERY_DROPZONES","refetch","screen","SafeAreaView","FlatList","dropzones","edges","numColumns","refreshing","onRefresh","ListEmptyComponent","renderItem","Dimensions","get","node","shouldPushRoute","dzIcon","FAB","small","MUTATION_CREATE_DROPZONE","createDropzone","validates","isRequired","useMutationCreateDropzone","e","onFieldError","ScrollableScreen","separator","Stack","MUTATION_LOG_IN","mutationLogin","onLogin","emailRegex","RegExp","hasError","test","userLogin","authenticatable","Image","logo","KeyboardAvoidingView","behavior","TextInput","secureTextEntry","labelStyle","buttonLabel","button","textButtonLabel","textButton","navigate","paddingTop","maxWidth","MUTATION_USER_SIGNUP","userSignUp","isEmail","SignupScreen","useMutationSignUp","onSignUp","textContentType","passwordRules","licenseId","successColor","errorIcon","warningColor","ConfirmUserScreen","route","useRoute","RootNavigator","AuthenticatedRoutes","LimboRoutes","UnauthenticatedRoutes","WizardPagination","paginationIndex","icons","bridgeLength","pagination","Array","from","hasCustomIcon","defaultIcon","iconDone","bridge","bridgeDone","marginLeft","WizardContext","count","setIndex","Wizard","Provider","scrollToIndex","animated","showPagination","PaginationComponent","scrollEnabled","autoplay","onChangeIndex","prevIndex","wizardScreen","buttonBack","buttons","WizardScreen","onBack","backButtonLabel","nextButtonLabel","onNext","screenWidth","scrollRef","scrollTo","y","flatten","minHeight","WizardCompleteStep","FederationWizardSceen","RigWizardScreen","isOtherMake","setIsOtherMake","pointerEvents","ReserveRepackWizardScreen","time","cardTitle","cardValue","marginRight","slider","sliderControl","wingLoading","wingLoadingCardLeft","wingLoadingCardRight","WingloadingWizardScreen","rigForm","userForm","setCanopySize","ceil","toString","elevation","minimumValue","maximumValue","step","minimumTrackTintColor","maximumTrackTintColor","debounce","onSlidingComplete","MUTATION_UPDATE_RIG","updateRig","MUTATION_CREATE_RIG","createRig","modal","absoluteFillObject","paddingRight","UserWizardScreen","mutationUpdateRig","useMutationUpdateRig","mutationCreateRig","useMutationCreateRig","onFederationNext","onRigNext","onReserveRepackNext","onWingloadingNext","Modal","dismissable","Federation","Rig","ReserveRepack","Wingloading","NameAndFederationWizardSceen","AircraftWizardScreen","QUERY_DROPZONE_PERMISSIONS","PermissionWizardScreen","permission","dropzoneForm","queryRoles","roles","capitalize","paragraph","TicketTypeWizardScreen","altitudeMenuOpen","setAltitudeMenuOpen","price","setPrice","contentStyle","MUTATION_UPDATE_DROPZONE","updateDropzone","MUTATION_CREATE_PLANE","createPlane","MUTATION_UPDATE_PLANE","updatePlane","MUTATION_CREATE_TICKET_TYPE","createTicketType","MUTATION_UPDATE_TICKET_TYPE","updateTicketType","DropzoneWizardScreen","aircraft","ticket","mutationCreateDropzone","mutationUpdateDropzone","useMutationUpdateDropzone","mutationCreatePlane","useMutationCreatePlane","mutationUpdatePlane","useMutationUpdatePlane","mutationCreateTicketType","useMutationCreateTicketType","mutationUpdateTicketType","useMutationUpdateTicketType","onBasicInfoNext","onThemingNext","onAircraftNext","onTicketTypeNext","Name","Theming","Aircraft","TicketType","CreateSlot","CreateUserSlot","notificationListener","responseListener","onOutsideLink","intendedRoute","URI","isDevice","existingStatus","finalStatus","warn","token","importance","MAX","vibrationPattern","registerForPushNotificationsAsync","then","request","body","addEventListener","removeEventListener","fallback","ProgressBar","indeterminate","NavigationContainer","linking","LinkingConfiguration","StatusBar","DropzoneWizard","App","isLoadingComplete","setLoadingComplete","Font","Inter_400Regular","Inter_500Medium","Inter_700Bold","fontsLoaded","SplashScreen","Ionicons","font","useCachedResources","ActivityIndicator","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","pattern","callback","mutation","opts","hasErrors","forEach","x","variable","validator","validate","fieldErrors","fieldName","background","tint","tabIconDefault","tabIconSelected","QUERY_PERMISSIONS"],"mappings":"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","file":"static/js/app.0468da07.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser, Maybe, Transaction } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Transaction,\n  | \"amount\"\n  | \"status\"\n  | \"message\"\n>;\n\ninterface IDropzoneEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Transaction[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    amount: {\n      value: null,\n      error: null,\n    },\n    status: {\n      value: \"deposit\",\n      error: null,\n    },\n    message: {\n      value: \"\",\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/credits',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && \"error\" in (state.fields[field as T])) {\n        state.fields[field as T].error = error;\n      }\n    },\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<DropzoneUser | boolean>) => {\n      \n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone, Federation } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  Dropzone,\n  | \"federation\"\n  | \"name\"\n  | \"secondaryColor\"\n  | \"primaryColor\"\n  | \"banner\"\n  | \"isPublic\"\n  | \"isCreditSystemEnabled\"\n>;\n\ninterface IDropzoneEditState {\n  original: Dropzone | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Dropzone[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    federation: {\n      value: null,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    secondaryColor: {\n      value: \"\",\n      error: null,\n    },\n    primaryColor: {\n      value: \"\",\n      error: null,\n    },\n    banner: {\n      value: \"\",\n      error: null\n    },\n    isCreditSystemEnabled: {\n      value: false,\n      error: null,\n    },\n    isPublic: {\n      value: false,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzone',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[T, IDropzoneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneEditState[\"fields\"]>(state: IDropzoneEditState, action: PayloadAction<[string, string]>) => {\n      const [field, error] = action.payload;\n\n      if (field in state.fields && \"error\" in (state.fields[field as T])) {\n        state.fields[field as T].error = error;\n      }\n    },\n\n    setOpen: (state: IDropzoneEditState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  DropzoneUser,\n  | \"role\"\n  | \"expiresAt\"\n>;\n\ninterface IDropzoneUserEditState {\n  original: DropzoneUser | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: DropzoneUser[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IDropzoneUserEditState = {\n  original: null,\n  open: false,\n  fields: {\n    role: {\n      value: null,\n      error: null,\n    },\n    expiresAt: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/dropzoneUser',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IDropzoneUserEditState[\"fields\"]>(state: IDropzoneUserEditState, action: PayloadAction<[T, IDropzoneUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneUserEditState, action: PayloadAction<boolean | DropzoneUser>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IDropzoneUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Plane } from \"../../../graphql/schema.d\";\n\ninterface IPlaneEditState {\n  original: Plane | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    registration: {\n      value: string;\n      error: string | null;\n    },\n    minSlots: {\n      value: number;\n      error: string | null;\n    },\n    maxSlots: {\n      value: number;\n      error: string | null;\n    },\n    hours: {\n      value: number | null;\n      error: string | null;\n    },\n    nextMaintenanceHours: {\n      value: number | null;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IPlaneEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    registration: {\n      value: \"\",\n      error: null\n    },\n    minSlots: {\n      value: 0,\n      error: null\n    },\n    maxSlots: {\n      value: 4,\n      error: null\n    },\n    hours: {\n      value: null,\n      error: null\n    },\n    nextMaintenanceHours: {\n      value: null,\n      error: null\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'Plane',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IPlaneEditState[\"fields\"]>(state: IPlaneEditState, action: PayloadAction<[T, IPlaneEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IPlaneEditState, action: PayloadAction<boolean | Plane>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.hours.value = action.payload.hours!;\n        state.fields.minSlots.value = action.payload.minSlots!;\n        state.fields.maxSlots.value = action.payload.maxSlots!;\n        state.fields.name.value = action.payload.name!;\n        state.fields.registration.value = action.payload.registration!;\n        state.fields.nextMaintenanceHours.value = action.payload.nextMaintenanceHours!;\n      }\n    },\n    \n    reset: (state: IPlaneEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Rig,\n  | \"make\"\n  | \"model\"\n  | \"serial\"\n  | \"canopySize\"\n  | \"repackExpiresAt\"\n  | \"rigType\"\n>;\n\ninterface IRigEditState {\n  original: Rig | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Rig[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IRigEditState = {\n  original: null,\n  open: false,\n  fields: {\n    make: {\n      value: \"\",\n      error: null,\n    },\n    model: {\n      value: \"\",\n      error: null,\n    },\n    serial: {\n      value: \"\",\n      error: null,\n    },\n    repackExpiresAt: {\n      value: null,\n      error: null,\n    },\n    canopySize: {\n      value: null,\n      error: null,\n    },\n    rigType: {\n      value: \"sport\",\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n    setField: <T extends keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IRigEditState[\"fields\"]>(state: IRigEditState, action: PayloadAction<[T, IRigEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IRigEditState, action: PayloadAction<boolean | Rig>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IRigEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { FieldItem } from \"../rig_inspection_template/slice\";\n\n\n\ninterface IRigInspectionEditState {\n  fields: FieldItem[],\n  open: boolean;\n  ok: boolean;\n}\n\nexport const initialState: IRigInspectionEditState = {\n  fields: [],\n  open: false,\n  ok: false\n};\n\n\nexport default createSlice({\n  name: 'forms/rig',\n  initialState,\n  reducers: {\n\n    setOk: (state: IRigInspectionEditState, action: PayloadAction<boolean>) => {\n      state.ok = action.payload;\n    },\n    setField: (state: IRigInspectionEditState, action: PayloadAction<[number, FieldItem]>) => {\n      const [index, item] = action.payload;\n\n      console.log({ item, index, fields: state.fields });\n      state.fields = state.fields.map((field, idx) => idx === index ? item : field);\n    },\n\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<string>) => {\n      try {\n        state.fields = JSON.parse(action.payload)\n      } catch (error) {\n        console.error(\"Failed to read rig inspection template\", error.message, action.payload);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.ok = initialState.ok;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RigInspection, FormTemplate } from \"../../../graphql/schema.d\";\n\n\nexport interface FieldItem {\n  label: string;\n  description?: string;\n  isRequired?: boolean;\n  valueType: \"integer\" | \"boolean\" | \"date\" | \"string\";\n  value?: number | boolean | string;\n}\n\ninterface IRigInspectionEditState {\n  original: FormTemplate | null;\n  fields: FieldItem[],\n}\n\nexport const initialState: IRigInspectionEditState = {\n  original: null,\n  fields: []\n};\n\n\nexport default createSlice({\n  name: 'forms/rigInspection',\n  initialState,\n  reducers: {\n    setFields: (state: IRigInspectionEditState, action: PayloadAction<FieldItem[]>) => {\n      state.fields = action.payload;\n    },\n\n    setOpen: (state: IRigInspectionEditState, action: PayloadAction<FormTemplate>) => {\n      state.original = action.payload;\n\n      try {\n        state.fields = JSON.parse(action.payload.definition!);\n      } catch(err) {\n        console.log(\"Invalid json: \", action.payload.definition);\n      }\n    },\n    \n    reset: (state: IRigInspectionEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Slot } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"rig\"\n  | \"dropzoneUser\"\n  | \"exitWeight\"\n  | \"extras\"\n  | \"passengerExitWeight\"\n  | \"passengerName\"\n>\n\ninterface ISlotEditState {\n  original: Slot | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Fields[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    dropzoneUser: {\n      value: null,\n      error: null,\n    },\n    exitWeight: {\n      value: null,\n      error: null,\n    },\n    passengerName: {\n      value: null,\n      error: null,\n    },\n    passengerExitWeight: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifest',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | Slot>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { pick, pickBy } from \"lodash\";\nimport { SlotUser, Slot, DropzoneUser } from \"../../../graphql/schema.d\";\n\n\ninterface IFields extends Pick<\n  Slot,\n  | \"jumpType\"\n  | \"load\"\n  | \"ticketType\"\n  | \"extras\"\n> {\n  users: SlotUser[];\n}\n\ninterface ISlotEditState {\n  original: IFields | null;\n  open: boolean;\n  fields: {\n    [K in keyof IFields] - ?: {\n      value: IFields[K] | null;\n      error: string | null;\n    }\n  },\n}\n\nexport const initialState: ISlotEditState = {\n  original: null,\n  open: false,\n  fields: {\n    jumpType: {\n      value: null,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n    load: {\n      value: null,\n      error: null,\n    },\n    ticketType: {\n      value: null,\n      error: null,\n    },\n    users: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/manifestGroup',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      \n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISlotEditState[\"fields\"]>(state: ISlotEditState, action: PayloadAction<[T, ISlotEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setFromSlots: (state: ISlotEditState, action: PayloadAction<Slot[]>) => {\n      state.fields.users.value = action.payload.map((slot) => ({\n          id: Number(slot.user?.id),\n          rigId: Number(slot.rig?.id),\n          exitWeight: Number(slot.exitWeight),\n        })\n      ) as SlotUser[];\n\n      state.fields.jumpType.value = action.payload.find(i => i)?.jumpType;\n      state.fields.load.value = action.payload.find(i => i)?.load!;\n      state.fields.extras.value = action.payload.find(i => i)?.extras;\n    },\n\n    setDropzoneUsers: (state: ISlotEditState, action: PayloadAction<DropzoneUser[]>) => {\n      state.fields.users.value = action.payload.map<SlotUser>((dzUser) => ({\n          id: Number(dzUser.user.id),\n          rigId: Number(dzUser?.availableRigs?.find(({ id }) => id)?.id),\n          exitWeight: Number(dzUser?.user.exitWeight),\n        })\n      ) as SlotUser[];\n    },\n\n    setOpen: (state: ISlotEditState, action: PayloadAction<boolean | IFields>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ISlotEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { TicketType } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  TicketType,\n  | \"name\"\n  | \"cost\"\n  | \"isTandem\"\n  | \"allowManifestingSelf\"\n  | \"altitude\"\n  | \"extras\"\n>;\n\ninterface ITicketTypeEditState {\n  original: TicketType | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: TicketType[K] | null;\n      error: string | null;\n    }\n  }\n}\n\n\nexport const initialState: ITicketTypeEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    altitude: {\n      value: 14000,\n      error: null,\n    },\n    allowManifestingSelf: {\n      value: false,\n      error: null,\n    },\n    isTandem: {\n      value: false,\n      error: null,\n    },\n    extras: {\n      value: [],\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/ticketType',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ITicketTypeEditState[\"fields\"]>(state: ITicketTypeEditState, action: PayloadAction<[T, ITicketTypeEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ITicketTypeEditState, action: PayloadAction<boolean | TicketType>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.altitude.value = action.payload.altitude!;\n        state.fields.cost.value = action.payload.cost!;\n        state.fields.allowManifestingSelf.value = action.payload.allowManifestingSelf!;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: ITicketTypeEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Federation, User } from \"../../../graphql/schema.d\";\n\ntype Fields = Pick<\n  User,\n  | \"exitWeight\"\n  | \"rigs\"\n  | \"name\"\n  | \"phone\"\n  | \"email\"\n  | \"license\"\n>;\n\ninterface IUserEditState {\n  original: User | null;\n  open: boolean;\n  federation: {\n    value: Federation | null,\n    error: null,\n  },\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: User[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: IUserEditState = {\n  original: null,\n  open: false,\n  federation: {\n    value: null,\n    error: null,\n  },\n  fields: {\n    exitWeight: {\n      value: \"\",\n      error: null,\n    },\n    email: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    name: {\n      value: null,\n      error: null,\n    },\n    rigs: {\n      value: [],\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/user',\n  initialState,\n  reducers: {\n    setFederation: (state: IUserEditState, action: PayloadAction<Federation>) => {\n      state.federation.value = action.payload;\n    },\n    setField: <T extends keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof IUserEditState[\"fields\"]>(state: IUserEditState, action: PayloadAction<[T, IUserEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserEditState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.federation.value = action.payload.license?.federation!;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: IUserEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Rig, User } from \"../../../graphql/schema.d\";\n\ninterface IUserWizardState {\n  open: boolean;\n  fields: {\n    user: {\n      value: User;\n      error: string | null;\n    },\n    rig: {\n      value: Rig;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IUserWizardState = {\n  open: false,\n  fields: {\n    user: {\n      value: null,\n      error: null,\n    },\n    rig: {\n      value: null,\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/userWizard',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IUserWizardState[\"fields\"]>(state: IUserWizardState, action: PayloadAction<[T, IUserWizardState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n    },\n    setFieldError: <T extends  keyof IUserWizardState[\"fields\"]>(state: IUserWizardState, action: PayloadAction<[T, IUserWizardState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IUserWizardState, action: PayloadAction<boolean | User>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.fields = initialState.fields;\n      } else {\n        state.fields.user.value = action.payload;\n        state.open = true;\n      }\n    },\n    \n    reset: (state: IUserWizardState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Dropzone } from \"../../../graphql/schema.d\";\ninterface IDropzoneWizardState {\n  open: boolean;\n  complete: boolean;\n  fields: {\n    dropzone: {\n      value: Dropzone;\n      error: string | null;\n    },\n  }\n}\n\nexport const initialState: IDropzoneWizardState = {\n  open: false,\n  complete: false,\n  fields: {\n    dropzone: {\n      value: null,\n      error: null,\n    },\n  }\n};\n\nexport default createSlice({\n  name: 'forms/dropzoneWizard',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IDropzoneWizardState[\"fields\"]>(state: IDropzoneWizardState, action: PayloadAction<[T, IDropzoneWizardState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n    },\n    setFieldError: <T extends  keyof IDropzoneWizardState[\"fields\"]>(state: IDropzoneWizardState, action: PayloadAction<[T, IDropzoneWizardState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IDropzoneWizardState, action: PayloadAction<boolean | Dropzone>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.fields = initialState.fields;\n      } else {\n        state.fields.dropzone.value = action.payload;\n        state.open = true;\n      }\n    },\n\n    complete: (state: IDropzoneWizardState, action: PayloadAction<boolean | undefined>) => {\n      state.complete = action.payload !== undefined ? action.payload : true;\n    },\n    \n    reset: (state: IDropzoneWizardState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n\n","import * as credits from \"./credits/slice\";\nimport * as dropzone from \"./dropzone/slice\";\nimport * as dropzoneUser from \"./dropzone_user/slice\";\nimport * as extra from \"./extra/slice\";\nimport * as load from \"./load/slice\";\nimport * as plane from \"./plane/slice\";\nimport * as rig from \"./rig/slice\";\nimport * as rigInspection from \"./rig_inspection/slice\";\nimport * as rigInspectionTemplate from \"./rig_inspection_template/slice\";\nimport * as manifest from \"./manifest/slice\";\nimport * as manifestGroup from \"./manifest_group/slice\";\nimport * as ticketType from \"./ticket_type/slice\";\nimport * as user from \"./user/slice\";\nimport * as userWizard from \"../dialogs/UserWizard/slice\";\nimport * as dropzoneWizard from \"../dialogs/DropzoneWizard/slice\";\n\nexport const initialState = {\n  credits: credits.initialState,\n  dropzone: dropzone.initialState,\n  dropzoneUser: dropzoneUser.initialState,\n  extra: extra.initialState,\n  load: load.initialState,\n  plane: plane.initialState,\n  rig: rig.initialState,\n  rigInspection: rigInspection.initialState,\n  rigInspectionTemplate: rigInspectionTemplate.initialState,\n  manifest: manifest.initialState,\n  manifestGroup: manifestGroup.initialState,\n  ticketType: ticketType.initialState,\n  user: user.initialState,\n  userWizard: userWizard.initialState,\n  dropzoneWizard: dropzoneWizard.initialState,\n}\nexport const reducers = {\n  credits: credits.default,\n  dropzone: dropzone.default,\n  dropzoneUser: dropzoneUser.default,\n  extra: extra.default,\n  load: load.default,\n  plane: plane.default,\n  rig: rig.default,\n  rigInspection: rigInspection.default,\n  rigInspectionTemplate: rigInspectionTemplate.default,\n  manifest: manifest.default,\n  manifestGroup: manifestGroup.default,\n  ticketType: ticketType.default,\n  user: user.default,\n  userWizard: userWizard.default,\n  dropzoneWizard: dropzoneWizard.default,\n}","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IUserScreenState {\n  isSearchVisible: boolean;\n  searchText: string;\n}\n\nexport const initialState: IUserScreenState = {\n  isSearchVisible: false,\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'screens/user',\n  initialState,\n  reducers: {\n    setSearchText: (state: IUserScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IUserScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IUserScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\n\ninterface ILoginScreenState {\n  fields: {\n    email: {\n      value: string,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    }\n  }\n} as ILoginScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setEmail: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.value = action.payload;\n    },\n    setPassword: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.value = action.payload;\n    },\n    setEmailError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.email.error = action.payload;\n    },\n    setPasswordError: (state: ILoginScreenState, action: PayloadAction<string>) => {\n      state.fields.password.error = action.payload;\n    },\n    reset: (state: ILoginScreenState) => {\n      state.fields = initialState.fields;\n    }\n  }\n});\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\n\ninterface IManifestScreenState {\n  isSearchVisible: boolean;\n  selectedUsers: DropzoneUser[]\n  searchText: string;\n}\n\nexport const initialState: IManifestScreenState = {\n  isSearchVisible: false,\n  selectedUsers: [],\n  searchText: \"\",\n};\n\n\nexport default createSlice({\n  name: 'manifestScreen',\n  initialState,\n  reducers: {\n    setSelected: (state: IManifestScreenState, action: PayloadAction<DropzoneUser[]>) => {\n      state.selectedUsers = action.payload;\n    },\n    setSearchText: (state: IManifestScreenState, action: PayloadAction<string>) => {\n      state.searchText = action.payload;\n    },\n\n    setSearchVisible: (state: IManifestScreenState, action: PayloadAction<boolean>) => {\n      state.isSearchVisible = action.payload;\n    },\n    \n    reset: (state: IManifestScreenState) => {\n      state.isSearchVisible = initialState.isSearchVisible;\n      state.searchText = initialState.searchText;\n    },\n  }\n});\n\n\n","import { PayloadAction, createSlice } from \"@reduxjs/toolkit\";\nimport { Federation, License } from \"../../../graphql/schema.d\";\n\ninterface ISignUpScreenState {\n  federation?: Federation | null,\n  fields: {\n    name: {\n      value: string,\n      error: string | null,\n    },\n    phone: {\n      value: string,\n      error: string | null,\n    },\n    email: {\n      value: string,\n      error: string | null,\n    },\n    exitWeight: {\n      value: number,\n      error: string | null,\n    },\n    password: {\n      value: string,\n      error: string | null,\n    },\n    passwordConfirmation: {\n      value: string,\n      error: string | null,\n    },\n    license: {\n      value: License | null,\n      error: string | null,\n    },\n  }\n}\n\nexport const initialState = {\n  federation: null,\n  fields: {\n    email: {\n      value: \"\",\n      error: null,\n    },\n    password: {\n      value: \"\",\n      error: null,\n    },\n    passwordConfirmation: {\n      value: \"\",\n      error: null,\n    },\n    exitWeight: {\n      value: 50,\n      error: null,\n    },\n    name: {\n      value: \"\",\n      error: null,\n    },\n    phone: {\n      value: \"\",\n      error: null,\n    },\n    license: {\n      value: null,\n      error: null,\n    }\n  }\n} as ISignUpScreenState;\n\nexport default createSlice({\n  name: 'login',\n  initialState,\n  reducers: {\n    setFederation: (state: ISignUpScreenState, action: PayloadAction<Federation>) => {\n      state.federation = action.payload;\n    },\n    setField: <T extends keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ISignUpScreenState[\"fields\"]>(state: ISignUpScreenState, action: PayloadAction<[T, ISignUpScreenState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n    \n    reset: (state: ISignUpScreenState) => {\n      state.fields = initialState.fields;\n    },\n  }\n});\n\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport * as users from \"./authenticated/users/slice\";\nimport * as login from \"./unauthenticated/login/slice\";\nimport * as manifest from \"./authenticated/manifest/slice\";\nimport * as signup from \"./unauthenticated/signup/slice\";\n\nexport const initialState = {\n  manifest: manifest.initialState,\n  users: users.initialState,\n  login: login.initialState,\n  signup: signup.initialState,\n}\nexport const reducers = {\n  manifest: manifest.default,\n  users: users.default,\n  login: login.default,\n  signup: signup.default,\n}","import { combineReducers, configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\nimport { Platform } from \"react-native\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport { reducers as forms, initialState as initialStateForms } from \"../components/forms/slice\";\nimport { reducers as screens, initialState as initialStateScreens } from \"../screens/slice\";\n\n\nimport globalSlice, { initialState as initialStateGlobal } from \"./global\";\nimport notificationSlice, { initialState as initialStateNotification } from \"../components/notifications/slice\";\n\nexport const initialState = {\n  forms: initialStateForms,\n  screens: initialStateScreens,\n  global: initialStateGlobal,\n  notifications: initialStateNotification,\n} as RootState;\n\nconst persistConfig = {\n  key: 'open-manifest.0.9.1',\n  storage: Platform.OS === \"web\" || false ? require('redux-persist/lib/storage').default : AsyncStorage,\n  whitelist: [\"global\", \"notifications\"],\n};\n\nconst screenReducers = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].reducer }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"reducer\"]\n};\nconst formReducers = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].reducer }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"reducer\"]\n};\n\nexport const screenActions = Object.keys(screens).reduce((obj, key: keyof typeof screens) => !screens[key] ? obj : ({ ...obj, [key]: screens[key].actions }), {}) as {\n  [K in keyof typeof screens]: typeof screens[K][\"actions\"]\n};\nexport const formActions = Object.keys(forms).reduce((obj, key: keyof typeof forms) => !forms[key] ? obj : ({ ...obj, [key]: forms[key].actions }), {}) as {\n  [K in keyof typeof forms]: typeof forms[K][\"actions\"]\n};\n\nexport const actions = {\n  forms: formActions,\n  screens: screenActions,\n  global: globalSlice.actions,\n  notifications: notificationSlice.actions,\n};\n\nexport const rootReducer = combineReducers({\n  global: globalSlice.reducer,\n  notifications: notificationSlice.reducer,\n  screens: combineReducers(screenReducers),\n  forms: combineReducers(formReducers),\n});\nexport const persistedReducer = persistReducer(persistConfig, rootReducer);\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [\"persist/PERSIST\"],\n    },\n  })\n});\n\nexport const persistor = persistStore(store);\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n","import * as React from \"react\";\nimport { Dimensions, ScrollView, StyleSheet, ScrollViewProps, useWindowDimensions } from \"react-native\";\nimport { useAppSelector } from \"../../redux\";\n\n\ninterface IScrollableScreen extends ScrollViewProps {\n  children: React.ReactNode;\n}\nexport default React.forwardRef<ScrollView, IScrollableScreen>((props, ref) => {\n\n  const { height } = useWindowDimensions();\n  const { theme } = useAppSelector(state => state.global);\n  const { style, children, contentContainerStyle, ...rest } = props;\n\n\n  return (\n    <ScrollView\n      {...rest}\n      ref={ref}\n      keyboardDismissMode=\"on-drag\"\n      keyboardShouldPersistTaps=\"handled\"\n      contentInsetAdjustmentBehavior=\"always\"\n      style={[styles.container, { backgroundColor: theme.colors.surface, height: height - (56 * 2) }, style]}\n      contentContainerStyle={[styles.content, contentContainerStyle]}\n    >\n      {children}\n    </ScrollView>\n  )\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  content: { \n    paddingHorizontal: 16, \n    alignItems: \"flex-start\", \n    flexGrow: 1,\n    paddingBottom: 50\n  }\n})","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Snackbar } from \"react-native-paper\";\n\ninterface INotification {\n  message: string;\n  variant?: \"error\" | \"success\" | \"warning\";\n  action?: {\n    label: string;\n    onPress: () => void;\n  }\n}\ninterface INotificationState {\n  queue: INotification[];\n}\n\nexport const initialState = { queue: [] } as INotificationState;\nexport default createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {\n    hideSnackbar: (state: INotificationState) => {\n      state.queue = state.queue.slice(1);\n    },\n    showSnackbar: (state: INotificationState, action: PayloadAction<INotification>) => {\n      state.queue.push(action.payload);\n    }\n  }\n});\n\n\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { List, Menu, TextInput } from \"react-native-paper\";\nimport { Federation, Query } from \"../../../graphql/schema.d\";\n\n\ninterface IFederationSelect {\n  value?: Federation | null;\n  required?: boolean;\n  onSelect(jt: Federation): void;\n}\n\nconst QUERY_FEDERATIONS = gql`\n  query Federations {\n    federations {\n      id\n      name\n    }\n  }\n`;\n\nexport default function FederationSelect(props: IFederationSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n\n  const { data } = useQuery<Query>(QUERY_FEDERATIONS);\n\n  React.useEffect(() => {\n    if (data?.federations?.length === 1 && !props.value) {\n      props.onSelect(data.federations![0]);\n    }\n  }, [JSON.stringify(data?.federations)])\n\n  return (\n    <>\n    <List.Subheader>\n      Federation\n    </List.Subheader>\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      \n      anchor={\n        <TouchableOpacity onPress={() => { setMenuOpen(true); }}>\n          <TextInput\n            mode=\"outlined\"\n            disabled\n            style={{ minWidth: 200 }}\n            value={\n              props.value?.name || \"Please select federation\"\n            }\n          />\n        </TouchableOpacity>\n      }>\n      {\n        data?.federations?.map((federation) => \n          <Menu.Item\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(federation);\n            }}\n            title={\n              federation.name || \"-\"\n            }\n            key={`federation-select-${federation.id}`}\n          />\n        )\n      }\n    </Menu>\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, Portal, Dialog } from 'react-native-paper';\nimport { TriangleColorPicker } from \"react-native-color-picker\";\nimport SliderComponent from \"@react-native-community/slider\";\n\ninterface IColorPickerDialog {\n  open: boolean;\n  value: string;\n  onChange(color: string): void;\n  onClose(): void;\n}\nexport default function ColorPickerDialog(props: IColorPickerDialog) {\n  const { value, onChange, open, onClose } = props;\n\n  const ref = React.useRef<TriangleColorPicker>();\n  return (\n    <Portal>\n      <Dialog\n        visible={!!open}\n        onDismiss={() => onClose()}\n      >\n          <Dialog.Title>Custom color</Dialog.Title>\n          <Dialog.Content style={{ padding: 20, height: 400 }}>\n            { /* @ts-ignore */ }\n            <TriangleColorPicker\n              style={{ flex: 1 }}\n              sliderComponent={SliderComponent as any}\n              defaultColor={value}\n              hideSliders\n              ref={ref}\n            />\n          </Dialog.Content>\n          <Dialog.Actions>\n            <Button onPress={() => onClose()}>Cancel</Button>\n            <Button\n              onPress={() => {\n                onChange(ref.current.getColor());\n              }}\n            >\n              Save\n            </Button>\n          </Dialog.Actions>\n        </Dialog>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Card, HelperText, List, Surface, TouchableRipple } from \"react-native-paper\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport ColorPickerDialog from \"./ColorPickerDialog\";\n\nconst COLOR_PRESETS = [\n  \"#000000\",\n  \"#AAAAAA\",\n  \"#DDDDDD\",\n  \"#FF1414\",\n  \"#D6116B\",\n  \"#B70E97\",\n  \"#6718AC\",\n  \"#1E47AB\",\n  \"#11839E\",\n  \"#0DA583\",\n  \"#10C626\",\n  \"#92EA12\",\n  \"#FF8B14\",\n  \"#FFB214\",\n];\n\ninterface IColorPicker {\n  title: string;\n  helperText: string;\n  value: string;\n  error?: string;\n  onChange(color: string): void;\n}\n\nfunction ColorPicker(props: IColorPicker) {\n  const { value, title, helperText, onChange, error } = props;\n\n  const isCustomColor = !COLOR_PRESETS.includes(value);\n  const [isDialogOpen, setDialogOpen] = React.useState(false);\n  return (\n    <>\n    <ColorPickerDialog\n      open={isDialogOpen}\n      value={value}\n      onChange={(color) => {\n        onChange(color);\n        setDialogOpen(false);\n      }}\n      onClose={() => setDialogOpen(false)}\n    />\n    <Card style={styles.card}>\n      <List.Subheader>{title}</List.Subheader>\n      \n      <Card.Content style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n        {\n          COLOR_PRESETS.map((color) =>\n          <TouchableRipple onPress={() => onChange(color)}>\n            <Surface style={[styles.colorBox, { backgroundColor: color }, color === value ? { borderWidth: 2, borderColor: \"black\" } : {}]}>\n            </Surface>\n          </TouchableRipple>\n          )\n        }\n        <TouchableRipple onPress={() => setDialogOpen(true)}>\n          <Surface style={[styles.colorBox, { backgroundColor: isCustomColor ? value : \"#FFFFFF\" }, isCustomColor ? { borderWidth: 2, borderColor: \"black\" } : {}]}>\n            <MaterialIcons name=\"add\" size={1} />\n          </Surface>\n        </TouchableRipple>\n      </Card.Content>\n      <HelperText type={!!error ? \"error\" : \"info\"}>\n        { error || helperText }\n      </HelperText>\n    </Card>\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16, height: 200 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 10, textAlign: \"center\" },\n\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }\n});\n\nexport default ColorPicker;","import ColorPicker from \"./ColorPicker\";\n\nexport default ColorPicker;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Surface } from \"react-native-paper\";\n\ninterface IPhonePreview {\n  primaryColor?: string;\n  secondaryColor?: string;\n}\n\nfunction PhonePreview(props: IPhonePreview) {\n\n  const { primaryColor, secondaryColor } = props;\n\n  return (\n    <View>\n      <Surface style={styles.previewContainer}>\n        <View style={[styles.previewAppBar, { backgroundColor: primaryColor }]} />\n        <View style={[styles.previewLoadCard]} />\n        <View style={[styles.previewLoadCard2]} />\n        <View style={[styles.previewLoadCard3]} />\n        <View style={[styles.previewButton, { backgroundColor: secondaryColor }]} />\n        <View style={[styles.previewTabBar, { backgroundColor: primaryColor }]} />\n      </Surface>\n      <Text style={styles.label}>Phone</Text>\n    </View>\n          \n  )\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"white\",\n    fontSize: 16,\n    marginTop: 8\n  },\n  previewContainer: {\n    height: 200,\n    width: 100,\n    borderRadius: 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#CCCCCC\",\n    alignSelf: \"center\"\n  },\n\n  previewAppBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: 0,\n    borderTopRightRadius: 5,\n    borderTopLeftRadius: 5,\n  },\n  previewTabBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    bottom: 0,\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n  },\n  previewLoadCard: {\n    width: \"96%\",\n    borderRadius: 2,\n    height: \"20%\",\n    marginVertical: \"2%\",\n    marginHorizontal: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n  },\n  previewLoadCard2: {\n    width: \"96%\",\n    height: \"20%\",\n    borderRadius: 2,\n    backgroundColor: \"#DDDDDD\",\n    marginVertical: \"2%\",\n    marginHorizontal: \"2%\",\n    position: \"absolute\",\n    top: \"37%\",\n  },\n  previewLoadCard3: {\n    width: \"96%\",\n    height: \"20%\",\n    borderRadius: 2,\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    marginHorizontal: \"2%\",\n    position: \"absolute\",\n    top: \"59%\",\n  },\n  previewButton: {\n    width: \"35%\",\n    height: \"6%\",\n    position: \"absolute\",\n    bottom: 22,\n    right: 5,\n    borderRadius: 5,\n    backgroundColor: \"#DDDDDD\",\n  },\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default PhonePreview;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Surface } from \"react-native-paper\";\n\ninterface IWebPreview {\n  primaryColor?: string;\n  secondaryColor?: string;\n}\n\nfunction WebPreview(props: IWebPreview) {\n\n  const { primaryColor, secondaryColor } = props;\n\n  return (\n    <View>\n    <Surface style={styles.previewContainer}>\n      <View style={[styles.previewAppBar, { backgroundColor: primaryColor }]} />\n      <View style={[styles.previewLoadCard]} />\n      <View style={[styles.previewLoadCard2]} />\n      <View style={[styles.previewLoadCard3]} />\n      <View style={[styles.previewButton, { backgroundColor: secondaryColor }]} />\n      <View style={[styles.previewTabBar, { backgroundColor: primaryColor }]} />\n    </Surface>\n      <Text style={styles.label}>Web</Text>\n    </View>\n          \n  )\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontWeight: \"bold\",\n    textAlign: \"center\",\n    color: \"white\",\n    fontSize: 16,\n    marginTop: 8\n  },\n  previewContainer: {\n    height: 100,\n    width: 170,\n    borderRadius: 5,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderColor: \"#CCCCCC\",\n    alignSelf: \"center\"\n  },\n\n  previewAppBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: 0,\n    borderTopRightRadius: 5,\n    borderTopLeftRadius: 5,\n  },\n  previewTabBar: {\n    width: \"100%\",\n    height: \"8.5%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    bottom: 0,\n    borderBottomRightRadius: 5,\n    borderBottomLeftRadius: 5,\n  },\n  previewLoadCard: {\n    width: \"30%\",\n    height: \"60%\",\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"2%\"\n  },\n  previewLoadCard2: {\n    width: \"30%\",\n    height: \"60%\",\n    backgroundColor: \"#DDDDDD\",\n    marginVertical: \"2%\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"35%\"\n  },\n  previewLoadCard3: {\n    width: \"30%\",\n    height: \"60%\",\n    marginVertical: \"2%\",\n    backgroundColor: \"#DDDDDD\",\n    position: \"absolute\",\n    top: \"15%\",\n    left: \"68%\"\n  },\n  previewButton: {\n    width: \"12%\",\n    height: \"6%\",\n    position: \"absolute\",\n    bottom: 15,\n    right: 8,\n    borderRadius: 5,\n    backgroundColor: \"#DDDDDD\",\n  },\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default WebPreview;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateUserArgs, UpdateUserPayload, UserSignUpPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_USER = gql`\n  mutation UpdateUser(\n    $id: Int,\n    $name: String,\n    $phone: String,\n    $email: String,\n    $pushToken: String,\n    $nickname: String,\n    $licenseId: Int,\n    $exitWeight: Float,\n  ){\n    updateUser(input: {\n      id: $id\n      attributes: {\n        pushToken: $pushToken\n        name: $name,\n        phone: $phone,\n        email: $email,\n        nickname: $nickname,\n        licenseId: $licenseId,\n        exitWeight: $exitWeight,\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      user {\n        id\n        name\n        exitWeight\n        email\n        pushToken\n        phone\n        rigs {\n          id\n          model\n          make\n          serial\n          canopySize\n        }\n        jumpTypes {\n          id\n          name\n        }\n        license {\n          id\n          name\n\n          federation {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateUserArgs[\"input\"][\"attributes\"], UpdateUserPayload>(\n  MUTATION_UPDATE_USER, {\n    getPayload: (result) => result.updateUser,\n    fieldErrorMap: {\n      license: \"licenseId\",\n      exit_weight: \"exitWeight\",\n    },\n  }\n);","import { Credential, User, Dropzone } from \"../graphql/schema\";\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport {\n  DarkTheme as NavigationDarkTheme,\n  DefaultTheme as NavigationDefaultTheme,\n} from '@react-navigation/native';\nimport {\n  DarkTheme as PaperDarkTheme,\n  DefaultTheme as PaperDefaultTheme,\n} from 'react-native-paper';\n\nconst CombinedDefaultTheme = {\n  ...PaperDefaultTheme,\n  ...NavigationDefaultTheme,\n  colors: {\n    ...PaperDefaultTheme.colors,\n    ...NavigationDefaultTheme.colors,\n    primary: \"#333333\",\n  },\n};\nconst CombinedDarkTheme = {\n  ...PaperDarkTheme,\n  ...NavigationDarkTheme,\n  colors: {\n    ...PaperDarkTheme.colors,\n    ...NavigationDarkTheme.colors,\n    primary: \"#333333\",\n  },\n};\n\ninterface IGlobalState {\n\n  currentDropzoneId: number;\n  // @deprecated\n  currentUser: User | null;\n  credentials: Credential | null;\n  // @deprecated\n  currentDropzone: Dropzone | null;\n  permissions: string[];\n\n  expoPushToken: string;\n\n  theme: typeof CombinedDarkTheme | typeof CombinedDefaultTheme,\n  isDarkMode: boolean;\n}\n\nexport const initialState: IGlobalState = {\n  currentUser: null,\n  currentDropzone: null,\n  currentDropzoneId: null,\n  permissions: [],\n  credentials: null,\n  expoPushToken: null,\n  theme: CombinedDefaultTheme,\n  isDarkMode: false,\n};\nexport default createSlice({\n  name: 'global',\n  initialState,\n  reducers: {\n    setCredentials: (state: IGlobalState, action: PayloadAction<Credential>) => {\n      state.credentials = action.payload;\n    },\n    setUser: (state: IGlobalState, action: PayloadAction<User>) => {\n      state.currentUser = action.payload;\n    },\n    setExpoPushToken: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.expoPushToken = action.payload;\n    },\n    setPermissions: (state: IGlobalState, action: PayloadAction<string[]>) => {\n      state.permissions = action.payload;\n    },\n    setPrimaryColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.primary = action.payload;\n    },\n    setAccentColor: (state: IGlobalState, action: PayloadAction<string>) => {\n      state.theme.colors.accent = action.payload;\n    },\n    setDropzone: (state: IGlobalState, action: PayloadAction<Dropzone | null>) => {\n      state.currentDropzone = action.payload;\n      state.currentDropzoneId = action.payload?.id ? Number(action.payload?.id) : null;\n\n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    toggleDarkMode: (state: IGlobalState) => {\n      state.isDarkMode = !state.isDarkMode;\n      state.theme = state.isDarkMode ? CombinedDarkTheme : CombinedDefaultTheme;\n      \n      if (state.currentDropzone?.primaryColor) {\n        state.theme.colors.primary = state.currentDropzone?.primaryColor;\n      }\n\n      if (state.currentDropzone?.secondaryColor) {\n        state.theme.colors.accent = state.currentDropzone?.secondaryColor;\n      }\n    },\n    logout: (state: IGlobalState) => {\n      for(const key in initialState) {\n        const typedKey = key as keyof IGlobalState;\n        if (key in state) {\n          (state[typedKey] as any) = initialState[typedKey];\n        }\n      }\n    }\n  }\n});\n\n\n\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"static/media/logo.6fa2ed95.png\";","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Extra } from \"../../../graphql/schema.d\";\n\ninterface IExtraEditState {\n  original: Extra | null;\n  open: boolean;\n  fields: {\n    name: {\n      value: string;\n      error: string | null;\n    },\n    cost: {\n      value: number | null;\n      error: string | null;\n    },\n    ticketTypeIds: {\n      value: number[],\n      error: null,\n    }\n  }\n}\n\nexport const initialState: IExtraEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    cost: {\n      value: null,\n      error: null,\n    },\n    ticketTypeIds: {\n      value: [],\n      error: null,\n    }\n  }\n};\n\nexport default createSlice({\n  name: 'forms/extra',\n  initialState,\n  reducers: {\n    setField: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields.name.error = null;\n    },\n    setFieldError: <T extends  keyof IExtraEditState[\"fields\"]>(state: IExtraEditState, action: PayloadAction<[T, IExtraEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: IExtraEditState, action: PayloadAction<boolean | Extra>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        state.fields.ticketTypeIds.value = action.payload.ticketTypes.map(({ id }) => Number(id));\n        state.fields.cost.value = action.payload.cost;\n        state.fields.name.value = action.payload.name!;\n      }\n    },\n    \n    reset: (state: IExtraEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Load } from \"../../../graphql/schema.d\";\n\n\ntype Fields = Pick<\n  Load,\n  | \"name\"\n  | \"gca\"\n  | \"dispatchAt\"\n  | \"isOpen\"\n  | \"loadMaster\"\n  | \"pilot\"\n  | \"maxSlots\"\n  | \"plane\"\n>;\n\ninterface ILoadEditState {\n  original: Load | null;\n  open: boolean;\n  fields: {\n    [K in keyof Fields] - ?: {\n      value: Load[K] | null;\n      error: string | null;\n    }\n  }\n}\n\nexport const initialState: ILoadEditState = {\n  original: null,\n  open: false,\n  fields: {\n    name: {\n      value: \"\",\n      error: null,\n    },\n    gca: {\n      value: null,\n      error: null,\n    },\n    dispatchAt: {\n      value: null,\n      error: null,\n    },\n    isOpen: {\n      value: true,\n      error: null,\n    },\n    loadMaster: {\n      value: null,\n      error: null,\n    },\n    pilot: {\n      value: null,\n      error: null,\n    },\n    plane: {\n      value: null,\n      error: null,\n    },\n    maxSlots: {\n      value: 4,\n      error: null,\n    },\n  }\n};\n\n\nexport default createSlice({\n  name: 'forms/load',\n  initialState,\n  reducers: {\n    setField: <T extends keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"value\"]]>) => {\n      const [field, value] = action.payload;\n\n      state.fields[field].value = value;\n      state.fields[field].error = null;\n    },\n    setFieldError: <T extends  keyof ILoadEditState[\"fields\"]>(state: ILoadEditState, action: PayloadAction<[T, ILoadEditState[\"fields\"][T][\"error\"]]>) => {\n      const [field, error] = action.payload;\n\n      state.fields[field].error = error;\n    },\n\n    setOpen: (state: ILoadEditState, action: PayloadAction<boolean | Load>) => {\n      if (typeof action.payload === \"boolean\") {\n        state.open = action.payload;\n        state.original = null;\n        state.fields = initialState.fields;\n      } else {\n        state.original = action.payload;\n        state.open = true;\n        for (const key in action.payload) {\n          if (key in state.fields) {\n            const typedKey = key as keyof typeof initialState[\"fields\"];\n            state.fields[typedKey].value = action.payload[typedKey];\n          }\n        }\n      }\n    },\n    \n    reset: (state: ILoadEditState) => {\n      state.fields = initialState.fields;\n      state.original = null;\n    },\n  }\n});\n\n\n","import { useQuery } from \"@apollo/client\";\nimport { startOfDay } from \"date-fns\";\nimport gql from 'graphql-tag';\nimport * as React from \"react\";\nimport { useAppDispatch, useAppSelector } from \"../../redux\";\nimport { Query } from \"../schema\";\nimport useMutationUpdateUser from \"./useMutationUpdateUser\";\n\nexport const QUERY_DROPZONE = gql`\n  query QueryDropzone($dropzoneId: Int!, $earliestTimestamp: Int) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor,\n      secondaryColor,\n      planes {\n        id\n        name\n        registration\n      }\n      ticketTypes {\n        id\n        name\n      }\n\n      currentUser {\n        id\n        credits\n        hasCredits\n        hasExitWeight\n        hasMembership\n        hasReserveInDate\n        hasRigInspection\n        hasLicense\n        permissions\n        expiresAt\n\n        role {\n          id\n          name\n        }\n\n        transactions {\n          edges {\n            node {\n              id\n              status\n              amount\n            }\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          pushToken\n\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n\n      loads(earliestTimestamp: $earliestTimestamp) {\n        edges {\n          node {\n            id\n            name\n            loadNumber\n            isOpen\n            maxSlots\n            isFull\n          }\n        }\n      }\n    }\n  }\n`;\nexport default function useCurrentDropzone() {\n  const dropzoneId = useAppSelector(state => state.global.currentDropzoneId);\n  const pushToken = useAppSelector(state => state.global.expoPushToken);\n  const dispatch = useAppDispatch();\n\n  const currentDropzone = useQuery<Query>(QUERY_DROPZONE, {\n    variables: {\n      dropzoneId: dropzoneId,\n      earliestTimestamp: startOfDay(new Date()).getTime() / 1000\n    },\n    fetchPolicy: \"cache-first\"\n  });\n\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: () => null,\n    onError: () => null,\n  });\n\n  // Update remote push token if we have a local token, but no\n  // token saved on the server. This is done so that the server\n  // is able to send us push notifications\n  React.useEffect(() => {\n    const userId = currentDropzone?.data?.dropzone?.currentUser?.user?.id;\n    const remoteToken = currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken;\n    const localToken = pushToken;\n\n    if (!currentDropzone.loading && currentDropzone.called) {\n      if (localToken && localToken !== remoteToken) {\n        mutationUpdateUser.mutate({\n          id: Number(userId),\n          pushToken: localToken,\n        })\n      }\n    }\n\n  }, [pushToken, currentDropzone?.data?.dropzone?.currentUser?.user?.pushToken]);\n\n  return {\n    ...currentDropzone,\n    dropzone: currentDropzone?.data?.dropzone,\n    currentUser: currentDropzone?.data?.dropzone?.currentUser,\n  }\n}","import { isEqual, xorBy } from \"lodash\";\nimport * as React from \"react\";\nimport { View } from \"react-native\";\nimport { Chip } from \"react-native-paper\";\n\n\ninterface IChipSelect<T extends any> {\n  items: T[];\n  selected: T[];\n  autoSelectFirst?: boolean;\n  icon?: string;\n  isSelected?(item: T): boolean;\n  isDisabled(item: T): boolean;\n  renderItemLabel(item: T): React.ReactNode;\n  onChangeSelected(newItems: T[]): void;\n}\nfunction ChipSelect<T extends any>(props: IChipSelect<T>) {\n  const { items, selected, isSelected, isDisabled, icon, renderItemLabel, onChangeSelected, autoSelectFirst } = props;\n\n  React.useEffect(() => {\n    if (!selected || !selected.length && items.length && autoSelectFirst) {\n      onChangeSelected(\n        [items[0]]\n      );\n    }\n  }, [JSON.stringify(selected), JSON.stringify(items), autoSelectFirst])\n\n  return (\n    <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n      { items.map((item) =>\n        <Chip\n          key={JSON.stringify(item)}\n          mode=\"outlined\"\n          icon={!selected.some((value) => isEqual(item, value)) && icon ? icon : undefined}\n          style={{ margin: 1 }}\n          disabled={isDisabled(item)}\n          selected={\n            isSelected\n              ? isSelected(item)\n              : selected.some((value) => isEqual(item, value))\n          }\n          onPress={() =>\n            onChangeSelected(\n              selected.length === 1 ? [item] : xorBy(selected, [item], JSON.stringify),\n            )\n          }\n        >\n          { renderItemLabel(item) }\n        </Chip>\n      )}\n    </View>\n  )\n}\n\nexport default ChipSelect;","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Paragraph, Title } from \"react-native-paper\";\nimport { View } from \"./Themed\";\n\ninterface INoResults {\n  title: string;\n  subtitle: string;\n  color?: string;\n}\nexport default function NoResults({ title, color, subtitle }: INoResults) {\n  return (\n    <View style={styles.empty}>\n      <Title style={{ color }}>{title}</Title>\n      <Paragraph style={{ color, textAlign: \"center\" }}>\n        {subtitle}\n      </Paragraph>\n    </View>\n  )\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\",\n    backgroundColor: \"transparent\",\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  empty: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    backgroundColor: \"transparent\",\n    height: \"100%\"\n  }\n});","\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { Button, Snackbar } from 'react-native-paper';\nimport { useAppSelector, useAppDispatch } from '../../redux';\n\nimport slice from \"./slice\";\nimport usePalette from '../../hooks/usePalette';\nconst { actions } = slice;\n\nconst MyComponent = () => {\n\n  const state = useAppSelector(state => state.notifications);\n  const dispatch = useAppDispatch();\n  const palette = usePalette();\n\n  const notification = state.queue.length ? state.queue[0] : null;\n\n  const variantStyle = {\n    info: { backgroundColor: palette.info },\n    success: { backgroundColor: palette.success },\n    error: { backgroundColor: palette.error },\n    warning: { backgroundColor: palette.warning },\n  };\n\n\n  return (\n    <Snackbar\n      testID=\"snackbar-message\"\n      visible={!!notification}\n      onDismiss={() =>\n        dispatch(actions.hideSnackbar())\n      }\n      duration={3000}\n      action={notification?.action}\n      style={!!notification?.variant && variantStyle[notification.variant]}\n    >\n      { notification?.message }\n    </Snackbar>\n  );\n};\n\n\nexport default MyComponent;","import * as React from 'react';\nimport { List, Menu } from 'react-native-paper';\nimport DayPicker from 'react-day-picker';\nimport 'react-day-picker/lib/style.css';\nimport format from \"date-fns/format\";\n\ninterface IDatepicker {\n  label: string;\n  timestamp: number;\n  disabled?: boolean;\n  onChange(timestamp: number): void;\n}\nexport default function DatePicker(props: IDatepicker) {\n  const [open, setOpen] = React.useState(false);\n\n  const onDismissSingle = React.useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const onConfirmSingle = React.useCallback(\n    ({ date }: { date: Date }) => {\n      setOpen(false);\n      props.onChange(date.getTime() / 1000);\n    },\n    [setOpen, props.onChange]\n  );\n\n  return (\n    <>\n    <Menu\n      onDismiss={() => setOpen(false)}\n      visible={open}\n      anchor={\n        <List.Item\n          onPress={() => setOpen(true)}\n          disabled={!!props.disabled}\n          title={props.label}\n          description={\n            props.timestamp ? \n              format(props.timestamp * 1000, \"yyyy/MM/dd\") :\n              \"No date selected\"\n          }\n          left={() => <List.Icon icon=\"calendar\" />}\n        />\n      }>\n      <DayPicker\n        selectedDays={props.timestamp ? [new Date(props.timestamp * 1000)] : []}\n        \n        onDayClick={(date) => {\n          props.onChange(date.getTime() / 1000);\n          setOpen(false);\n        }}\n\n      />\n    </Menu>\n    </>\n  );\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { License, Query } from \"../../../graphql/schema.d\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ILicenseSelect {\n  value?: License | null;\n  required?: boolean;\n  federationId?: number | null;\n  onSelect(jt: License): void;\n}\n\nconst QUERY_LICENSES = gql`\n  query Licenses($federationId: Int) {\n    licenses(federationId: $federationId) {\n      id\n      name\n\n      federation {\n        id\n        name\n      }\n\n    }\n  }\n`;\n\nexport default function LicenseChipSelect(props: ILicenseSelect) {\n\n  const { data } = useQuery<Query>(QUERY_LICENSES, {\n    variables: {\n      federationId: props.federationId,\n    }\n  });\n  return (\n    <>\n      <List.Subheader>\n        License\n      </List.Subheader>\n      <ChipSelect<License>\n        autoSelectFirst\n        icon=\"ticket-account\"\n        items={data?.licenses || []}\n        selected={[props.value].filter(Boolean) as License[]}\n        isSelected={(item) => item.id === props.value?.id}\n        renderItemLabel={(license) => license?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import useColorScheme from \"./useColorScheme\";\nimport colors from \"../constants/Colors\";\n\nfunction usePalette() {\n  const colorScheme = useColorScheme();\n\n  return colors[colorScheme];\n}\n\nexport default usePalette;","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button, TextInput, HelperText, Card, Menu, List, Portal, Modal, Dialog, Checkbox } from 'react-native-paper';\nimport { getDocumentAsync } from \"expo-document-picker\";\nimport { useQuery, gql } from '@apollo/client';\nimport ColorPicker from \"../../input/colorpicker\";\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\nimport SliderComponent from \"@react-native-community/slider\";\n\nimport { View } from '../../Themed';\n\nimport slice from \"./slice\";\nimport { Query } from '../../../graphql/schema';\nimport { PhonePreview, WebPreview } from '../../theme_preview';\nimport FederationSelect from '../../input/dropdown_select/FederationSelect';\n\n\nconst QUERY_FEDERATIONS = gql`\n  query QueryFederations {\n    federations {\n      id\n      name\n    }\n  }\n`;\nexport default function DropzoneForm() {\n  const global = useAppSelector(state => state.global);\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useQuery<Query>(QUERY_FEDERATIONS);\n  const [federationMenuOpen, setFederationMenuOpen] = React.useState(false);\n  const [colorPicker, setColorPicker] = React.useState<\"primary\" | \"secondary\" | null>(null);\n\n  React.useEffect(() => {\n    if (data?.federations?.length && !state.fields.federation?.value) {\n      dispatch(\n        actions.forms.dropzone.setField([\"federation\", data.federations[0]])\n      );\n    }\n  }, [JSON.stringify(data?.federations)]);\n\n  const onPickImage = React.useCallback(\n    async () => {\n      try {\n        const result = await getDocumentAsync({\n          multiple: false,\n          type: \"image\",\n        }) as { uri: string };\n\n        dispatch(actions.forms.dropzone.setField([\"banner\", result.uri as string]));\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    [dispatch],\n  )\n\n  return (\n    <>\n      <Card style={styles.card}>\n        <Card.Title title=\"Banner\" />\n        <Card.Cover\n          source={{ uri: state.fields.banner.value || 'https://picsum.photos/700' }}\n          resizeMode=\"cover\"\n        />\n        <Card.Actions style={{ justifyContent: \"flex-end\" }}>\n          <Button onPress={onPickImage}>Upload</Button>\n        </Card.Actions>\n      </Card>\n      <Card style={styles.card}>\n        <List.Subheader>Name</List.Subheader>\n        <TextInput\n          mode=\"outlined\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value || \"\"}\n          onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n        <FederationSelect\n          value={state.fields.federation.value}\n          onSelect={(value) => dispatch(actions.forms.dropzone.setField([\"federation\", value]))}\n          required\n        />\n        <HelperText type={!!state.fields.federation.error ? \"error\" : \"info\"}>\n          { state.fields.federation.error || \"\" }\n        </HelperText>\n      </Card>\n        \n\n      \n      <Card style={styles.card}>\n        <Card.Title title=\"Branding\" />\n        <Card.Content style={{ flexDirection: \"row\", justifyContent: \"space-evenly\", alignItems: \"flex-end\", width: \"100%\" }}>\n        <PhonePreview\n          primaryColor={state.fields.primaryColor.value}\n          secondaryColor={state.fields.secondaryColor.value}\n        />\n\n        <WebPreview\n          primaryColor={state.fields.primaryColor.value}\n          secondaryColor={state.fields.secondaryColor.value}\n        />\n        </Card.Content>\n      </Card>\n        \n      <ColorPicker\n        title=\"Primary color\"\n        helperText=\"Primary color is used for elements like the title bar and the tab bar\"\n        error={state.fields.primaryColor.error}\n        onChange={(color) => dispatch(actions.forms.dropzone.setField([\"primaryColor\", color]))}\n        value={state.fields.primaryColor.value}\n      />\n\n      <ColorPicker\n        title=\"Accent color\"\n        helperText=\"Accent color is used for highlights, like buttons and loading bars\"\n        error={state.fields.secondaryColor.error}\n        onChange={(color) => dispatch(actions.forms.dropzone.setField([\"secondaryColor\", color]))}\n        value={state.fields.secondaryColor.value}\n      />\n\n      <Card style={styles.card}>\n        <List.Item\n          title=\"Use credit system\"\n          description=\"Users will be charged credits when a load is marked as landed and can't manifest with insufficient funds.\"\n          onPress={() =>\n            dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.forms.dropzone.setField([\"isCreditSystemEnabled\", !state.fields.isCreditSystemEnabled.value]))\n              }\n              status={state.fields.isCreditSystemEnabled.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n          }\n        />\n      </Card>\n      <Card style={styles.card}>\n        <List.Item\n          title=\"Public\"\n          description=\"Your dropzone will not be available in the app if this is disabled\"\n          onPress={() =>\n            dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n          }\n          left={() =>\n            <Checkbox\n              onPress={() =>\n                dispatch(actions.forms.dropzone.setField([\"isPublic\", !state.fields.isPublic.value]))\n              }\n              status={state.fields.isPublic.value\n                  ? \"checked\"\n                  : \"unchecked\"\n              }\n            />\n        }/>\n      </Card>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  },\n  fields: {\n    flexGrow: 1,\n    display: \"flex\",\n    width: \"100%\",\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\",\n  },\n  subheader: {\n    paddingLeft: 0\n  }\n});\n","import { useMutation } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Switch } from \"react-native-paper\";\nimport { Mutation, Permission, UserRole } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { actions, useAppDispatch } from \"../../redux\";\n\ninterface IPermissionListItem {\n  title: string;\n  description?: string;\n  role: UserRole;\n  permissionName: string;\n}\n\nconst MUTATION_UPDATE_ROLE = gql`\n  mutation UpdateRole($roleId: Int!, $permissionName: String!, $enabled: Boolean!) {\n    updateRole(input: {\n      id: $roleId,\n      permission: $permissionName,\n      enabled: $enabled\n    }) {\n      role {\n        id\n        name\n        permissions\n      }\n      fieldErrors {\n        field\n        message\n      }\n      errors\n    }\n  }\n`;\n\nexport default function PermissionListItem(props: IPermissionListItem) {\n  const { title, description, role, permissionName } = props;\n  const canChangePermissions = useRestriction(Permission.GrantPermission);\n  const [mutationUpdatePermission, mutation] = useMutation<Mutation>(MUTATION_UPDATE_ROLE);\n  const dispatch = useAppDispatch();\n\n  return (\n    <List.Item\n      disabled={!canChangePermissions}\n      style={{ width: \"100%\" }}\n      right={() =>\n        <Switch\n          value={role.permissions.includes(permissionName)}\n          onValueChange={async () => {\n            const result = await mutationUpdatePermission({\n              variables: {\n                roleId: Number(role.id),\n                permissionName,\n                enabled: !role.permissions.includes(permissionName)\n              },\n              optimisticResponse: {\n                updateRole: {\n                  role: {\n                    ...role,\n                    permissions: !role.permissions.includes(permissionName)\n                      ? role.permissions.filter((name) => name !== permissionName)\n                      : [...role.permissions, permissionName]\n                  }\n                }\n              }\n            });\n\n            if (result?.data?.updateRole?.errors?.length) {\n              result?.data?.updateRole?.errors?.map((message) =>\n                dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n              );\n              return;\n            }\n          }}\n        />\n      }\n      {...{ title, description }}\n    />\n  );\n}","export * from \"./store\";","import { ApolloClient, createHttpLink, InMemoryCache, ServerError } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from \"@apollo/client/link/error\";\nimport * as React from 'react';\nimport Constants from \"expo-constants\";\nimport { actions, useAppDispatch, useAppSelector } from '../redux';\n\nconst httpLink = createHttpLink({\n  uri: Constants.manifest.extra.url,\n});\n\n\n\nexport default function Apollo({ children }: { children: React.ReactNode }) {\n\n  const credentials = useAppSelector(state => state.global.credentials);\n  const dispatch = useAppDispatch();\n  // Log any GraphQL errors or network error that occurred\n  const errorLink = React.useMemo(() =>\n    onError(({ graphQLErrors, networkError, operation, response }) => {\n\n      if (graphQLErrors?.some((err) => err.extensions?.code === \"AUTHENTICATION_ERROR\")) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `Session expired`, variant: \"error\" })\n        )\n        dispatch(\n          actions.global.logout()\n        );\n        return;\n      }\n        \n      if (graphQLErrors && process.env.EXPO_ENV !== 'production') {\n        graphQLErrors.map((err) => {\n          const { message, locations, path, stack, source, name, nodes } = err;\n          dispatch(\n            actions.notifications.showSnackbar({ message: `[GraphQL error]: ${message}, ${JSON.stringify(locations)}, ${path}`, variant: \"error\" })\n          )\n          console.error(\n            `[GraphQL error]: ${message}, ${JSON.stringify(locations)}, ${path}, ${name}, ${nodes}`\n          );\n          console.error(JSON.stringify(err));\n          console.error(operation);\n        });\n      }\n      if (networkError) {\n        dispatch(\n          actions.notifications.showSnackbar({ message: `[Network error]: ${networkError}`, variant: \"error\" })\n        )\n      }\n\n    }), [dispatch]);\n\n  const authLink = React.useMemo(\n    () => setContext((_, { headers }) => {\n      return {\n        \n        headers: {\n          ...headers,\n          ...credentials?.accessToken ? {\n            \"Authorization\": `Bearer ${credentials.accessToken}`,\n            \"access-token\": credentials.accessToken,\n            \"token-type\": credentials.tokenType,\n            ...credentials,\n          } : {},\n        }\n      }\n    }),\n    [JSON.stringify(credentials)],\n  );\n  \n  const client = React.useMemo(() =>\n    new ApolloClient({\n      link: errorLink.concat(authLink).concat(httpLink),\n      cache: new InMemoryCache(),\n    }),\n    [authLink]\n  );\n\n  return (\n    <ApolloProvider client={client}>\n      {children}\n    </ApolloProvider>\n  )\n}","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [\n    Linking.makeUrl('/'),\n    \"https://openmanifest.org\",\n    \"openmanifest://\",\n    \"http://localhost:19006\"\n  ],\n  config: {\n    screens: {\n      confirm: {\n        path: \"/confirm\",\n        params: {\n          account_confirmation_success: undefined,\n        }\n      },\n      Authenticated: {\n        screens: {\n          HomeScreen: \"/home\",\n          LoadScreen: \"/load/:load_id\",\n          PackingScreen: \"/packing\",\n          ProfileScreen: \"/user/:id\",\n          SetupScreen: \"/dropzone/setup\",\n        }\n      },\n      Limbo: {\n        screens: {\n          DropzonesScreen: \"/dropzones\",\n          CreateDropzoneScreen: \"/dropzone/create\",\n        }\n      },\n      Unauthenticated: {\n        screens: {\n          \n          LoginScreen: \"/login\",\n          SignUpScreen: \"/signup\",\n        }\n      },\n      //FIXME: Remove in release\n      // NotFound: '*',\n    },\n  },\n};\n","import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as React from \"react\";\nimport { Paragraph, Button} from \"react-native-paper\";\nimport { View, StyleSheet } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/core\";\n\n\ninterface ISetupWarning {\n  credits: number;\n  loading: boolean;\n  isRigSetUp: boolean;\n  isRigInspectionComplete: boolean;\n  isCreditSystemEnabled: boolean;\n  isExitWeightDefined: boolean;\n  isReserveInDate: boolean;\n  isMembershipInDate: boolean;\n  onSetupWizard?(): void;\n}\n\nfunction Warning(props: { title: string, action?: () => void }) {\n  const { action, title } = props;\n  return (\n    <View style={styles.warning}>\n      <Paragraph style={{ color: \"white\",  }}>\n        {title}\n      </Paragraph>\n      {!action ? null : (\n        <Button onPress={action}>\n          Fix\n        </Button>\n      )}\n    </View>\n  );\n}\n\nexport default function SetupWarning(props: ISetupWarning) {\n  const { credits, loading, isCreditSystemEnabled, isRigSetUp, isExitWeightDefined, isMembershipInDate, isReserveInDate, isRigInspectionComplete, onSetupWizard } = props;\n\n  if (props.loading) {\n    return null;\n  }\n  \n  const navigation = useNavigation();\n  \n\n  if (!isExitWeightDefined || !isRigSetUp) {\n    const missing = [\n      !isExitWeightDefined ? \"exit weight\" : null,\n      !isRigSetUp ? \"equipment\" : null,\n    ].filter(Boolean);\n\n    return (\n      <Warning\n        title={`You need to define ${missing.join(\"and\")} in your profile`}\n        action={() => onSetupWizard()}\n      />\n    );\n  } else if (!isMembershipInDate) {\n    return (\n      <Warning\n        title=\"Your membership seems to be out of date\"\n      />\n    )\n  } else if (!isRigInspectionComplete) {\n    return (\n      <Warning\n        title={`Your rig must be inspected before you can manifest at this dropzone`}\n      />\n    );\n  } else if (!isReserveInDate) {\n    return (\n      <Warning\n        title={`Your reserve repack is due. You cannot manifest if your repack is out of date.`}\n      />\n    );\n  } else if (isCreditSystemEnabled && !credits && !loading) {\n    return (\n      <Warning\n        title=\"You'll need to top up on credits before you can manifest\"\n      />\n    );\n  }\n\n  return null;\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"black\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n","import * as React from \"react\";\nimport { Appbar, Menu, IconButton, Divider, Chip } from \"react-native-paper\";\nimport { StackHeaderProps } from \"@react-navigation/stack\";\nimport { gql, useLazyQuery } from \"@apollo/client\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch, useAppSelector } from \"../redux\";\nimport { StyleSheet } from \"react-native\";\nimport SetupWarning from \"./SetupWarning\";\n\nconst QUERY_CURRENT_USER = gql`\n  query QueryDropzone($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      isCreditSystemEnabled\n\n      currentUser {\n        id\n        credits\n        expiresAt\n        \n        rigInspections {\n          id\n          rig {\n            id\n            repackExpiresAt\n          }\n        }\n\n        user {\n          id\n          name\n          exitWeight\n          email\n          phone\n          rigs {\n            id\n            model\n            make\n            serial\n            canopySize\n            repackExpiresAt\n          }\n          jumpTypes {\n            id\n            name\n          }\n          license {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\ninterface IAppBarProps extends StackHeaderProps {\n  hideWarnings?: boolean;\n}\n\n\nfunction AppBar(props: IAppBarProps) {\n  const { navigation, previous, scene, hideWarnings } = props;\n  const [contextMenuOpen, setContextMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [loadData, { data, loading }] = useLazyQuery<Query>(QUERY_CURRENT_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId)\n    }\n  });\n\n  React.useEffect(() => {\n    if (currentDropzoneId) {\n      loadData();\n    }\n  }, [loadData, currentDropzoneId])\n  \n  const showCredits = !!data?.dropzone?.isCreditSystemEnabled;\n\n  return (\n    <>\n    <Appbar.Header>\n      {previous ? <Appbar.BackAction onPress={navigation.goBack} /> : null}\n      <Appbar.Content title={scene.descriptor.options.title} titleStyle={{ fontWeight: \"bold\" }} />\n\n      { scene.descriptor.options.headerRight\n        ? scene.descriptor.options.headerRight({ tintColor: \"white\" })\n        : (\n          <Chip mode=\"outlined\">\n            {`$${data?.dropzone?.currentUser?.credits || 0}`}\n          </Chip>\n        )}\n      <Menu\n        onDismiss={() => setContextMenuOpen(false)}\n        visible={contextMenuOpen}\n        anchor={\n          <IconButton\n            icon=\"dots-vertical\"\n            color=\"#FFFFFF\"\n            onPress={() => setContextMenuOpen(true)}\n          />\n      }>\n        <Menu.Item\n          title=\"Change dropzone\"\n          icon=\"radar\"\n          onPress={() => {\n            navigation.replace(\"DropzonesScreen\");\n            setContextMenuOpen(false);\n          }}\n        />\n        <Divider />\n        <Menu.Item\n          title=\"Log out\"\n          icon=\"logout\"\n          onPress={() => {\n            dispatch(actions.global.logout());\n            setContextMenuOpen(false);\n          }}\n        />\n      </Menu>\n    </Appbar.Header>\n    { hideWarnings ? null : (\n      <SetupWarning\n        credits={data?.dropzone?.currentUser?.credits || 0}\n        loading={loading}\n        isCreditSystemEnabled={!!data?.dropzone?.isCreditSystemEnabled}\n        isExitWeightDefined={!!data?.dropzone?.currentUser?.user?.exitWeight}\n        isMembershipInDate={!!data?.dropzone?.currentUser?.expiresAt && data?.dropzone?.currentUser?.expiresAt > (new Date().getTime() / 1000)}\n        isReserveInDate={\n          !!data?.dropzone?.currentUser?.user?.rigs?.some((rig) => {\n            const isRigInspected = data.dropzone?.currentUser?.rigInspections?.map((inspection) => inspection?.rig?.id === rig.id);\n            const isRepackInDate = (rig.repackExpiresAt || 0) > (new Date().getTime() / 1000);\n            return isRigInspected && isRepackInDate;\n          })\n        }\n        isRigInspectionComplete={!!data?.dropzone?.currentUser?.rigInspections?.length}\n        isRigSetUp={!!data?.dropzone?.currentUser?.user?.rigs?.length}\n        onSetupWizard={() => {\n          const currentUser = data?.dropzone?.currentUser;\n\n          if (currentUser) {\n            dispatch(actions.forms.user.setOpen(currentUser.user));\n            if (currentUser?.user?.rigs?.length) {\n              dispatch(actions.forms.rig.setOpen(currentUser.user.rigs[0]));\n            }\n  \n            dispatch(actions.forms.userWizard.setOpen(currentUser.user));\n          }\n        }}\n      />\n    )}\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  warning: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    height: 56,\n    width: \"100%\",\n    backgroundColor: \"#ffbb33\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 32\n  },\n})\n\nexport default AppBar;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { DropzoneUser, Slot } from '../../graphql/schema';\nimport { useAppSelector } from '../../redux';\n\nconst ManifestScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestScreen'));\nconst CreateLoadScreen = React.lazy(() => import('../../screens/authenticated/load/CreateLoadScreen'));\nconst ManifestGroupScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupScreen'));\nconst ManifestGroupUserSelectScreen = React.lazy(() => import('../../screens/authenticated/manifest/ManifestGroupUserSelectScreen'));\nimport AppBar from '../AppBar';\n\n\nexport type IManifestTabParams = {\n  DropzoneScreen: undefined;\n  CreateLoadScreen: undefined;\n  ManifestGroupUserSelectScreen: undefined;\n  ManifestGroupScreen: {\n    users?: DropzoneUser[];\n    slots?: Slot[]\n    loadId?: number\n  };\n}\n\nconst Manifest = createStackNavigator<IManifestTabParams>();\n\nexport default function ManifestTab() {\n  const globalState = useAppSelector(state => state.global);\n  return (\n    <Manifest.Navigator\n      screenOptions={{\n        headerShown: !!(globalState.credentials && globalState.currentDropzone),\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Manifest.Screen name=\"DropzoneScreen\" component={ManifestScreen} options={{ title: \"Manifest\" }} />\n      <Manifest.Screen name=\"CreateLoadScreen\" component={CreateLoadScreen} options={{ title: \"Create load\" }}/>\n      <Manifest.Screen name=\"ManifestGroupScreen\" component={ManifestGroupScreen} options={{ title: \"Manifest group\" }}/>\n      <Manifest.Screen name=\"ManifestGroupUserSelectScreen\" component={ManifestGroupUserSelectScreen} options={{ title: \"Select users\" }}/>\n    </Manifest.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\n\nconst NotificationsScreen = React.lazy(() => import('../../screens/authenticated/notifications/NotificationsScreen'));\n\nexport type IProfileTabParams = {\n  NotificationsScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function Notifications() {\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"NotificationsScreen\"\n        component={NotificationsScreen}\n        options={{ title: \"Notifications\" }}\n      />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport AppBar from '../AppBar';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nconst UpdateUserScreen = React.lazy(() => import('../../screens/authenticated/profile/UpdateUserScreen'));\n\nexport type IProfileTabParams = {\n  ProfileScreen: {\n    userId: string,\n  };\n  UpdateUserScreen: undefined;\n}\n\nconst Profile = createStackNavigator<IProfileTabParams>();\n\nexport default function ProfileTab() {\n  const { currentUser } = useCurrentDropzone();\n  \n  return (\n    <Profile.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} hideWarnings />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Profile.Screen\n        name=\"ProfileScreen\"\n        component={ProfileScreen}\n        options={{ title: \"Profile\" }}\n        initialParams={{\n          userId: currentUser?.id,\n        }}\n      />\n      <Profile.Screen name=\"UpdateUserScreen\" component={UpdateUserScreen} options={{ title: \"Edit profile\" }} />\n    </Profile.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst SettingsScreen = React.lazy(() => import('../../screens/authenticated/settings/SettingsScreen'));\nconst TicketTypeSettingsScreen = React.lazy(() => import('../../screens/authenticated/ticket_types/TicketTypesScreen'));\nconst CreatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/CreatePlaneScreen'));\nconst UpdatePlaneScreen = React.lazy(() => import('../../screens/authenticated/planes/UpdatePlaneScreen'));\nconst UpdateDropzoneScreen = React.lazy(() => import('../../screens/authenticated/dropzones/UpdateDropzoneScreen'));\nconst PlanesScreen = React.lazy(() => import('../../screens/authenticated/planes/PlanesScreen'));\nconst RigInspectionTemplateScreen = React.lazy(() => import('../../screens/authenticated/settings/RigInspectionTemplateScreen'));\nconst DropzoneRigsScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneRigsScreen'));\nconst DropzonePermissionScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzonePermissionScreen'));\nconst DropzoneMasterLogScreen = React.lazy(() => import('../../screens/authenticated/settings/DropzoneMasterLogScreen'));\n\n\nconst CreateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/CreateExtraScreen'));\nconst UpdateExtraScreen = React.lazy(() => import('../../screens/authenticated/extras/UpdateExtraScreen'));\nconst ExtrasScreen = React.lazy(() => import('../../screens/authenticated/extras/ExtrasScreen'));\n\n\nimport AppBar from '../AppBar';\nimport { Dropzone } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  SettingsScreen: undefined;\n  UpdateDropzoneScreen: { dropzone: Dropzone };\n  TicketTypeSettingsScreen: undefined;\n  CreatePlaneScreen: undefined;\n  UpdatePlaneScreen: undefined;\n  PlanesScreen: undefined;\n  PlaneScreen: undefined;\n  TicketTypesScreen: undefined;\n  UpdateExtraScreen: undefined;\n  CreateExtraScreen: undefined;\n  ExtrasScreen: undefined;\n  RigInspectionTemplateScreen: undefined;\n  DropzoneRigsScreen: undefined;\n  DropzonePermissionScreen: undefined;\n  DropzoneMasterLogScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) => <AppBar {...props} />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"SettingsScreen\" component={SettingsScreen} options={{ title: \"Settings\" }} />\n      <Settings.Screen name=\"UpdateDropzoneScreen\" component={UpdateDropzoneScreen} options={{ title: \"Basic settings\" }} />\n      <Settings.Screen name=\"PlanesScreen\" component={PlanesScreen} options={{ title: \"Planes\"}} />\n      <Settings.Screen name=\"CreatePlaneScreen\" component={CreatePlaneScreen} options={{ title: \"New plane\"}} />\n      <Settings.Screen name=\"UpdatePlaneScreen\" component={UpdatePlaneScreen} options={{ title: \"Edit plane\"}} />\n      <Settings.Screen name=\"TicketTypesScreen\" component={TicketTypeSettingsScreen} options={{ title: \"Ticket types\" }} />\n      <Settings.Screen name=\"CreateExtraScreen\" component={CreateExtraScreen} options={{ title: \"Create ticket add-on\" }}/>\n      <Settings.Screen name=\"UpdateExtraScreen\" component={UpdateExtraScreen} options={{ title: \"Update ticket add-on\" }} />\n      <Settings.Screen name=\"ExtrasScreen\" component={ExtrasScreen} options={{ title: \"Ticket add-ons\" }} />\n      <Settings.Screen name=\"RigInspectionTemplateScreen\" component={RigInspectionTemplateScreen} options={{ title: \"Rig Inspection Form\" }} />\n      <Settings.Screen name=\"DropzoneRigsScreen\" component={DropzoneRigsScreen} options={{ title: \"Dropzone rigs\" }} />\n      <Settings.Screen name=\"DropzonePermissionScreen\" component={DropzonePermissionScreen} options={{ title: \"Permissions\" }} />\n      <Settings.Screen\n        name=\"DropzoneMasterLogScreen\"\n        component={DropzoneMasterLogScreen}\n        options={{ title: \"Master log\"}}\n        />\n    </Settings.Navigator>\n  );\n}\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nconst UsersScreen = React.lazy(() => import('../../screens/authenticated/users/UsersScreen'));\nconst SearchableAppBar = React.lazy(() => import('../../screens/authenticated/users/AppBar'));\nconst RigInspectionScreen = React.lazy(() => import('../../screens/authenticated/rig/RigInspectionScreen'));\nconst ProfileScreen = React.lazy(() => import('../../screens/authenticated/profile/ProfileScreen'));\nimport { actions, useAppDispatch, useAppSelector } from '../../redux';\nimport { Rig } from '../../graphql/schema';\n\nexport type ISettingsTabParams = {\n  UsersScreen: {\n    select?: boolean;\n    loadId: number;\n    onSelect?(): void;\n  };\n  RigInspectionScreen: { dropzoneUserId: number, rig: Rig };\n  UserProfileScreen: undefined;\n}\n\nconst Settings = createStackNavigator<ISettingsTabParams>();\n\nexport default function SettingsTab() {\n  const { isSearchVisible, searchText } = useAppSelector(state => state.screens.users);\n  const dispatch = useAppDispatch();\n\n  return (\n    <Settings.Navigator\n      screenOptions={{\n        headerShown: true,\n        header: (props) =>\n          <SearchableAppBar\n            {...props}\n            searchText={searchText}\n            searchVisible={isSearchVisible}\n            setSearchVisible={(visible) => dispatch(actions.screens.users.setSearchVisible(visible))}\n            onSearch={(text) => dispatch(actions.screens.users.setSearchText(text))}\n          />,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Settings.Screen name=\"UsersScreen\" component={UsersScreen} options={{ title: \"Dropzone users\" }} />\n      <Settings.Screen name=\"UserProfileScreen\" component={ProfileScreen} options={{ title: \"User\" }} />\n      <Settings.Screen name=\"RigInspectionScreen\" component={RigInspectionScreen} options={{ title: \"Inspection\" }} />\n    </Settings.Navigator>\n  );\n}\n","import { useTheme } from 'react-native-paper';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as React from 'react';\n\nimport ManifestTab from \"./tabs/manifest\";\nimport NotificationTab from \"./tabs/notifications\";\nimport ProfileTab from \"./tabs/profile\";\nimport SettingsTab from \"./tabs/settings\";\nimport UsersTab from \"./tabs/users\";\n\nimport useRestriction from '../hooks/useRestriction';\nimport { Permission } from '../graphql/schema.d';\n\nexport type IAuthenticatedTabParams = {\n  Manifest: undefined;\n  Profile: undefined;\n  Packing: undefined;\n  Users: undefined;\n  Notifications: undefined;\n  Settings: undefined;\n}\n\n\nconst BottomTab = createBottomTabNavigator<IAuthenticatedTabParams>();\n\nexport default function AuthenticatedTabBar() {\n  const theme = useTheme();\n\n  const canViewUsers = useRestriction(Permission.ReadUser);\n\n  const canUpdateDropzone = useRestriction(Permission.UpdateDropzone);\n  const canUpdatePlane = useRestriction(Permission.UpdatePlane);\n  const canUpdateTicketTypes = useRestriction(Permission.UpdateTicketType);\n  const canUpdateExtras = useRestriction(Permission.UpdateExtra);\n  const canUpdatePermissions = useRestriction(Permission.GrantPermission);\n  const canUpdateDzRigs = useRestriction(Permission.UpdateDropzoneRig);\n  const canUpdateRigInspectionTemplate = useRestriction(Permission.UpdateFormTemplate);\n\n  const shouldShowSettings = canUpdateDropzone\n  || canUpdatePlane\n  || canUpdateTicketTypes\n  || canUpdateExtras\n  || canUpdatePermissions\n  || canUpdateDzRigs\n  || canUpdateRigInspectionTemplate;\n  \n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"Manifest\"\n      tabBarOptions={{\n        activeTintColor: \"#FFFFFF\",\n        inactiveBackgroundColor: theme.colors.primary,\n        activeBackgroundColor: theme.colors.primary,\n        inactiveTintColor: \"#CCCCCC\",\n        showLabel: false,\n        style: {\n          backgroundColor: theme.colors.primary,\n        }\n      }}\n    >\n      <BottomTab.Screen\n        name=\"Manifest\"\n        component={ManifestTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"airplane\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Notifications\"\n        component={NotificationTab}\n        options={{\n          tabBarIcon: ({ focused, color, size }) => <MaterialCommunityIcons name=\"bell\" color={color} size={size} />,\n          unmountOnBlur: true,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-circle\" />,\n          unmountOnBlur: true,\n        }}\n      />\n\n     \n      { canViewUsers && (\n        <BottomTab.Screen\n          name=\"Users\"\n          component={UsersTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-group\" />,\n            unmountOnBlur: true,\n          }}\n        />\n      )}\n      \n      { shouldShowSettings && (\n        <BottomTab.Screen\n          name=\"Settings\"\n          component={SettingsTab}\n          options={{\n            tabBarIcon: ({ size, color, focused }) => <MaterialCommunityIcons {...{size, color }} name=\"account-cog\" />\n          }}\n        />\n      )}\n    </BottomTab.Navigator>\n  );\n}\n\n","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, FlatList, Dimensions, View } from 'react-native';\nimport { Card, Title, FAB, Avatar } from 'react-native-paper';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport { Query } from \"../../../graphql/schema.d\";\n\nimport { useNavigation } from '@react-navigation/core';\nimport { SafeAreaView } from 'react-native-safe-area-context';\nimport NoResults from '../../../components/NoResults';\n\n\nconst QUERY_DROPZONES = gql`\n  query QueryDropzones {\n    dropzones {\n      edges {\n        node {\n          id\n          name\n          primaryColor,\n          secondaryColor,\n          banner\n          ticketTypes {\n            id\n            name\n            cost\n            allowManifestingSelf\n            currency\n          }\n          planes {\n            id\n            name,\n            registration,\n            minSlots,\n            maxSlots,\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function DropzonesScreen() {\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n  const dropzoneWizard = useAppSelector(state => state.forms.dropzoneWizard);\n  const { data, loading, refetch } = useQuery<Query>(QUERY_DROPZONES);\n  const navigation = useNavigation();\n \n  React.useEffect(() => {\n    \n    if (dropzoneWizard.complete && !dropzoneWizard.open && globalState.currentDropzoneId) {\n      \n      // @ts-ignore\n      navigation.replace(\"Authenticated\", { screen: \"HomeScreen\"});\n\n      // Reset complete flag to prevent navigating again\n      dispatch(actions.forms.dropzoneWizard.complete(false));\n    }\n  }, [dropzoneWizard.open, dropzoneWizard.complete]);\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={data?.dropzones?.edges || []}\n        numColumns={2}\n        refreshing={loading}\n        onRefresh={() => refetch()}\n        style={{ flex: 1, width: \"100%\" }}\n        contentContainerStyle={{ flexGrow: 1, width: \"100%\", paddingBottom: 100 }}\n        ListEmptyComponent={() =>\n          <NoResults\n            title=\"No dropzones?\"\n            subtitle=\"You can set one up!\"\n            color=\"#FFFFFF\"\n          />\n        }\n        renderItem={({ item }) => {\n          return (\n            <Card\n              style={{\n                width: (Dimensions.get(\"window\").width / 2) - 32,\n                margin: 8\n              }}\n              onPress={async ()=> {\n                if (item?.node) {\n                  const shouldPushRoute = !!globalState.currentDropzoneId; \n                  dispatch(\n                    actions.global.setDropzone(item.node)\n                  );\n\n                  if (shouldPushRoute) {\n                    // @ts-ignore\n                    navigation.replace(\"Authenticated\", { screen: \"HomeScreen\"});\n                  }\n                }\n              }}\n            >\n              {\n                item?.node?.banner\n                  ? <Card.Cover source={{ uri: item?.node?.banner as string }} />\n                  : <View style={[styles.dzIcon, { backgroundColor: item.node.primaryColor }]}>\n                      <Avatar.Icon style={{ backgroundColor: item.node.secondaryColor }} icon=\"airplane-takeoff\" />\n                    </View>\n              }\n\n              <Card.Content>\n                <Title>{item?.node?.name}</Title>\n              </Card.Content>\n            </Card>\n          )\n        }}\n      />\n      \n      <FAB\n        style={styles.fab}\n        small\n        icon=\"plus\"\n        onPress={() => {\n          dispatch(actions.forms.plane.reset());\n          dispatch(actions.forms.ticketType.reset());\n          dispatch(actions.forms.dropzone.reset());\n          dispatch(actions.forms.dropzoneWizard.setOpen(true));\n        }}\n        label=\"Create dropzone\"\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 8,\n    display: \"flex\",\n    flexGrow: 1,\n    backgroundColor: \"#FF1414\",\n  },\n  dzIcon: {\n    height: 150,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  fab: {\n    position: 'absolute',\n    margin: 32,\n    right: 16,\n    bottom: 0,\n    backgroundColor: \"#FFFFFF\"\n  },\n  empty: {\n    flex: 1,\n    backgroundColor: \"#FF1414\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreateDropzonePayload, Mutation } from \"../schema\";\n\n\nexport const MUTATION_CREATE_DROPZONE = gql`\nmutation CreateDropzone(\n  $name: String!,\n  $banner: String,\n  $federationId: Int!\n  $primaryColor: String\n  $secondaryColor: String\n){\n  createDropzone(input: { attributes: { name: $name, banner: $banner, federationId: $federationId, primaryColor: $primaryColor, secondaryColor: $secondaryColor }}) {\n    dropzone {\n      id\n      name\n      banner\n\n      federation {\n        id\n        name\n      }\n    }\n  }\n}\n`;\n\n\nexport default createMutation<{\n  name: string,\n  banner?: string,\n  federationId: number,\n  primaryColor: string,\n  secondaryColor: string,\n}, CreateDropzonePayload>(\n  MUTATION_CREATE_DROPZONE, {\n    getPayload: (result) => result.createDropzone,\n    fieldErrorMap: {\n      federation: \"federationId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ]\n    }\n  }\n)","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { View } from '../../../components/Themed';\n\nimport DropzoneForm from '../../../components/forms/dropzone/DropzoneForm';\nimport useMutationCreateDropzone from '../../../graphql/hooks/useMutationCreateDropzone';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\n\nexport default function CreateDropzoneScreen() {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const createDropzone = useMutationCreateDropzone({\n    onError: (e: string) => dispatch(actions.notifications.showSnackbar({ message: e, variant: \"error\"})),\n    onFieldError: (field, error) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as string, error])),\n    onSuccess: (payload) => dispatch(actions.global.setDropzone(payload.dropzone!)),\n  })\n\n  return (\n    <ScrollableScreen contentContainerStyle={{ paddingHorizontal: 32 }}>\n        <DropzoneForm />\n        <View style={styles.fields}>\n          <Button\n            mode=\"contained\"\n            disabled={createDropzone.loading}\n            loading={createDropzone.loading}\n            onPress={() => \n              createDropzone.mutate({\n                name: state.fields.name.value!,\n                banner: state.fields.banner.value!,\n                federationId: Number(state.fields.federation.value!.id),\n              })\n            }\n          >\n            Save\n          </Button>\n      </View>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport DropzonesScreen from \"../screens/authenticated/dropzones/DropzonesScreen\";\nimport CreateDropzoneScreen from \"../screens/authenticated/dropzones/CreateDropzoneScreen\";\n\n\nconst Stack = createStackNavigator();\n\nexport default function Limbo() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n      initialRouteName=\"Dropzones\"\n    >\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      <Stack.Screen name=\"CreateDropzoneScreen\" component={CreateDropzoneScreen} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from 'react';\nimport { Image, KeyboardAvoidingView, StyleSheet } from 'react-native';\nimport { Button, HelperText, TextInput } from \"react-native-paper\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { gql, useMutation } from '@apollo/client';\n\nimport { View } from '../../../components/Themed';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Mutation } from '../../../graphql/schema';\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\n\n\nconst MUTATION_LOG_IN = gql`\n  mutation UserLogin($email: String!, $password: String!) {\n    userLogin(email: $email, password: $password) {\n      authenticatable {\n        id\n        email\n        name\n        phone\n        createdAt\n        updatedAt\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\nexport default function LoginScreen() {\n  const state = useAppSelector(state => state.screens.login);\n  const dispatch = useAppDispatch();  \n  const navigation = useNavigation();\n  const [mutationLogin, data] = useMutation<Mutation>(MUTATION_LOG_IN);\n\n  const onLogin = React.useCallback(\n    async () => {\n      const emailRegex = new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n      let hasError = false;\n\n      if (!state.fields.email.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Email is required\")\n        );\n      }\n\n      if (!state.fields.password.value) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setPasswordError(\"Password is required\")\n        );\n      }\n\n      if (!emailRegex.test(state.fields.email.value)) {\n        hasError = true;\n        dispatch(\n          actions.screens.login.setEmailError(\"Please enter a valid email\")\n        );\n      }\n\n      if (!hasError) {\n        try {\n          const result = await mutationLogin({\n            variables: {\n              email: state.fields.email.value,\n              password: state.fields.password.value\n            }\n          });\n\n          console.log({ result });\n\n          if (result?.data?.userLogin?.authenticatable && result?.data?.userLogin?.credentials) {\n            dispatch(\n              actions.global.setCredentials(result.data.userLogin.credentials)\n            );\n            dispatch(\n              actions.global.setUser(result.data.userLogin.authenticatable)\n            );\n          }\n        } catch (e) {\n          dispatch(actions.notifications.showSnackbar({ message: e.message, variant: \"error\" }));\n        }\n      }\n    },\n    [mutationLogin, JSON.stringify(state.fields)],\n  )\n\n  return (\n    <View style={styles.container}>\n      <Image source={logo} style={{ height: 300, width: \"100%\" }} resizeMode=\"contain\" />\n      <KeyboardAvoidingView style={styles.fields} behavior=\"padding\">\n        <TextInput\n          label=\"Email\"\n          mode=\"outlined\"\n          value={state.fields.email.value}\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setEmail(newValue));\n          }}\n        />\n        <HelperText type=\"error\">\n          {state.fields.email.error || \" \"}\n        </HelperText>\n\n        <TextInput\n          label=\"Password\"\n          mode=\"outlined\"\n          value={state.fields.password.value}\n          secureTextEntry\n          onChangeText={(newValue) => {\n            dispatch(actions.screens.login.setPassword(newValue));\n          }}\n          error={!!state.fields.password.error}\n        />\n        <HelperText type=\"error\">\n          {state.fields.password.error || \" \"}\n        </HelperText>\n        <Button mode=\"contained\" labelStyle={styles.buttonLabel} style={styles.button} onPress={onLogin} loading={data.loading}>\n          Log in\n        </Button>\n\n        <Button labelStyle={styles.textButtonLabel} style={styles.textButton} onPress={() => navigation.navigate(\"SignUpScreen\")}>\n          Sign up\n        </Button>\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: primaryColor,\n    paddingTop: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  \n  fields: {\n    marginBottom: 10,\n    marginTop: -50,\n    maxWidth: 400,\n    width: \"100%\",\n    paddingHorizontal: 56,\n    backgroundColor: \"transparent\"\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  textButton: {\n    marginTop: 10,\n    backgroundColor: \"transparent\",\n    color: \"white\",\n    width: \"100%\"\n  },\n  textButtonLabel: {\n    color: \"#FFFFFF\",\n  }\n});\n","import gql from \"graphql-tag\";\nimport { createMutation, isEmail, isRequired, validates } from \"../createMutation\";\nimport { MutationUserSignUpArgs, UserSignUpPayload } from \"../schema\";\n\n\nexport const MUTATION_USER_SIGNUP = gql`\n  mutation UserSignUp(\n    $email: String!,\n    $password: String!,\n    $passwordConfirmation: String!\n    $name: String!\n    $phone: String!\n    $pushToken: String\n    $exitWeight: Float!\n    $licenseId: Int\n  ){\n    userSignUp(\n      email: $email,\n      password: $password,\n      passwordConfirmation: $passwordConfirmation,\n      exitWeight: $exitWeight,\n      name: $name,\n      phone: $phone,\n      pushToken: $pushToken,\n      licenseId: $licenseId,\n      confirmSuccessUrl: \"https://openmanifest.org/confirm/\"\n    ) {\n      authenticatable {\n        createdAt,\n        email,\n        id,\n        name,\n        phone,\n      }\n      credentials {\n        accessToken\n        tokenType\n        client\n        expiry\n        uid\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationUserSignUpArgs, UserSignUpPayload>(\n  MUTATION_USER_SIGNUP, {\n    getPayload: (result) => result.userSignUp,\n    fieldErrorMap: {\n      license: \"licenseId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\")\n      ],\n      email: [\n        isEmail(\"Please enter a valid email\"),\n      ],\n      passwordConfirmation: [\n        validates(\n          \"Password must have 1 uppercase, 1 lowercase, 1 digit and be at least 8 characters\",\n          (fields) => /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}.*$/.test(fields.passwordConfirmation)\n        ),\n        validates(\n          \"Passwords don't match\",\n          (fields) => fields.password === fields.passwordConfirmation\n        )\n      ]\n    }\n  }\n);","import * as React from 'react';\nimport { Image, KeyboardAvoidingView, StyleSheet } from 'react-native';\nimport { TextInput, Button, HelperText } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport useMutationSignUp from '../../../graphql/hooks/useMutationSignUp';\nimport ScrollableScreen from '../../../components/layout/ScrollableScreen';\n\nimport { primaryColor } from '../../../constants/Colors';\nimport logo from \"../../../assets/images/logo.png\";\nimport { useNavigation } from '@react-navigation/core';\n\nexport default function SignupScreen() {\n  const state = useAppSelector(state => state.screens.signup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const navigation = useNavigation();\n\n  const { loading, mutate: onSignUp } = useMutationSignUp({\n    onSuccess: (payload) => {\n      // Reset the form and redirect to login screen with a snackbar\n      dispatch(\n        actions.notifications.showSnackbar({ message: \"A confirmation link has been sent to your email\", variant: \"success\" })\n      );\n\n      navigation.navigate(\"LoginScreen\");\n      // Credentials are received on login only now. Return\n      return;\n      if (payload.credentials) {\n        dispatch(\n          actions.global.setCredentials(payload.credentials)\n        );\n        dispatch(\n          actions.global.setUser(payload.authenticatable!)\n        );\n      }\n    },\n    onFieldError: (field, value) =>\n      dispatch(\n        actions.screens.signup.setFieldError([field as any, value])\n      )\n  });\n\n  \n\n  return (\n    <ScrollableScreen style={styles.container} contentContainerStyle={styles.content}>\n      <KeyboardAvoidingView style={styles.fields} behavior=\"position\">\n        <Image source={logo} style={{ width: \"100%\", height: 200 }} resizeMode=\"contain\" />\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"name\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.name.error || \"\" }\n        </HelperText>\n        \n        <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n          { state.fields.exitWeight.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Email\"\n          error={!!state.fields.email.error}\n          value={state.fields.email.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"email\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.email.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Phone\"\n          error={!!state.fields.phone.error}\n          value={state.fields.phone.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"phone\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.phone.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.password.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"password\", newValue]))}\n        />\n\n        <HelperText type=\"error\">\n          { state.fields.password.error || \"\" }\n        </HelperText>\n\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Repeat password\"\n          error={Boolean(state.fields.password.error || state.fields.passwordConfirmation.error)}\n          textContentType=\"password\"\n          secureTextEntry\n          passwordRules=\"required: upper; required: lower; required: digit; minlength: 8;\"\n          value={state.fields.passwordConfirmation.value}\n          onChangeText={(newValue) => dispatch(actions.screens.signup.setField([\"passwordConfirmation\", newValue]))}\n        />\n        <HelperText type=\"error\">\n          { state.fields.passwordConfirmation.error || \"\" }\n        </HelperText>\n\n        <Button\n          mode=\"contained\"\n          labelStyle={styles.buttonLabel} \n          style={styles.button}\n          onPress={() =>\n            onSignUp({\n              pushToken: globalState.expoPushToken,\n              email: state.fields.email.value,\n              name: state.fields.name.value,\n              exitWeight: state.fields.exitWeight.value,\n              password: state.fields.password.value,\n              passwordConfirmation: state.fields.passwordConfirmation.value,\n              licenseId: Number(state.fields.license?.value?.id) || null,\n              phone: state.fields.phone.value,\n            })\n          }\n          loading={loading}\n        >\n          Sign up\n        </Button>\n      </KeyboardAvoidingView>\n    </ScrollableScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: primaryColor,\n  },\n  content: {\n    paddingHorizontal: 60,\n    alignItems: \"center\",\n  },\n  button: {\n    marginTop: 10,\n    backgroundColor: \"white\",\n    width: \"100%\"\n  },\n  buttonLabel: {\n    color: \"#FF1414\",\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fields: {\n    width: \"100%\",\n    flexGrow: 1,\n    maxWidth: 400,\n    backgroundColor: \"transparent\"\n  },\n  field: {\n    marginBottom: 8,\n    backgroundColor: \"white\",\n    borderColor: \"white\",\n    color: \"white\"\n  }\n});\n","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport LoginScreen from '../screens/unauthenticated/login/LoginScreen';\nimport SignUpScreen from '../screens/unauthenticated/signup/SignUpScreen';\nimport UserWizardScreen from '../screens/user_wizard/UserWizardScreen';\n\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator();\n\nexport default function Unauthenticated() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      <Stack.Screen name=\"LoginScreen\" component={LoginScreen} />\n      <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n    </Stack.Navigator>\n  );\n}\n","import { StyleSheet, Text, View } from \"react-native\";\nimport { useRoute } from \"@react-navigation/core\";\nimport * as React from \"react\";\nimport { Avatar } from \"react-native-paper\";\nimport { successColor, warningColor } from \"../../../constants/Colors\";\n\n\nfunction ConfirmUserScreen() {\n\n  const route = useRoute<{\n    key: string,\n    name: string,\n    params?: { account_confirmation_success?: string }\n  }>();\n\n  return (\n    route?.params?.account_confirmation_success === \"true\" ?\n      <View style={styles.container}>\n        <Avatar.Icon icon=\"check\" style={styles.icon} />\n        <Text style={styles.title}>All done!</Text>\n        <Text style={styles.subtitle}>You can now log in</Text>\n      </View>\n    : <View style={styles.container}>\n        <Avatar.Icon icon=\"close\" style={styles.errorIcon} />\n        <Text style={styles.title}>Oops!</Text>\n        <Text style={styles.subtitle}>Something went wrong. Please contact support</Text>\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: { \n    flexGrow: 1,\n    backgroundColor: \"#FF0000\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  icon: {\n    backgroundColor: successColor,\n    marginBottom: 16,\n  },\n  errorIcon: {\n    backgroundColor: warningColor,\n    marginBottom: 16,\n  },\n  title: {\n    fontSize: 38,\n    color: \"#FFFFFF\",\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: 26,\n    color: \"#FFFFFF\",\n    textAlign: \"center\",\n  },\n});\n\nexport default ConfirmUserScreen;","import { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { useAppSelector } from '../redux/store';\n\nimport AuthenticatedRoutes from './Authenticated';\nimport LimboRoutes from './LimboRoutes';\nimport UnauthenticatedRoutes from './Unauthenticated';\nimport DropzonesScreen from '../screens/authenticated/dropzones/DropzonesScreen';\nimport ConfirmUserScreen from \"../screens/unauthenticated/signup/ConfirmUserScreen\";\nexport type TRootNavigatorRouteParams = {\n  Authenticated: undefined;\n  Unauthenticated: undefined;\n  confirm: { account_confirmation_success?: boolean };\n  Dropzones: undefined;\n  DropzonesScreen: undefined;\n  NotFound: undefined;\n}\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<TRootNavigatorRouteParams>();\n\nexport default function RootNavigator() {\n  const globalState = useAppSelector(state => state.global);\n  \n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerShown: false,\n\n        cardStyle: {\n          flex: 1\n        }\n      }}\n    >\n      {\n        globalState.credentials\n          ? (\n            globalState.currentDropzone\n              ? <Stack.Screen name=\"Authenticated\" component={AuthenticatedRoutes} /> :\n                <Stack.Screen name=\"Dropzones\" component={LimboRoutes} />\n          ) : (\n            <Stack.Screen name=\"Unauthenticated\" component={UnauthenticatedRoutes} />\n          )\n      }\n      <Stack.Screen name=\"confirm\" component={ConfirmUserScreen} />\n      <Stack.Screen name=\"DropzonesScreen\" component={DropzonesScreen} />\n      \n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import * as React from \"react\";\nimport { View, StyleSheet, Dimensions } from \"react-native\";\nimport { Avatar } from \"react-native-paper\";\nimport { PaginationProps } from \"react-native-swiper-flatlist\";\nimport { successColor } from \"../../constants/Colors\";\n\ninterface IWizardPagination extends PaginationProps {\n  icons?: string[];\n}\nexport default function WizardPagination(props: IWizardPagination) {\n  const { size, paginationIndex, icons } = props;\n\n  const { width } = Dimensions.get('window');\n  const screenWidth = width > 500 ? 500 : width;\n  \n  const bridgeLength = (screenWidth - (48 * 2) - (size * 30)) / size;\n\n  return (\n    <View style={styles.pagination}>\n      {\n        Array.from({ length: size }).map((_, index) => {\n          const hasCustomIcon = icons && icons.length > index;\n          const isPast = index < paginationIndex;\n          const isCurrent = index == paginationIndex;\n          let defaultIcon = isPast\n            ? \"check\" : \"\";\n          defaultIcon = isCurrent ? \"pencil\" : defaultIcon;\n\n          return (\n            <React.Fragment key={index}>\n              <Avatar.Icon\n                icon={\n                  hasCustomIcon\n                    ? icons[index]\n                    : defaultIcon\n                }\n                size={30}\n                style={[\n                  styles.icon,\n                  paginationIndex > index ? styles.iconDone : undefined\n                ]}\n              />\n              {\n                size - 1 > index\n                  ? <View style={[styles.bridge, { width: bridgeLength }, paginationIndex > index ? styles.bridgeDone : undefined]} />\n                  : null\n              }\n            </React.Fragment>\n          );\n        })\n      }\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  pagination: {\n    flexDirection: \"row\",\n    position: \"absolute\",\n    top: 100,\n    alignSelf: \"center\",\n  },\n  bridge: {\n    height: 10,\n    marginTop: 10,\n    marginLeft: -2,\n    width: 50,\n    backgroundColor: \"white\",\n  },\n  bridgeDone: {\n    backgroundColor: successColor,\n  },\n  icon: {\n    backgroundColor: \"white\",\n    marginLeft: -1\n  },\n  iconDone: {\n    backgroundColor: successColor,\n    marginLeft: -1,\n  },\n});","import * as React from \"react\";\nimport { Dimensions, StyleSheet, View } from \"react-native\";\nimport { Button } from \"react-native-paper\";\nimport { SwiperFlatList } from 'react-native-swiper-flatlist';\nimport { useAppSelector } from \"../../redux\";\nimport WizardPagination from \"./Pagination\";\n\ninterface IWizardProps {\n  children: React.ReactNode;\n  \n  icons?: string[];\n}\n\ninterface IWizardContext {\n  count: number,\n  index: number,\n  setIndex(idx: number): void;\n}\n\nexport const WizardContext = React.createContext<IWizardContext>({\n  index: 0,\n  count: 0,\n  setIndex: () => null\n} as IWizardContext)\n\nfunction Wizard(props: IWizardProps) {\n  const { children, icons } = props;\n  const [index, setIndex] = React.useState(0);\n  const ref = React.useRef<SwiperFlatList>(null);\n  const count = React.Children.count(children);\n\n  return (\n    <WizardContext.Provider\n      value={{\n        index,\n        count,\n        setIndex: (idx) => {\n          // @ts-ignore\n          ref.current?.scrollToIndex({ index: idx, animated: true });\n        }\n      }}\n    >\n      <View style={[styles.container]}>\n        <SwiperFlatList\n          showPagination\n          index={index}\n          PaginationComponent={(props) => \n            <WizardPagination {...props} icons={icons} />\n          }\n          numColumns={1}\n          scrollEnabled={false}\n          autoplay={false}\n          ref={ref}\n          onChangeIndex={({ index, prevIndex }) => {\n            setIndex(index || 0);\n          }}\n        >\n          {children}\n        </SwiperFlatList>\n      </View>\n    </WizardContext.Provider>\n  );\n}\n\nconst { width } = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  \n  container: {\n    width,\n    flex: 1,\n    paddingBottom: 0\n  },\n});\n\nexport default Wizard;","import * as React from \"react\";\nimport { Dimensions, View, StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Title } from \"react-native-paper\";\nimport { SafeAreaViewProps } from \"react-native-safe-area-context\";;\nimport ScrollableScreen from \"../layout/ScrollableScreen\";\nimport { WizardContext } from \"./Wizard\";\n\nexport interface IWizardScreenProps extends SafeAreaViewProps {\n  title?: string;\n  loading?: boolean;\n  backButtonLabel?: string;\n  nextButtonLabel?: string;\n  \n  onBack(currentIndex: number, setIndex: (idx: number) => void): void;\n  onNext(currentIndex: number, setIndex: (idx: number) => void): void;\n}\nexport function WizardScreen(props: IWizardScreenProps) {\n  const { title, loading, onBack, backButtonLabel, nextButtonLabel, onNext } = props;\n  const { width, height } = Dimensions.get('window');\n  const screenWidth = width > 500 ? 500 : width;\n\n  const { index, setIndex } = React.useContext(WizardContext);\n\n  const scrollRef = React.useRef<ScrollView>();\n\n  React.useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTo({ y: 0, animated: false });\n      console.log(\"Scrolling \", props.title, \" to 0\");\n    } else {\n      console.log(\"No ref\");\n    }\n  }, [index]);\n\n  return (\n    <View style={StyleSheet.flatten([styles.wizardScreen, { width }, props.style])}>\n      <ScrollableScreen\n        style={[styles.container, { width: screenWidth }]}\n        contentContainerStyle={[styles.content, { minHeight: height }]}\n        // @ts-ignore\n        ref={scrollRef}\n      >\n        <Title style={styles.title}>{title}</Title>\n        { props.children }\n\n        <View style={styles.buttons}>\n        <Button\n          key={`button-next-${index}`}\n          loading={loading}\n          mode=\"contained\"\n          color=\"#FFFFFF\"\n          disabled={loading}\n          style={styles.button}\n          onPress={async () => {\n            console.log(\"onNext with index\", index);\n            onNext(index, setIndex);\n          }}\n        >\n          {\n            nextButtonLabel\n          }\n        </Button>\n\n        {\n          !onBack\n            ? null\n            : (\n              <Button\n                key={`button-${index}`}\n                mode=\"text\"\n                disabled={loading}\n                color=\"#FFFFFF\"\n                style={styles.buttonBack}\n                onPress={async () => {\n                  onBack(index, setIndex);\n                }}\n              >\n                {\n                  backButtonLabel\n                }\n              </Button>     \n            )\n        }\n        </View>\n      </ScrollableScreen>\n    </View>\n  )\n}\n\n\n\nconst styles = StyleSheet.create({\n  wizardScreen: {\n    justifyContent: \"center\",\n  },\n  container: {\n    backgroundColor: \"#FF1414\",\n    paddingHorizontal: 32,\n    alignSelf: \"center\"\n  },\n  content: { paddingTop: 200, flexGrow: 1, paddingBottom: 0 },\n  title: {\n    position: \"absolute\",\n    top: 140,\n    marginBottom: 50,\n    color: \"white\",\n    fontSize: 24, \n    fontWeight: \"bold\", \n    textAlign: \"center\",\n    alignSelf: \"center\"\n  },\n  button: {\n    alignSelf: \"center\",\n    width: \"100%\",\n  },\n  buttonBack: {\n    alignSelf: \"center\",\n    width: \"100%\",\n    marginHorizontal: 48\n  },\n  buttons: {\n    alignSelf: \"flex-end\",\n    alignItems: \"flex-end\",\n    flexGrow: 1,\n    justifyContent: \"flex-end\",\n    width: \"100%\",\n    maxWidth: 404,\n    marginBottom: 100,\n  }\n});\n\nexport default WizardScreen;","import * as React from \"react\";\nimport { View, StyleSheet, Text } from \"react-native\";\nimport { Avatar, HelperText, Paragraph } from \"react-native-paper\";\nimport { successColor } from \"../../constants/Colors\";\nimport WizardScreen, { IWizardScreenProps } from \"./WizardScreen\";\n\ninterface IWizardCompleteStep extends IWizardScreenProps {\n  subtitle?: string;\n}\n\nfunction WizardCompleteStep(props: IWizardCompleteStep) {\n  const { title, subtitle, ...rest } = props;\n  return (\n    <WizardScreen style={styles.container} {...rest}>\n      <View style={styles.content}>\n        \n        <Avatar.Icon\n          icon=\"check\"\n          size={150}\n          style={styles.icon}\n        />\n        <Text style={styles.title}>{title}</Text>\n        <Paragraph style={styles.subtitle}>{subtitle}</Paragraph>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  subtitle: {\n    color: \"white\",\n    textAlign: \"center\",\n  },\n  title: {\n    fontSize: 26,\n    color: \"white\",\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n  },\n  content: {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexGrow: 1,\n    alignSelf: \"center\"\n  },\n  icon: {\n    marginVertical: 32,\n    backgroundColor: successColor,\n  },\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n    backgroundColor: \"transparent\"\n  },\n});\n\nexport default WizardCompleteStep;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, Title } from \"react-native-paper\";\nimport LicenseChipSelect from \"../../../input/chip_select/LicenseChipSelect\";\nimport FederationSelect from \"../../../input/dropdown_select/FederationSelect\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction FederationWizardSceen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"What license do you have?\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <FederationSelect\n            value={state?.fields?.license?.value?.federation || state.federation.value}\n            onSelect={(value) => dispatch(actions.forms.user.setFederation(value))}\n            required\n          />\n          <HelperText type={!!state.federation.error ? \"error\" : \"info\"}>\n            { state.federation.error || \"\" }\n          </HelperText>\n        </Card>\n\n        <Card style={{ padding: 16 }}>\n          { (state?.fields?.license?.value?.federation?.id || state?.federation?.value?.id) && (\n            <>\n              <LicenseChipSelect\n                value={state.fields.license.value}\n                federationId={Number(state?.fields?.license?.value?.federation?.id || state.federation?.value?.id)}\n                onSelect={(value) => dispatch(actions.forms.user.setField([\"license\", value]))}\n                required\n              />\n              <HelperText type={!!state.fields.license.error ? \"error\" : \"info\"}>\n                { state.fields.license.error || \"\" }\n              </HelperText>\n            </>\n          )}\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 100,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  } \n});\n\nexport default FederationWizardSceen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { Card, HelperText, List, Menu, TextInput, Title } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction RigWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const [isOtherMake, setIsOtherMake] = React.useState(false);\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"What're you jumping?\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Manufacturer</List.Subheader>\n          <Menu\n            onDismiss={() => setMenuOpen(false)}\n            visible={isMenuOpen}\n            anchor={\n              <TouchableOpacity onPress={() => setMenuOpen(true)}>\n              <TextInput\n                pointerEvents=\"box-only\"\n                style={styles.field}\n                mode=\"outlined\"\n                error={!!state.fields.make.error}\n                value={\n                  isOtherMake\n                    ? \"Other\" \n                    : state.fields.make.value || \"Select manufacturer\"\n                }\n                disabled\n              />\n              </TouchableOpacity>\n            }>\n            {\n              [\"Icon\", \"Javelin\", \"Mirage\", \"Vector\", \"PA (Talon)\", \"Infinity\", \"Parachutes de France\", \"Racer\"].map((make) => \n                <Menu.Item\n                  onPress={() => {\n                    setMenuOpen(false);\n                    dispatch(actions.forms.rig.setField([\"make\", make]));\n                    setIsOtherMake(false);\n                  }}\n                  title={make}\n                />\n              )}\n              <Menu.Item\n                onPress={() => {\n                  setMenuOpen(false);\n                  dispatch(actions.forms.rig.setField([\"make\", \"\"]));\n                  setIsOtherMake(true);\n                }}\n                title={\"Other\"}\n              />\n          </Menu>\n          {\n            !isOtherMake ? null : (\n              <TextInput\n                style={styles.field}\n                mode=\"outlined\"\n                label=\"Other manufacturer\"\n                error={!!state.fields.make.error}\n                value={state.fields.make.value || \"\"}\n                onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"make\", newValue]))}\n              />\n            )\n          }\n          \n          <HelperText type={!!state.fields.make.error ? \"error\" : \"info\"}>\n            { state.fields.make.error || \"\" }\n          </HelperText>\n        \n          <List.Subheader>Model</List.Subheader>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            error={!!state.fields.model.error}\n            value={state.fields.model.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"model\", newValue]))}\n          />\n          <HelperText type={!!state.fields.model.error ? \"error\" : \"info\"}>\n            { state.fields.model.error || \"e.g G4.1\" }\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card}>\n          <List.Subheader>Serial numebr</List.Subheader>\n          <TextInput\n            style={styles.field}\n            mode=\"outlined\"\n            error={!!state.fields.serial.error}\n            value={state.fields.serial.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.rig.setField([\"serial\", newValue]))}\n          />\n          <HelperText type={!!state.fields.serial.error ? \"error\" : \"info\"}>\n            { state.fields.serial.error || \"\" }\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 16, marginVertical: 16 },\n  title: {\n    color: \"white\",\n    marginBottom: 16,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  }\n});\n\nexport default RigWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, Title } from \"react-native-paper\";\nimport DatePicker from \"../../../input/date_picker/DatePicker\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction ReserveRepackWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.rig);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Next reserve repack?\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Due date</List.Subheader>\n          <DatePicker\n            timestamp={state.fields.repackExpiresAt.value || new Date().getTime() / 1000}\n            onChange={(time) => dispatch(actions.forms.rig.setField([\"repackExpiresAt\", time]))}\n          />\n          <HelperText type={!!state.fields.repackExpiresAt.error ? \"error\" : \"info\"}>\n            { state.fields.repackExpiresAt.error || \"\" }\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  title: { color: \"white\", fontSize: 24, fontWeight: \"bold\", marginBottom: 80, textAlign: \"center\" }\n});\n\nexport default ReserveRepackWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Avatar, Card, HelperText, List, Paragraph } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { ceil, debounce } from \"lodash\";\n\nfunction WingloadingWizardScreen(props: IWizardScreenProps) {\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const userForm = useAppSelector(state => state.forms.user);\n  const dispatch = useAppDispatch();\n  const [canopySize, setCanopySize] = React.useState(rigForm.fields.canopySize.value || 120);\n\n\n  React.useEffect(() => {\n    setCanopySize(rigForm.fields.canopySize.value);\n  }, [rigForm.fields.canopySize.value]);\n\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Your wingloading\">\n\n      <View style={styles.content}>\n        <Card>\n          <Card.Content style={{ flexDirection: \"row\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <View style={styles.wingLoadingCardLeft}>\n              <Avatar.Text\n                label={\n                  ceil(\n                    2.205 * Number(userForm.fields.exitWeight.value || 50) /\n                    (rigForm.fields.canopySize.value || 150),\n                    2\n                  ).toString()\n                }\n                size={100}\n                style={styles.wingLoading}\n              />\n            </View>\n            <View style={styles.wingLoadingCardRight}>\n              <Card.Title title=\"Your wingloading\" style={{ paddingLeft: 0 }} />\n              <Paragraph>Your wingloading is an indicator of your descent rate under canopy</Paragraph>\n            </View>\n            \n          </Card.Content>\n        </Card>\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Your exit weight</List.Subheader>\n            <Text style={styles.cardValue}>{(userForm.fields.exitWeight.value || 50)}kg</Text>\n          </View>\n          <Slider\n            style={styles.sliderControl}\n            minimumValue={50}\n            maximumValue={160}\n            step={0.5}\n            minimumTrackTintColor=\"#FF1414\"\n            maximumTrackTintColor=\"#000000\"\n            onValueChange={debounce((value) =>\n              dispatch(actions.forms.user.setField([\"exitWeight\", value.toString()])),\n              20\n            )}\n          />\n          <HelperText type={userForm.fields.exitWeight?.error ? \"error\" : \"info\" }>\n            { userForm.fields.exitWeight?.error || \"Your weight in kg's with all equipment on\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Canopy size</List.Subheader>\n            <Text style={styles.cardValue}>{(canopySize || 120)}ft</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={34}\n              maximumValue={350}\n              step={1}\n              value={canopySize || 120}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={(size) => setCanopySize(size)}\n              onSlidingComplete={() => dispatch(actions.forms.rig.setField([\"canopySize\", canopySize]))}\n            />\n          </View>\n            \n          <HelperText type={userForm.fields.exitWeight?.error ? \"error\" : \"info\" }>\n            {userForm.fields.exitWeight?.error || \"Size of your main canopy in square feet\"}\n          </HelperText>\n        </Card>\n        \n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 50,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default WingloadingWizardScreen;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateRigArgs, UpdateRigPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_RIG = gql`\n  mutation UpdateRig(\n    $id: Int!\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    updateRig(\n      input: {\n        id: $id,\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateRigArgs[\"input\"][\"attributes\"], UpdateRigPayload>(\n  MUTATION_UPDATE_RIG, {\n    getPayload: (result) => result.updateRig,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationCreateRigArgs, CreateRigPayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_RIG = gql`\n  mutation CreateRig(\n    $make: String,\n    $model: String,\n    $serial: String,\n    $rigType: String,\n    $canopySize: Int,\n    $repackExpiresAt: Int\n    $userId: Int\n    $dropzoneId: Int\n  ) {\n    createRig(\n      input: {\n        attributes: {\n          make: $make\n          model: $model\n          serial: $serial\n          repackExpiresAt: $repackExpiresAt\n          dropzoneId: $dropzoneId\n          userId: $userId\n          canopySize: $canopySize\n          rigType: $rigType\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      rig {\n        id\n        make\n        model\n        serial\n        canopySize\n        repackExpiresAt\n        packValue\n        maintainedAt\n        rigType\n\n        user {\n          id\n          rigs {\n            id\n            make\n            model\n            serial\n            canopySize\n            repackExpiresAt\n            packValue\n            maintainedAt\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<MutationCreateRigArgs[\"input\"][\"attributes\"], CreateRigPayload>(\n  MUTATION_CREATE_RIG, {\n    getPayload: (result) => result.createRig,\n    fieldErrorMap: {\n    },\n  }\n);","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Portal, Modal, Dialog } from \"react-native-paper\";\nimport Wizard from \"../../wizard/Wizard\";\nimport WizardCompleteStep from \"../../wizard/WizardCompleteStep\";\nimport FederationStep from \"./steps/Federation\";\nimport RigStep from \"./steps/Rig\";\nimport ReserveRepackStep from \"./steps/ReserveRepack\";\nimport WingloadingStep from \"./steps/Wingloading\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport useMutationUpdateUser from \"../../../graphql/hooks/useMutationUpdateUser\";\nimport useMutationUpdateRig from \"../../../graphql/hooks/useMutationUpdateRig\";\nimport useMutationCreateRig from \"../../../graphql/hooks/useMutationCreateRig\";\n\nfunction UserWizardScreen() {\n  const userForm = useAppSelector(state => state.forms.user);\n  const rigForm = useAppSelector(state => state.forms.rig);\n  const state = useAppSelector(state => state.forms.userWizard);\n  const dispatch = useAppDispatch();\n  const mutationUpdateUser = useMutationUpdateUser({\n    onSuccess: (e) => true,\n    onError: (message) => dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" })),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.user.setFieldError([field as any, value])),\n  });\n  const mutationUpdateRig = useMutationUpdateRig({\n    onSuccess: () => true,\n    onError: (message) => dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" })),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.rig.setFieldError([field as any, value])),\n  });\n  const mutationCreateRig = useMutationCreateRig({\n    onSuccess: (e) => true,\n    onError: (message) => dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" })),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.rig.setFieldError([field as any, value])),\n  });\n\n  const onFederationNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!userForm.fields.license?.value?.id) {\n      dispatch(actions.forms.user.setFieldError([\"license\", \"You must select a license\"]));\n      return false;\n    }\n\n    // Update user license\n    try {\n      await mutationUpdateUser.mutate({\n        id: Number(userForm.original.id),\n        licenseId: Number(userForm.fields.license?.value?.id)\n      });\n      return setIndex(index + 1);\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(userForm.fields)]);\n\n  const onRigNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!rigForm.fields.make?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"make\", \"Please select manufacturer\"]));\n      return;\n    }\n\n    if (!rigForm.fields.model?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"model\", \"Please enter a model name\"]));\n      return;\n    }\n\n    // Create user rig\n    try {\n      const rig = !rigForm.original?.id\n        ? await mutationCreateRig.mutate({\n          make: rigForm.fields.make.value,\n          model: rigForm.fields.model.value,\n          serial: rigForm.fields.serial.value,\n          userId: Number(userForm.original.id),\n        })\n        : await mutationUpdateRig.mutate({\n          id: Number(rigForm.original?.id),\n          make: rigForm.fields.make.value,\n          model: rigForm.fields.model.value,\n          serial: rigForm.fields.serial.value,\n          userId: Number(userForm.original.id),\n        });\n\n      dispatch(actions.forms.rig.setOpen(rig.rig));\n      setIndex(index + 1 );\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(userForm.fields), JSON.stringify(userForm.original), JSON.stringify(rigForm.original)]);\n\n  const onReserveRepackNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!rigForm.fields.repackExpiresAt?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"repackExpiresAt\", \"Select repack date, even if it's in the past\"]));\n      return false;\n    }\n\n    // Update repack expiry date\n    try {\n      const rig = await mutationUpdateRig.mutate({\n        id: Number(rigForm.original?.id),\n        repackExpiresAt: rigForm.fields.repackExpiresAt.value,\n      });\n      dispatch(actions.forms.rig.setOpen(rig.rig));\n      return setIndex(index + 1);\n    } catch (_) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(rigForm.original?.id)]);\n\n  const onWingloadingNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    // Validate\n    if (!rigForm.fields.canopySize?.value) {\n      dispatch(actions.forms.rig.setFieldError([\"canopySize\", \"You must provide a canopy size\"]));\n      return false;\n    }\n\n    if (!userForm.fields.exitWeight?.value) {\n      dispatch(actions.forms.user.setFieldError([\"exitWeight\", \"You must enter your exit weight\"]));\n      return false;\n    }\n\n    // Update repack expiry date\n    try {\n      const rig = await mutationUpdateRig.mutate({\n        id: Number(rigForm.original?.id),\n        canopySize: rigForm.fields.canopySize.value,\n      });\n      const user = await mutationUpdateUser.mutate({\n        id: Number(userForm.original?.id),\n        exitWeight: Number(userForm.fields.exitWeight?.value),\n      });\n      \n      setIndex(index + 1);\n    } catch (e) {\n      return false;\n    }    \n  }, [JSON.stringify(rigForm.fields), JSON.stringify(userForm.fields), rigForm.original?.id, dispatch]);\n\n  \n\n  return (\n    <Portal>\n      <Modal\n        visible={state.open}\n        dismissable={false}\n        style={styles.modal}\n        contentContainerStyle={{ height: \"100%\" }}\n      >\n\n          <Wizard>\n            <FederationStep\n              backButtonLabel=\"Cancel\"\n              nextButtonLabel=\"Next\"\n              onBack={() => {\n                dispatch(actions.forms.userWizard.setOpen(false));\n                dispatch(actions.forms.user.setOpen(false));\n                dispatch(actions.forms.rig.setOpen(false));\n                dispatch(actions.forms.userWizard.reset());\n                dispatch(actions.forms.user.reset());\n                dispatch(actions.forms.rig.reset());\n              }}\n              loading={mutationUpdateUser.loading}\n              onNext={onFederationNext}\n            />\n            <RigStep\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Next\"\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n              onNext={onRigNext}\n            />\n            <ReserveRepackStep\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Next\"\n              loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              onNext={onReserveRepackNext}\n            />\n            <WingloadingStep\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Next\"\n              loading={mutationUpdateUser.loading || mutationUpdateRig.loading || mutationCreateRig.loading}\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              onNext={onWingloadingNext}\n            />\n\n            <WizardCompleteStep\n              title=\"You're all set!\"\n              subtitle=\"You can configure your settings on the profile page\"\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Done\"\n              onBack={(index, setIndex) => {\n                setIndex(index - 1);\n              }}\n              onNext={() => {\n                dispatch(actions.forms.userWizard.setOpen(false));\n                dispatch(actions.forms.user.setOpen(false));\n                dispatch(actions.forms.rig.setOpen(false));\n                dispatch(actions.forms.userWizard.reset());\n                dispatch(actions.forms.user.reset());\n                dispatch(actions.forms.rig.reset());\n              }}\n            />\n          </Wizard>\n      </Modal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    paddingLeft: 0,\n    marginLeft: 0,\n    marginBottom: 0,\n    marginTop: 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    backgroundColor: \"red\",\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\"\n  }\n})\n\nexport default UserWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, TextInput, Title } from \"react-native-paper\";\nimport FederationSelect from \"../../../input/dropdown_select/FederationSelect\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\n\n\nfunction NameAndFederationWizardSceen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Basic information\">\n      <View style={styles.content}>\n        <Card style={styles.card}>\n          <List.Subheader>Name</List.Subheader>\n          <TextInput\n            mode=\"outlined\"\n            error={!!state.fields.name.error}\n            value={state.fields.name.value || \"\"}\n            onChangeText={(newValue) => dispatch(actions.forms.dropzone.setField([\"name\", newValue]))}\n          />\n          <HelperText type=\"error\">\n            { state.fields.name.error || \"\" }\n          </HelperText>\n        </Card>\n        <Card style={styles.card}>\n          <FederationSelect\n            value={state.fields.federation.value}\n            onSelect={(value) => dispatch(actions.forms.dropzone.setField([\"federation\", value]))}\n            required\n          />\n          <HelperText type={!!state.fields.federation.error ? \"error\" : \"info\"}>\n            { state.fields.federation.error || \"\" }\n          </HelperText>\n        </Card>\n\n        \n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n    backgroundColor: \"transparent\"\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 100,\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  card: {\n    padding: 16,\n    marginVertical: 16,\n    width: \"100%\"\n  } \n});\n\nexport default NameAndFederationWizardSceen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card, HelperText, List, TextInput } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { debounce } from \"lodash\";\n\nfunction AircraftWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.plane);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Aircraft\">\n\n      <View style={styles.content}>\n      <Card style={styles.card}>\n        <List.Subheader>Information</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Name\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"name\", newValue]))}\n        />\n        <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n          { state.fields.name.error || \"\" }\n        </HelperText>\n      \n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          label=\"Registration\"\n          error={!!state.fields.registration.error}\n          value={state.fields.registration.value}\n          onChangeText={(newValue) => dispatch(actions.forms.plane.setField([\"registration\", newValue]))}\n        />\n        <HelperText type={!!state.fields.registration.error ? \"error\" : \"info\"}>\n          { state.fields.registration.error || \"\" }\n        </HelperText>\n      </Card>\n\n      <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Minimum slots</List.Subheader>\n            <Text style={styles.cardValue}>{(state.fields.minSlots.value || 0)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={0}\n              maximumValue={state.fields.maxSlots.value || 34}\n              step={1}\n              value={state.fields.minSlots.value || 0}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={debounce((value) =>\n                dispatch(actions.forms.plane.setField([\"minSlots\", value])),\n                20\n              )}\n            />\n          </View>\n            \n          <HelperText type={state.fields.minSlots?.error ? \"error\" : \"info\" }>\n            {state.fields.minSlots?.error || \"How many slots are required to be filled to dispatch a load with this aircraft\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Max slots</List.Subheader>\n            <Text style={styles.cardValue}>{(state.fields.maxSlots.value || 34)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={2}\n              maximumValue={34}\n              step={1}\n              value={state.fields.maxSlots.value || 16}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onValueChange={debounce((value) =>\n                dispatch(actions.forms.plane.setField([\"maxSlots\", Number(value)])),\n                20\n              )}\n            />\n          </View>\n            \n          <HelperText type={state.fields.maxSlots?.error ? \"error\" : \"info\" }>\n            {state.fields.maxSlots?.error || \"Max available slots on this aircraft\"}\n          </HelperText>\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 4 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 10,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default AircraftWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Card, HelperText, List, Surface, Title, TouchableRipple } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport { PhonePreview, WebPreview } from \"../../../theme_preview\";\nimport ColorPicker from \"../../../input/colorpicker\";\n\nfunction ReserveRepackWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Branding\">\n      <View style={styles.content}>\n\n        <View style={{ flexDirection: \"row\", alignItems: \"flex-end\", justifyContent: \"space-evenly\" }}>\n          <PhonePreview\n            primaryColor={state.fields.primaryColor.value}\n            secondaryColor={state.fields.secondaryColor.value}\n          />\n\n          <WebPreview\n            primaryColor={state.fields.primaryColor.value}\n            secondaryColor={state.fields.secondaryColor.value}\n          />\n        </View>\n          \n        <ColorPicker\n          title=\"Primary color\"\n          helperText=\"Primary color is used for elements like the title bar and the tab bar\"\n          error={state.fields.primaryColor.error}\n          onChange={(color) => dispatch(actions.forms.dropzone.setField([\"primaryColor\", color]))}\n          value={state.fields.primaryColor.value}\n        />\n\n        <ColorPicker\n          title=\"Accent color\"\n          helperText=\"Accent color is used for highlights, like buttons and loading bars\"\n          error={state.fields.secondaryColor.error}\n          onChange={(color) => dispatch(actions.forms.dropzone.setField([\"secondaryColor\", color]))}\n          value={state.fields.secondaryColor.value}\n        />\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  \n\n  colorBox: {\n    height: 25,\n    width: 25,\n    margin: 5,\n  }\n});\n\nexport default ReserveRepackWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card } from \"react-native-paper\";\nimport { capitalize } from \"lodash\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport { Permission, Query } from \"../../../../graphql/schema.d\";\nimport PermissionListItem from \"../../../permissions/PermissionListItem\";\nimport gql from \"graphql-tag\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst QUERY_DROPZONE_PERMISSIONS = gql`\n  query QueryDropzonePermissions(\n    $dropzoneId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      roles {\n        id\n        name\n        permissions\n      }\n    }\n  }\n`;\n\ninterface IPermissionWizardScreen extends IWizardScreenProps {\n  permission: Permission,\n  title: string;\n}\n\n\nfunction PermissionWizardScreen(props: IPermissionWizardScreen) {\n  const { permission, ...rest } = props;\n  const dropzoneForm = useAppSelector(state => state.forms.dropzone);\n  const [queryRoles, { data, loading, called }] = useLazyQuery<Query>(QUERY_DROPZONE_PERMISSIONS);\n\n  React.useEffect(() => {\n    if (dropzoneForm.original?.id) {\n      queryRoles({\n        variables: {\n          dropzoneId: Number(dropzoneForm.original.id)\n        }\n      });\n    }\n  }, [dropzoneForm.original]);\n\n  return (\n    <WizardScreen style={styles.container} {...rest}>\n\n      <View style={styles.content}>\n        {\n          !(called && !loading && data?.dropzone?.roles?.length) ? null : (\n            <Card>\n              <Card.Content style={{ alignItems: \"center\", justifyContent: \"center\" }}>\n                {\n                  data?.dropzone?.roles?.map((role) =>\n                    <PermissionListItem\n                      permissionName={permission}\n                      role={role}\n                      title={capitalize(role.name.replace(/_/, \" \"))}\n                    />\n                  )\n                }\n              </Card.Content>\n            </Card>\n          )\n        }\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n    marginBottom: 16,\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 50,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default PermissionWizardScreen;","import * as React from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Card, HelperText, List, Menu, Paragraph, TextInput } from \"react-native-paper\";\nimport WizardScreen, { IWizardScreenProps } from \"../../../wizard/WizardScreen\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../../redux\";\nimport Slider from '@react-native-community/slider';\nimport { debounce } from \"lodash\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\n\nfunction TicketTypeWizardScreen(props: IWizardScreenProps) {\n  const state = useAppSelector(state => state.forms.ticketType);\n  const dispatch = useAppDispatch();\n  const [altitudeMenuOpen, setAltitudeMenuOpen] = React.useState(false);\n  const [price, setPrice] = React.useState(0);\n\n  return (\n    <WizardScreen style={styles.container} {...props} title=\"Tickets\">\n      <Paragraph style={styles.paragraph}>You can add more tickets later under Settings</Paragraph>\n\n      <View style={styles.content}>\n      <Card style={styles.card}>\n        <List.Subheader>Name</List.Subheader>\n        <TextInput\n          style={styles.field}\n          mode=\"outlined\"\n          error={!!state.fields.name.error}\n          value={state.fields.name.value}\n          onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"name\", newValue]))}\n        />\n        <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n          { state.fields.name.error || \"\" }\n        </HelperText>\n      </Card>\n\n      <Card style={styles.card} elevation={3}>\n          <View style={styles.cardTitle}>\n            <List.Subheader>Price</List.Subheader>\n            <Text style={styles.cardValue}>${(price || 0)}</Text>\n          </View>\n            \n          <View style={styles.slider}>\n            <Slider\n              style={styles.sliderControl}\n              minimumValue={0}\n              maximumValue={500}\n              step={1}\n              value={price}\n              minimumTrackTintColor=\"#FF1414\"\n              maximumTrackTintColor=\"#000000\"\n              onSlidingComplete={() => dispatch(actions.forms.ticketType.setField([\"cost\", price]))}\n              onValueChange={setPrice}\n            />\n          </View>\n            \n          <HelperText type={state.fields.cost?.error ? \"error\" : \"info\" }>\n            {state.fields.cost?.error || \"How many slots are required to be filled to dispatch a load with this aircraft\"}\n          </HelperText>\n        </Card>\n\n        <Card style={styles.card} elevation={3}>\n          \n          <Menu\n            onDismiss={() => setAltitudeMenuOpen(false)}\n            visible={altitudeMenuOpen}\n            contentStyle={{ width: 300 }}\n            anchor={\n              <TouchableOpacity onPress={() => setAltitudeMenuOpen(true)}>\n                <View style={styles.cardTitle}>\n                  <List.Subheader>Altitude</List.Subheader>\n                  <Text style={styles.cardValue}>\n                    {\n                      state.fields.altitude.value && [4000, 14000].includes(state.fields.altitude.value) ?\n                      {\n                        \"14000\": \"Height\",\n                        \"4000\": \"Hop n Pop\",\n                      }[state.fields.altitude.value.toString()] :\n                      \"Custom\"\n                    }\n                  </Text>\n                </View>\n              </TouchableOpacity>\n            }>\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 4000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Hop n Pop\"\n                right={() => <List.Icon icon=\"parachute\" />}\n              />\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 14000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Height\"\n                right={() => <List.Icon icon=\"airplane-takeoff\" />}\n              />\n              <List.Item\n                onPress={() => {\n                  dispatch(actions.forms.ticketType.setField([\"altitude\", 7000]));\n                  setAltitudeMenuOpen(false);\n                }}\n                title=\"Other\"\n                right={() => <List.Icon icon=\"parachute\" />}\n              />\n          </Menu>\n\n          {\n            (!state.fields.altitude.value || ![4000, 14000].includes(state.fields.altitude.value)) && (\n              <TextInput\n                style={styles.field}\n                mode=\"outlined\"\n                label=\"Custom altitude\"\n                error={!!state.fields.altitude.error}\n                value={state.fields.altitude?.value?.toString()}\n                onChangeText={(newValue) => dispatch(actions.forms.ticketType.setField([\"altitude\", Number(newValue)]))}\n              />\n            )\n          }\n        </Card>\n      </View>\n    </WizardScreen>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 48,\n    alignItems: \"center\",\n  },\n  content: {\n    width: \"100%\",\n    justifyContent: \"space-around\",\n    flexDirection: \"column\",\n  },\n  card: { padding: 8, marginVertical: 16 },\n  cardTitle: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  cardValue: {\n    fontWeight: \"bold\",\n    marginRight: 8,\n    fontSize: 16,\n    alignSelf: \"center\",\n  },\n  title: {\n    color: \"white\",\n    marginBottom: 8,\n    fontWeight: \"bold\",\n    fontSize: 25,\n    textAlign: \"center\",\n  },\n  paragraph: {\n    color: \"white\",\n    marginBottom: 8,\n    fontWeight: \"bold\",\n    // fontSize: 25,\n    textAlign: \"center\",\n  },\n  field: {\n    marginBottom: 8,\n    marginHorizontal: 16,\n  },\n  slider: {\n    flexDirection: \"column\",\n  },\n  sliderControl: { width: \"100%\", height: 40 },\n  wingLoading: {\n    alignSelf: \"center\",\n  },\n  wingLoadingCardLeft: {\n    width: \"30%\",\n  },\n  wingLoadingCardRight: {\n    paddingLeft: 16,\n    width: \"70%\",\n  },\n});\n\nexport default TicketTypeWizardScreen;","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateDropzoneArgs, UpdateDropzonePayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_DROPZONE = gql`\n  mutation UpdateDropzone(\n    $id: Int!,\n    $name: String!,\n    $banner: String,\n    $federationId: Int!\n    $primaryColor: String\n    $secondaryColor: String\n    $isCreditSystemEnabled: Boolean,\n    $isPublic: Boolean\n  ){\n    updateDropzone(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        banner: $banner,\n        federationId: $federationId\n        primaryColor: $primaryColor\n        secondaryColor: $secondaryColor\n        isCreditSystemEnabled: $isCreditSystemEnabled\n        isPublic: $isPublic\n      }\n    }) {\n      dropzone {\n        id\n        name\n        banner\n        primaryColor\n        secondaryColor,\n        isCreditSystemEnabled\n\n        planes {\n          id\n          name\n        }\n\n        federation {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateDropzoneArgs[\"input\"][\"attributes\"], UpdateDropzonePayload>(\n  MUTATION_UPDATE_DROPZONE, {\n    getPayload: (result) => result.updateDropzone,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation, isRequired } from \"../createMutation\";\nimport { CreatePlanePayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_PLANE = gql`\n  mutation CreatePlane(\n    $name: String!,\n    $registration: String!,\n    $dropzoneId: Int!\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    createPlane(input: {\n      attributes: {\n        name: $name,\n        registration: $registration,\n        dropzoneId: $dropzoneId\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{\n  name: string,\n  registration: string,\n  dropzoneId: number\n  minSlots: number\n  maxSlots: number\n  hours?: number\n  nextMaintenanceHours?: number\n}, CreatePlanePayload>(\n  MUTATION_CREATE_PLANE, {\n    getPayload: (result) => result.createPlane,\n    fieldErrorMap: {\n      dropzone: \"dropzoneId\",\n    },\n    validates: {\n      name: [\n        isRequired(\"Name is required\"),\n      ],\n      registration: [\n        isRequired(\"Registration is required\"),\n      ],\n    }\n  }\n)","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdatePlaneArgs, UpdatePlanePayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_PLANE = gql`\n  mutation UpdatePlane(\n    $id: Int!,\n    $name: String!,\n    $registration: String!,\n    $minSlots: Int!\n    $maxSlots: Int!\n    $hours: Int\n    $nextMaintenanceHours: Int\n  ){\n    updatePlane(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        registration: $registration,\n        minSlots: $minSlots\n        maxSlots: $maxSlots\n        hours: $hours\n        nextMaintenanceHours: $nextMaintenanceHours\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      plane {\n        id\n        name\n        registration\n        minSlots\n        maxSlots\n        hours\n        nextMaintenanceHours\n\n        dropzone {\n          id\n          name\n          planes {\n            id\n            name\n            registration\n            minSlots\n            maxSlots\n            hours\n            nextMaintenanceHours\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdatePlaneArgs[\"input\"][\"attributes\"], UpdatePlanePayload>(\n  MUTATION_UPDATE_PLANE, {\n    getPayload: (result) => result.updatePlane,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationCreateTicketTypeArgs, CreateTicketPayload } from \"../schema\";\n\n\nconst MUTATION_CREATE_TICKET_TYPE = gql`\n  mutation CreateTicketType(\n    $name: String,\n    $cost: Float,\n    $dropzoneId: Int!\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    createTicketType(input: {\n      attributes: {\n        name: $name,\n        cost: $cost,\n        dropzoneId: $dropzoneId\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\nexport default createMutation<MutationCreateTicketTypeArgs[\"input\"][\"attributes\"], CreateTicketPayload>(\n  MUTATION_CREATE_TICKET_TYPE, {\n    getPayload: (result) => result.createTicketType,\n    fieldErrorMap: {\n    },\n  }\n);","import gql from \"graphql-tag\";\nimport { createMutation } from \"../createMutation\";\nimport { MutationUpdateTicketTypeArgs, UpdateTicketPayload } from \"../schema\";\n\n\nconst MUTATION_UPDATE_TICKET_TYPE = gql`\n  mutation UpdateTicketType(\n    $id: Int!,\n    $name: String,\n    $cost: Float,\n    $altitude: Int\n    $allowManifestingSelf: Boolean\n    $isTandem: Boolean\n  ){\n    updateTicketType(input: {\n      id: $id\n      attributes: {\n        name: $name,\n        cost: $cost,\n        altitude: $altitude\n        allowManifestingSelf: $allowManifestingSelf\n        isTandem: $isTandem\n      }\n    }) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      ticketType {\n        id\n        name\n        altitude\n        cost\n        allowManifestingSelf\n        extras {\n          id\n          name\n          cost\n        }\n\n        dropzone {\n          id\n\n          ticketTypes {\n            id\n            name\n            altitude\n            cost\n            allowManifestingSelf\n            extras {\n              id\n              name\n              cost\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nexport default createMutation<{ id: number } & MutationUpdateTicketTypeArgs[\"input\"][\"attributes\"], UpdateTicketPayload>(\n  MUTATION_UPDATE_TICKET_TYPE, {\n    getPayload: (result) => result.updateTicketType,\n    fieldErrorMap: {\n      \n    },\n  }\n);","import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { Portal, Modal } from \"react-native-paper\";\nimport Wizard from \"../../wizard/Wizard\";\nimport WizardCompleteStep from \"../../wizard/WizardCompleteStep\";\nimport NameAndFederationStep from \"./steps/Name\";\nimport AircraftStep from \"./steps/Aircraft\";\nimport ThemingStep from \"./steps/Theming\";\nimport PermissionStep from \"./steps/Permissions\";\nimport TicketTypeStep from \"./steps/TicketType\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport useMutationCreateDropzone from \"../../../graphql/hooks/useMutationCreateDropzone\";\nimport useMutationUpdateDropzone from \"../../../graphql/hooks/useMutationUpdateDropzone\";\nimport useMutationCreatePlane from \"../../../graphql/hooks/useMutationCreatePlane\";\nimport useMutationUpdatePlane from \"../../../graphql/hooks/useMutationUpdatePlane\";\nimport useMutationCreateTicketType from \"../../../graphql/hooks/useMutationCreateTicketType\";\nimport useMutationUpdateTicketType from \"../../../graphql/hooks/useMutationUpdateTicketType\";\nimport { Permission } from \"../../../graphql/schema.d\";\n\n\nfunction DropzoneWizardScreen() {\n  const state = useAppSelector(state => state.forms.dropzoneWizard);\n  const aircraft = useAppSelector(state => state.forms.plane);\n  const ticket = useAppSelector(state => state.forms.ticketType);\n  const dropzone = useAppSelector(state => state.forms.dropzone);\n  const dispatch = useAppDispatch();\n\n  const mutationCreateDropzone = useMutationCreateDropzone({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as any, value])),\n  });\n  const mutationUpdateDropzone = useMutationUpdateDropzone({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.dropzone.setFieldError([field as any, value])),\n  });\n  const mutationCreatePlane = useMutationCreatePlane({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.plane.setFieldError([field as any, value])),\n  });\n  const mutationUpdatePlane = useMutationUpdatePlane({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.plane.setFieldError([field as any, value])),\n  });\n  const mutationCreateTicketType = useMutationCreateTicketType({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.ticketType.setFieldError([field as any, value])),\n  });\n  const mutationUpdateTicketType = useMutationUpdateTicketType({\n    onError: (error) => dispatch(actions.notifications.showSnackbar({ message: error, variant: \"error\" })),\n    onSuccess: (payload) => console.log(payload),\n    onFieldError: (field, value) =>\n      dispatch(actions.forms.ticketType.setFieldError([field as any, value])),\n  });\n\n\n  const onBasicInfoNext = React.useCallback(async (index: number, setIndex: (idx: number) => void): Promise<void> => {\n    if (!dropzone.fields.name.value) {\n      console.log(\"Set name error\");\n      dispatch(actions.forms.dropzone.setFieldError([\"name\", \"Your dropzone must have a name\"]));\n      console.log(dropzone.fields.name);\n      return;\n    } \n    if (!dropzone.fields.federation.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"federation\", \"Your dropzone must have an associated organization\"]));\n      return;\n    }\n\n    setIndex(index + 1);\n  }, [JSON.stringify(dropzone.fields), dropzone.original]);\n\n  const onThemingNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    if (!dropzone.fields.primaryColor.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"primaryColor\", \"Please pick a primary color\"]));\n      return;\n    }\n    if (!dropzone.fields.secondaryColor.value) {\n      dispatch(actions.forms.dropzone.setFieldError([\"secondaryColor\", \"Please pick an accent color\"]));\n      return;\n    }\n\n    // Create or update dropzone\n    const result = !dropzone.original?.id\n      ? await mutationCreateDropzone.mutate({\n          federationId: Number(dropzone.fields.federation.value?.id),\n          name: dropzone.fields.name.value,\n          banner: \"\",\n          primaryColor: dropzone.fields.primaryColor.value,\n          secondaryColor: dropzone.fields.secondaryColor.value,\n        })\n      : await mutationUpdateDropzone.mutate({\n          id: Number(dropzone.original.id),\n          federationId: Number(dropzone.fields.federation.value?.id),\n          name: dropzone.fields.name.value,\n          primaryColor: dropzone.fields.primaryColor.value,\n          secondaryColor: dropzone.fields.secondaryColor.value,\n          banner: \"\",\n        });\n\n\n      if (!result.errors?.length && result.dropzone?.id) {\n        dispatch(actions.forms.dropzone.setOpen(result.dropzone));\n        dispatch(actions.global.setDropzone(result.dropzone));\n        dispatch(actions.global.setPrimaryColor(result.dropzone.primaryColor));\n        dispatch(actions.global.setAccentColor(result.dropzone.secondaryColor));\n        return setIndex(index + 1);\n      }\n      return false;\n\n  }, [JSON.stringify(dropzone.fields), dropzone.original]);\n\n  const onAircraftNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    if (!aircraft.fields.name.value) {\n      dispatch(actions.forms.plane.setFieldError([\"name\", \"You must name your aircraft\"]));\n      return;\n    }\n    if (!aircraft.fields.registration.value) {\n      dispatch(actions.forms.plane.setFieldError([\"registration\", \"Please provide aircraft registration\"]));\n      return;\n    }\n\n    // Create or update dropzone\n    const result = !aircraft.original?.id\n      ? await mutationCreatePlane.mutate({\n          dropzoneId: Number(dropzone.original.id),\n          name: aircraft.fields.name.value,\n          registration: aircraft.fields.registration.value,\n          minSlots: aircraft.fields.minSlots.value,\n          maxSlots: aircraft.fields.maxSlots.value,\n        })\n      : await mutationUpdatePlane.mutate({\n          id: Number(aircraft.original.id),\n          name: aircraft.fields.name.value,\n          registration: aircraft.fields.registration.value,\n          minSlots: aircraft.fields.minSlots.value,\n          maxSlots: aircraft.fields.maxSlots.value,\n        });\n\n\n      if (!result.errors?.length && result.plane?.id) {\n        dispatch(actions.forms.plane.setOpen(result.plane));\n        setIndex(index + 1);\n      }\n      return false;\n\n  }, [JSON.stringify(aircraft.fields), dropzone.original, JSON.stringify(aircraft.original)]);\n\n\n  const onTicketTypeNext = React.useCallback(async (index: number, setIndex: (idx: number) => void) => {\n    if (!ticket.fields.name.value) {\n      dispatch(actions.forms.ticketType.setFieldError([\"name\", \"You must name your ticket\"]));\n      return;\n    }\n\n    if (!ticket.fields.cost.value) {\n      dispatch(actions.forms.ticketType.setFieldError([\"cost\", \"Tickets must have a price\"]));\n      return;\n    }\n\n    // Create or update dropzone\n    const result = !ticket.original?.id\n      ? await mutationCreateTicketType.mutate({\n          dropzoneId: Number(dropzone.original.id),\n          name: ticket.fields.name.value,\n          cost: ticket.fields.cost.value,\n          altitude: ticket.fields.altitude.value,\n          isTandem: false,\n          allowManifestingSelf: true,\n        })\n      : await mutationUpdateTicketType.mutate({\n          id: Number(ticket.original.id),\n          name: ticket.fields.name.value,\n          cost: ticket.fields.cost.value,\n          altitude: ticket.fields.altitude.value,\n          isTandem: false,\n          allowManifestingSelf: true,\n        });\n\n\n      if (!result.errors?.length && result.ticketType?.id) {\n        dispatch(actions.forms.ticketType.setOpen(result.ticketType));\n        setIndex(index + 1)\n        return;\n      }\n      return false;\n\n  }, [JSON.stringify(ticket.fields), dropzone.original, JSON.stringify(ticket.original)]);\n  \n\n  return (\n    <Portal>\n      <Modal\n        visible={state.open}\n        dismissable={false}\n        style={styles.modal}\n        contentContainerStyle={{ height: \"100%\" }}\n      >\n          <Wizard>\n            \n            <NameAndFederationStep\n              onBack={() => {\n                dispatch(actions.forms.dropzoneWizard.setOpen(false));\n                dispatch(actions.forms.dropzoneWizard.reset());\n                dispatch(actions.forms.ticketType.setOpen(false));\n                dispatch(actions.forms.plane.setOpen(false));\n                dispatch(actions.forms.dropzone.setOpen(false));\n                dispatch(actions.forms.ticketType.reset());\n                dispatch(actions.forms.plane.reset());\n                dispatch(actions.forms.dropzone.reset());\n              }}\n              backButtonLabel=\"Cancel\"\n              nextButtonLabel=\"Next\"\n              onNext={onBasicInfoNext}\n            />\n            <ThemingStep\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={onThemingNext}\n              loading={\n                mutationCreateDropzone.loading ||\n                mutationUpdateDropzone.loading\n              }\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <AircraftStep\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={onAircraftNext}\n              loading={\n                mutationCreatePlane.loading ||\n                mutationUpdatePlane.loading\n              }\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <TicketTypeStep\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={onTicketTypeNext}\n              loading={\n                mutationCreateTicketType.loading ||\n                mutationUpdateTicketType.loading\n              }\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <PermissionStep\n              title=\"Who can manifest?\"\n              permission={Permission.CreateSlot}\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={(idx, setIndex) => setIndex(idx + 1)}\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"  \n            />\n            <PermissionStep\n              title=\"Manifest other people?\"\n              permission={Permission.CreateUserSlot}\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={(idx, setIndex) => {\n                setIndex(idx + 1);\n              }}\n              nextButtonLabel=\"Next\"\n              backButtonLabel=\"Back\"\n            />\n            <WizardCompleteStep\n              title=\"Setup complete\"\n              subtitle=\"You can configure settings under the Settings screen\"\n              backButtonLabel=\"Back\"\n              nextButtonLabel=\"Done\"\n              onBack={(idx, setIndex) => setIndex(idx - 1)}\n              onNext={() => {\n                dispatch(\n                  actions.global.setDropzone(dropzone.original)\n                );\n                if (dropzone.fields.primaryColor.value) {\n                  dispatch(\n                    actions.global.setPrimaryColor(dropzone.fields.primaryColor.value)\n                  );\n                }\n                if (dropzone.fields.secondaryColor.value) {\n                  dispatch(\n                    actions.global.setAccentColor(dropzone.fields.secondaryColor.value)\n                  );\n                }\n                dispatch(\n                  actions.global.setDropzone(dropzone.original)\n                );\n                \n                dispatch(actions.forms.dropzoneWizard.setOpen(false));\n                dispatch(actions.forms.dropzoneWizard.reset());\n                dispatch(actions.forms.ticketType.setOpen(false));\n                dispatch(actions.forms.plane.setOpen(false));\n                dispatch(actions.forms.dropzone.setOpen(false));\n                dispatch(actions.forms.ticketType.reset());\n                dispatch(actions.forms.plane.reset());\n                dispatch(actions.forms.dropzone.reset());\n\n                // Set complete-flag to force navigation from dropzone screen\n                dispatch(actions.forms.dropzoneWizard.complete());\n              }}\n            />\n          </Wizard>\n      </Modal>\n    </Portal>\n  );\n}\n\nconst styles = StyleSheet.create({\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    paddingLeft: 0,\n    marginLeft: 0,\n    marginBottom: 0,\n    marginTop: 0,\n    paddingTop: 0,\n    paddingRight: 0,\n    paddingBottom: 0,\n    backgroundColor: \"red\",\n    display: \"flex\",\n    width: \"100%\",\n    height: \"100%\",\n    flex: 1,\n    alignItems: \"center\",\n  }\n})\n\nexport default DropzoneWizardScreen;","import 'react-native-gesture-handler';\nimport { StatusBar } from 'expo-status-bar';\nimport Constants from \"expo-constants\";\nimport * as Notifications from 'expo-notifications';\nimport * as React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider as MaterialProvider, ActivityIndicator, ProgressBar, Portal } from \"react-native-paper\"\nimport { Linking, Platform, View } from 'react-native';\nimport { NavigationContainer, useLinking } from '@react-navigation/native';\nimport URI from \"urijs\";\n\nimport Apollo from \"./graphql/Apollo\";\nimport { store, persistor, useAppSelector, useAppDispatch } from \"./redux/store\";\n\nimport useCachedResources from './hooks/useCachedResources';\nimport NotificationArea from './components/notifications/Notifications';\nimport LinkingConfiguration from './navigation/Routes';\nimport RootNavigator from \"./navigation/RootNavigator\";\nimport { actions } from './redux';\nimport UserWizardScreen from './components/dialogs/UserWizard/UserWizardScreen';\nimport DropzoneWizardScreen from './components/dialogs/DropzoneWizard/DropzoneWizard';\n\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\n\nasync function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Notifications.requestPermissionsAsync();\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      console.warn('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    console.warn('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}\n\nfunction Content() {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const notificationListener = React.useRef<ReturnType<typeof Notifications.addNotificationReceivedListener>>();\n  const responseListener = React.useRef<ReturnType<typeof Notifications.addNotificationResponseReceivedListener>>();\n\n  const onOutsideLink = (link) => {\n    console.log(link);\n    const uri = URI(link.url);\n    const intendedRoute = uri.path();\n    console.log(intendedRoute);\n  };\n\n  React.useEffect(() => {\n    registerForPushNotificationsAsync().then(token => dispatch(actions.global.setExpoPushToken(token)));\n\n    // This listener is fired whenever a notification is received while the app is foregrounded\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\n      dispatch(actions.notifications.showSnackbar({ message: notification.request.content.body, variant: \"warning\" }));\n    });\n\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\n      console.log(response);\n    });\n\n    Linking.addEventListener(\"url\", onOutsideLink);\n\n    return () => {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n      Linking.removeEventListener(\"url\", onOutsideLink);\n    };\n  }, []);\n\n  return (\n    <React.Suspense\n      fallback={\n        <View style={{ flex: 1, flexGrow: 1 }}>\n          <ProgressBar indeterminate color={state?.theme?.colors?.accent} visible />\n        </View>\n      }\n    >\n      <Apollo>\n        <MaterialProvider theme={state.theme}>\n          <SafeAreaProvider>\n            <NavigationContainer\n              linking={LinkingConfiguration}\n              theme={state.theme}>\n              <RootNavigator />\n\n            </NavigationContainer>\n\n            <StatusBar />\n            <UserWizardScreen />\n            <DropzoneWizardScreen />\n            <NotificationArea />\n          </SafeAreaProvider>\n        </MaterialProvider>\n      </Apollo>\n    </React.Suspense>\n  )\n}\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <Provider store={store}>\n        <PersistGate\n          persistor={persistor}\n          loading={\n            <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n              <ActivityIndicator size=\"large\" />\n            </View>\n        }>\n          <Content />\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\nimport { useFonts, Inter_400Regular, Inter_500Medium, Inter_700Bold } from \"@expo-google-fonts/inter\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  const [fontsLoaded] = Font.useFonts({\n    Inter_400Regular,\n    Inter_500Medium,\n    Inter_700Bold\n  });\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        // console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete && fontsLoaded;\n}\n","import { DocumentNode, useMutation } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { FieldError, Mutation } from \"./schema\";\n\nexport interface IAppMutation<Payload, InputType> {\n  loading: boolean;\n  mutate(variables: InputType): Promise<Maybe<Payload>>;\n}\n\nexport interface IAppMutationProps<Payload, InputType> {\n  onSuccess(payload: Payload): void;\n  onError?(message: string): void;\n  onFieldError?(field: string, value: string): void;\n}\n\nexport interface IFieldValidator<InputType> {\n  pattern?: RegExp;\n  callback?: (fields: InputType) => boolean,\n  message: string;\n}\n\nexport function isRequired(message: string) {\n  return {\n    message,\n    pattern: /.{1,}/\n  }\n}\n\nexport function isEmail(message: string) {\n  return {\n    message, \n    pattern: new RegExp(/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/),\n  }\n}\n\n\nexport function isNumeric(message: string) {\n  return {\n    message,\n    pattern: /^\\d+/\n  }\n}\n\nexport function validates<T extends {}>(message: string, callback: (inputVariables: T) => boolean) {\n  return {\n    message,\n    callback,\n  }\n}\n\nexport function createMutation<InputType extends {}, Payload extends { fieldErrors?: Maybe<FieldError[]>, errors?: Maybe<string[]> }>(\n  mutation: DocumentNode,\n  options: {\n    // Get payload from root field in mutation\n    getPayload: (rootField: Mutation) => Maybe<Payload>,\n    fieldErrorMap?: {\n      // Map serverFieldName: tsFieldName\n      [k: string]: keyof InputType\n    },\n\n    // All validators patterns must be truthy before\n    // mutation will be executed, or onFieldError will fire\n    validates?: {\n      [Key in keyof InputType]?: IFieldValidator<InputType>[];\n    }\n  },\n) {\n  const { getPayload, fieldErrorMap, validates} = options;\n\n  return function useAppMutation(opts: IAppMutationProps<Payload, InputType>): IAppMutation<Payload, InputType> {\n    const { onFieldError, onSuccess, onError } = opts;\n    \n    const [mutate, { data, loading, error}] = useMutation(mutation);\n\n\n    const onMutate = React.useCallback(async (variables: InputType): Promise<Maybe<Payload>> => {\n      \n\n      function validate() {\n        let hasErrors = false;\n\n        if (validates) {\n          Object.keys(variables).forEach((x) => {\n            const variable = x as keyof InputType;\n  \n            if (variable in (options.validates || {})) {\n              validates[variable]?.forEach((validator) => {\n                if (validator.pattern) {\n                  if (!validator.pattern.test(`${variables[variable]}`)) {\n                    hasErrors = true;\n                    \n                    if (onFieldError) {\n                      onFieldError(variable as string, validator.message);\n                    }\n                  }\n                } else if (validator.callback && !validator.callback(variables)) {\n                  hasErrors = true;\n                  if (onFieldError) {\n                    onFieldError(variable as string, validator.message);\n                  }\n                }\n                \n              });\n            }\n          })\n        }\n\n        return !hasErrors;\n      }\n\n      if (!validate()) {\n        return;\n      }\n      try {\n        const result = await mutate({\n          variables\n        });\n\n        const payload = getPayload(result.data);\n  \n        payload?.fieldErrors?.map(({ field, message }) => {\n          const fieldName = field in (fieldErrorMap || {}) ? options!.fieldErrorMap![field] : field;\n\n          if (opts.onFieldError) {\n            opts.onFieldError(`${fieldName}`, message);\n          }\n        });\n        \n        if (payload?.errors?.length && onError) {\n          payload.errors?.map((message) => onError(message));\n          return;\n        }\n        if (!payload?.fieldErrors?.length) {\n          onSuccess(payload!);\n        }\n  \n        return payload;\n      } catch(error) {\n        if (onError) {\n          onError(error.message);\n        }\n      }\n      \n      return;\n    }, [onFieldError, onError, onSuccess,, mutate, getPayload, JSON.stringify(data)]);\n\n    return {\n      loading,\n      mutate: onMutate,\n    }    \n  }\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","export const tintColorLight = '#2f95dc';\nexport const tintColorDark = '#fff';\nexport const successColor = \"#00C851\";\nexport const errorColor = \"#ff4444\";\nexport const warningColor = \"#FF8800\";\nexport const infoColor = \"#0099CC\";\n\nexport const primaryColor = \"#FF1414\";\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n    success: successColor,\n    error: errorColor,\n    warning: warningColor,\n    info: infoColor,\n  },\n};\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type AnyResource = {};\n\n/** Autogenerated input type of CreateDropzone */\nexport type CreateDropzoneInput = {\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateDropzone */\nexport type CreateDropzonePayload = {\n  __typename?: 'CreateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateExtra */\nexport type CreateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateExtra */\nexport type CreateExtraPayload = {\n  __typename?: 'CreateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of CreateLoad */\nexport type CreateLoadInput = {\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateLoad */\nexport type CreateLoadPayload = {\n  __typename?: 'CreateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreatePlane */\nexport type CreatePlaneInput = {\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreatePlane */\nexport type CreatePlanePayload = {\n  __typename?: 'CreatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of CreateRig */\nexport type CreateRigInput = {\n  attributes: RigInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of CreateRigInspection */\nexport type CreateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateRigInspection */\nexport type CreateRigInspectionPayload = {\n  __typename?: 'CreateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of CreateRig */\nexport type CreateRigPayload = {\n  __typename?: 'CreateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of CreateSlot */\nexport type CreateSlotInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlot */\nexport type CreateSlotPayload = {\n  __typename?: 'CreateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of CreateSlots */\nexport type CreateSlotsInput = {\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateSlots */\nexport type CreateSlotsPayload = {\n  __typename?: 'CreateSlotsPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of CreateTicket */\nexport type CreateTicketInput = {\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTicket */\nexport type CreateTicketPayload = {\n  __typename?: 'CreateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of CreateTransaction */\nexport type CreateTransactionInput = {\n  attributes: TransactionInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateTransaction */\nexport type CreateTransactionPayload = {\n  __typename?: 'CreateTransactionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  transaction?: Maybe<Transaction>;\n};\n\nexport type Credential = {\n  __typename?: 'Credential';\n  accessToken: Scalars['String'];\n  client: Scalars['String'];\n  expiry: Scalars['Int'];\n  tokenType: Scalars['String'];\n  uid: Scalars['String'];\n};\n\n/** Autogenerated input type of DeleteDropzone */\nexport type DeleteDropzoneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteDropzone */\nexport type DeleteDropzonePayload = {\n  __typename?: 'DeleteDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n};\n\n/** Autogenerated input type of DeleteLoad */\nexport type DeleteLoadInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteLoad */\nexport type DeleteLoadPayload = {\n  __typename?: 'DeleteLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of DeletePlane */\nexport type DeletePlaneInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeletePlane */\nexport type DeletePlanePayload = {\n  __typename?: 'DeletePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of DeleteSlot */\nexport type DeleteSlotInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteSlot */\nexport type DeleteSlotPayload = {\n  __typename?: 'DeleteSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of DeleteTicket */\nexport type DeleteTicketInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of DeleteTicket */\nexport type DeleteTicketPayload = {\n  __typename?: 'DeleteTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\nexport type Dropzone = AnyResource & {\n  __typename?: 'Dropzone';\n  allowedJumpTypes: Array<JumpType>;\n  banner?: Maybe<Scalars['String']>;\n  createdAt: Scalars['Int'];\n  currentUser: DropzoneUser;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  dropzoneUsers: DropzoneUserConnection;\n  extras: Array<Extra>;\n  federation: Federation;\n  id: Scalars['ID'];\n  isCreditSystemEnabled: Scalars['Boolean'];\n  isPublic: Scalars['Boolean'];\n  loads: LoadConnection;\n  /** Get the master log entry for a given date */\n  masterLog: MasterLog;\n  name?: Maybe<Scalars['String']>;\n  planes: Array<Plane>;\n  primaryColor?: Maybe<Scalars['String']>;\n  rigInspectionTemplate?: Maybe<FormTemplate>;\n  /** Get rigs for dropzone */\n  rigs?: Maybe<Array<Rig>>;\n  roles: Array<UserRole>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n  userRoles: Array<UserRole>;\n};\n\n\nexport type DropzoneAllowedJumpTypesArgs = {\n  userId: Array<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUserArgs = {\n  id?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneDropzoneUsersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  permissions?: Maybe<Array<Permission>>;\n  search?: Maybe<Scalars['String']>;\n  licensed?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type DropzoneLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneMasterLogArgs = {\n  date: Scalars['Int'];\n};\n\n\nexport type DropzoneTicketTypesArgs = {\n  isPublic?: Maybe<Scalars['Boolean']>;\n};\n\n/** The connection type for Dropzone. */\nexport type DropzoneConnection = {\n  __typename?: 'DropzoneConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Dropzone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneEdge = {\n  __typename?: 'DropzoneEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Dropzone>;\n};\n\nexport type DropzoneInput = {\n  name: Scalars['String'];\n  banner?: Maybe<Scalars['String']>;\n  federationId: Scalars['Int'];\n  isPublic?: Maybe<Scalars['Boolean']>;\n  primaryColor?: Maybe<Scalars['String']>;\n  secondaryColor?: Maybe<Scalars['String']>;\n  isCreditSystemEnabled?: Maybe<Scalars['Boolean']>;\n};\n\nexport type DropzoneUser = AnyResource & {\n  __typename?: 'DropzoneUser';\n  /** Get user rigs that have been inspected and marked as OK + dropzone rigs */\n  availableRigs?: Maybe<Array<Rig>>;\n  createdAt: Scalars['Int'];\n  credits?: Maybe<Scalars['Int']>;\n  expiresAt?: Maybe<Scalars['Int']>;\n  hasCredits: Scalars['Boolean'];\n  hasExitWeight: Scalars['Boolean'];\n  hasLicense: Scalars['Boolean'];\n  hasMembership: Scalars['Boolean'];\n  hasReserveInDate: Scalars['Boolean'];\n  hasRigInspection: Scalars['Boolean'];\n  id: Scalars['ID'];\n  notifications?: Maybe<NotificationConnection>;\n  permissions?: Maybe<Array<Permission>>;\n  rigInspections?: Maybe<Array<RigInspection>>;\n  role?: Maybe<UserRole>;\n  transactions?: Maybe<TransactionConnection>;\n  unseenNotifications: Scalars['Int'];\n  updatedAt: Scalars['Int'];\n  user: User;\n};\n\n\nexport type DropzoneUserNotificationsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type DropzoneUserTransactionsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for DropzoneUser. */\nexport type DropzoneUserConnection = {\n  __typename?: 'DropzoneUserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DropzoneUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DropzoneUser>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type DropzoneUserEdge = {\n  __typename?: 'DropzoneUserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DropzoneUser>;\n};\n\nexport type DropzoneUserInput = {\n  expiresAt?: Maybe<Scalars['Int']>;\n  credits?: Maybe<Scalars['Float']>;\n  userRoleId?: Maybe<Scalars['Int']>;\n};\n\nexport type Extra = {\n  __typename?: 'Extra';\n  cost: Scalars['Int'];\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  ticketTypes: Array<TicketType>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type ExtraInput = {\n  name?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  ticketTypeIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Federation = {\n  __typename?: 'Federation';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FieldError = {\n  __typename?: 'FieldError';\n  field: Scalars['String'];\n  message: Scalars['String'];\n};\n\nexport type FormTemplate = {\n  __typename?: 'FormTemplate';\n  createdAt: Scalars['Int'];\n  definition?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type FormTemplateInput = {\n  name?: Maybe<Scalars['String']>;\n  definition?: Maybe<Scalars['String']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n};\n\n/** Autogenerated input type of GrantPermission */\nexport type GrantPermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of GrantPermission */\nexport type GrantPermissionPayload = {\n  __typename?: 'GrantPermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type JumpType = {\n  __typename?: 'JumpType';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type License = AnyResource & {\n  __typename?: 'License';\n  createdAt: Scalars['Int'];\n  federation?: Maybe<Federation>;\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Load = AnyResource & {\n  __typename?: 'Load';\n  createdAt: Scalars['Int'];\n  dispatchAt?: Maybe<Scalars['Int']>;\n  gca?: Maybe<DropzoneUser>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  id: Scalars['ID'];\n  isFull: Scalars['Boolean'];\n  isOpen: Scalars['Boolean'];\n  isReady: Scalars['Boolean'];\n  loadMaster?: Maybe<DropzoneUser>;\n  loadNumber: Scalars['Int'];\n  maxSlots: Scalars['Int'];\n  name?: Maybe<Scalars['String']>;\n  pilot?: Maybe<DropzoneUser>;\n  plane: Plane;\n  slots?: Maybe<Array<Slot>>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Load. */\nexport type LoadConnection = {\n  __typename?: 'LoadConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LoadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Load>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type LoadEdge = {\n  __typename?: 'LoadEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Load>;\n};\n\nexport type LoadInput = {\n  dispatchAt?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  isOpen?: Maybe<Scalars['Boolean']>;\n  hasLanded?: Maybe<Scalars['Boolean']>;\n  pilotId?: Maybe<Scalars['Int']>;\n  planeId?: Maybe<Scalars['Int']>;\n  gcaId?: Maybe<Scalars['Int']>;\n  loadMasterId?: Maybe<Scalars['Int']>;\n};\n\nexport type MasterLog = {\n  __typename?: 'MasterLog';\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  dzso?: Maybe<Array<DropzoneUser>>;\n  id: Scalars['ID'];\n  loads?: Maybe<Array<Load>>;\n  notes?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createDropzone?: Maybe<CreateDropzonePayload>;\n  createExtra?: Maybe<CreateExtraPayload>;\n  createLoad?: Maybe<CreateLoadPayload>;\n  createPlane?: Maybe<CreatePlanePayload>;\n  createRig?: Maybe<CreateRigPayload>;\n  createRigInspection?: Maybe<CreateRigInspectionPayload>;\n  createSlot?: Maybe<CreateSlotPayload>;\n  createSlots?: Maybe<CreateSlotsPayload>;\n  createTicketType?: Maybe<CreateTicketPayload>;\n  createTransaction?: Maybe<CreateTransactionPayload>;\n  deleteDropzone?: Maybe<DeleteDropzonePayload>;\n  deleteLoad?: Maybe<DeleteLoadPayload>;\n  deletePlane?: Maybe<DeletePlanePayload>;\n  deleteSlot?: Maybe<DeleteSlotPayload>;\n  deleteTicketType?: Maybe<DeleteTicketPayload>;\n  grantPermission?: Maybe<GrantPermissionPayload>;\n  revokePermission?: Maybe<RevokePermissionPayload>;\n  updateDropzone?: Maybe<UpdateDropzonePayload>;\n  updateDropzoneUser?: Maybe<UpdateDropzoneUserPayload>;\n  updateExtra?: Maybe<UpdateExtraPayload>;\n  updateFormTemplate?: Maybe<UpdateFormTemplatePayload>;\n  updateLoad?: Maybe<UpdateLoadPayload>;\n  updateNotification?: Maybe<UpdateNotificationPayload>;\n  updatePlane?: Maybe<UpdatePlanePayload>;\n  updateRig?: Maybe<UpdateRigPayload>;\n  updateRigInspection?: Maybe<UpdateRigInspectionPayload>;\n  updateRole?: Maybe<UpdateRolePayload>;\n  updateSlot?: Maybe<UpdateSlotPayload>;\n  updateTicketType?: Maybe<UpdateTicketPayload>;\n  updateUser?: Maybe<UpdateUserPayload>;\n  userLogin?: Maybe<UserLoginPayload>;\n  userLogout?: Maybe<UserLogoutPayload>;\n  userResendConfirmation?: Maybe<UserResendConfirmationPayload>;\n  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;\n  userSendPasswordResetWithToken?: Maybe<UserSendPasswordResetWithTokenPayload>;\n  userSignUp?: Maybe<UserSignUpPayload>;\n  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;\n  userUpdatePasswordWithToken?: Maybe<UserUpdatePasswordWithTokenPayload>;\n};\n\n\nexport type MutationCreateDropzoneArgs = {\n  input: CreateDropzoneInput;\n};\n\n\nexport type MutationCreateExtraArgs = {\n  input: CreateExtraInput;\n};\n\n\nexport type MutationCreateLoadArgs = {\n  input: CreateLoadInput;\n};\n\n\nexport type MutationCreatePlaneArgs = {\n  input: CreatePlaneInput;\n};\n\n\nexport type MutationCreateRigArgs = {\n  input: CreateRigInput;\n};\n\n\nexport type MutationCreateRigInspectionArgs = {\n  input: CreateRigInspectionInput;\n};\n\n\nexport type MutationCreateSlotArgs = {\n  input: CreateSlotInput;\n};\n\n\nexport type MutationCreateSlotsArgs = {\n  input: CreateSlotsInput;\n};\n\n\nexport type MutationCreateTicketTypeArgs = {\n  input: CreateTicketInput;\n};\n\n\nexport type MutationCreateTransactionArgs = {\n  input: CreateTransactionInput;\n};\n\n\nexport type MutationDeleteDropzoneArgs = {\n  input: DeleteDropzoneInput;\n};\n\n\nexport type MutationDeleteLoadArgs = {\n  input: DeleteLoadInput;\n};\n\n\nexport type MutationDeletePlaneArgs = {\n  input: DeletePlaneInput;\n};\n\n\nexport type MutationDeleteSlotArgs = {\n  input: DeleteSlotInput;\n};\n\n\nexport type MutationDeleteTicketTypeArgs = {\n  input: DeleteTicketInput;\n};\n\n\nexport type MutationGrantPermissionArgs = {\n  input: GrantPermissionInput;\n};\n\n\nexport type MutationRevokePermissionArgs = {\n  input: RevokePermissionInput;\n};\n\n\nexport type MutationUpdateDropzoneArgs = {\n  input: UpdateDropzoneInput;\n};\n\n\nexport type MutationUpdateDropzoneUserArgs = {\n  input: UpdateDropzoneUserInput;\n};\n\n\nexport type MutationUpdateExtraArgs = {\n  input: UpdateExtraInput;\n};\n\n\nexport type MutationUpdateFormTemplateArgs = {\n  input: UpdateFormTemplateInput;\n};\n\n\nexport type MutationUpdateLoadArgs = {\n  input: UpdateLoadInput;\n};\n\n\nexport type MutationUpdateNotificationArgs = {\n  input: UpdateNotificationInput;\n};\n\n\nexport type MutationUpdatePlaneArgs = {\n  input: UpdatePlaneInput;\n};\n\n\nexport type MutationUpdateRigArgs = {\n  input: UpdateRigInput;\n};\n\n\nexport type MutationUpdateRigInspectionArgs = {\n  input: UpdateRigInspectionInput;\n};\n\n\nexport type MutationUpdateRoleArgs = {\n  input: UpdateRoleInput;\n};\n\n\nexport type MutationUpdateSlotArgs = {\n  input: UpdateSlotInput;\n};\n\n\nexport type MutationUpdateTicketTypeArgs = {\n  input: UpdateTicketInput;\n};\n\n\nexport type MutationUpdateUserArgs = {\n  input: UpdateUserInput;\n};\n\n\nexport type MutationUserLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\n\nexport type MutationUserResendConfirmationArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSendPasswordResetWithTokenArgs = {\n  email: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n\nexport type MutationUserSignUpArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  confirmSuccessUrl?: Maybe<Scalars['String']>;\n  phone: Scalars['String'];\n  exitWeight: Scalars['Float'];\n  name: Scalars['String'];\n  licenseId?: Maybe<Scalars['Int']>;\n  pushToken?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  currentPassword?: Maybe<Scalars['String']>;\n};\n\n\nexport type MutationUserUpdatePasswordWithTokenArgs = {\n  password: Scalars['String'];\n  passwordConfirmation: Scalars['String'];\n  resetPasswordToken: Scalars['String'];\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  createdAt: Scalars['Int'];\n  id: Scalars['ID'];\n  isSeen: Scalars['Boolean'];\n  message?: Maybe<Scalars['String']>;\n  notificationType?: Maybe<Scalars['String']>;\n  receivedBy: DropzoneUser;\n  resource?: Maybe<AnyResource>;\n  sentBy?: Maybe<DropzoneUser>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Notification. */\nexport type NotificationConnection = {\n  __typename?: 'NotificationConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<NotificationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Notification>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type NotificationEdge = {\n  __typename?: 'NotificationEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Notification>;\n};\n\nexport type NotificationInput = {\n  isSeen: Scalars['Boolean'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport enum Permission {\n  /** updateDropzone */\n  UpdateDropzone = 'updateDropzone',\n  /** deleteDropzone */\n  DeleteDropzone = 'deleteDropzone',\n  /** createLoad */\n  CreateLoad = 'createLoad',\n  /** updateLoad */\n  UpdateLoad = 'updateLoad',\n  /** deleteLoad */\n  DeleteLoad = 'deleteLoad',\n  /** readLoad */\n  ReadLoad = 'readLoad',\n  /** createSlot */\n  CreateSlot = 'createSlot',\n  /** updateSlot */\n  UpdateSlot = 'updateSlot',\n  /** deleteSlot */\n  DeleteSlot = 'deleteSlot',\n  /** createUserSlot */\n  CreateUserSlot = 'createUserSlot',\n  /** createUserSlotWithSelf */\n  CreateUserSlotWithSelf = 'createUserSlotWithSelf',\n  /** updateUserSlot */\n  UpdateUserSlot = 'updateUserSlot',\n  /** deleteUserSlot */\n  DeleteUserSlot = 'deleteUserSlot',\n  /** createStudentSlot */\n  CreateStudentSlot = 'createStudentSlot',\n  /** updateStudentSlot */\n  UpdateStudentSlot = 'updateStudentSlot',\n  /** deleteStudentSlot */\n  DeleteStudentSlot = 'deleteStudentSlot',\n  /** createTicketType */\n  CreateTicketType = 'createTicketType',\n  /** updateTicketType */\n  UpdateTicketType = 'updateTicketType',\n  /** deleteTicketType */\n  DeleteTicketType = 'deleteTicketType',\n  /** createExtra */\n  CreateExtra = 'createExtra',\n  /** updateExtra */\n  UpdateExtra = 'updateExtra',\n  /** deleteExtra */\n  DeleteExtra = 'deleteExtra',\n  /** readExtra */\n  ReadExtra = 'readExtra',\n  /** createPlane */\n  CreatePlane = 'createPlane',\n  /** updatePlane */\n  UpdatePlane = 'updatePlane',\n  /** deletePlane */\n  DeletePlane = 'deletePlane',\n  /** createRig */\n  CreateRig = 'createRig',\n  /** updateRig */\n  UpdateRig = 'updateRig',\n  /** deleteRig */\n  DeleteRig = 'deleteRig',\n  /** readRig */\n  ReadRig = 'readRig',\n  /** createDropzoneRig */\n  CreateDropzoneRig = 'createDropzoneRig',\n  /** updateDropzoneRig */\n  UpdateDropzoneRig = 'updateDropzoneRig',\n  /** deleteDropzoneRig */\n  DeleteDropzoneRig = 'deleteDropzoneRig',\n  /** readDropzoneRig */\n  ReadDropzoneRig = 'readDropzoneRig',\n  /** readPermissions */\n  ReadPermissions = 'readPermissions',\n  /** updatePermissions */\n  UpdatePermissions = 'updatePermissions',\n  /** createPackjob */\n  CreatePackjob = 'createPackjob',\n  /** updatePackjob */\n  UpdatePackjob = 'updatePackjob',\n  /** deletePackjob */\n  DeletePackjob = 'deletePackjob',\n  /** readPackjob */\n  ReadPackjob = 'readPackjob',\n  /** createFormTemplate */\n  CreateFormTemplate = 'createFormTemplate',\n  /** updateFormTemplate */\n  UpdateFormTemplate = 'updateFormTemplate',\n  /** deleteFormTemplate */\n  DeleteFormTemplate = 'deleteFormTemplate',\n  /** readFormTemplate */\n  ReadFormTemplate = 'readFormTemplate',\n  /** readUser */\n  ReadUser = 'readUser',\n  /** updateUser */\n  UpdateUser = 'updateUser',\n  /** deleteUser */\n  DeleteUser = 'deleteUser',\n  /** createUser */\n  CreateUser = 'createUser',\n  /** actAsPilot */\n  ActAsPilot = 'actAsPilot',\n  /** actAsLoadMaster */\n  ActAsLoadMaster = 'actAsLoadMaster',\n  /** actAsGCA */\n  ActAsGca = 'actAsGCA',\n  /** actAsDZSO */\n  ActAsDzso = 'actAsDZSO',\n  /** actAsRigInspector */\n  ActAsRigInspector = 'actAsRigInspector',\n  /** createUserTransaction */\n  CreateUserTransaction = 'createUserTransaction',\n  /** readUserTransactions */\n  ReadUserTransactions = 'readUserTransactions',\n  /** grantPermission */\n  GrantPermission = 'grantPermission',\n  /** revokePermission */\n  RevokePermission = 'revokePermission'\n}\n\nexport type Plane = AnyResource & {\n  __typename?: 'Plane';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  hours?: Maybe<Scalars['Int']>;\n  id: Scalars['ID'];\n  maxSlots?: Maybe<Scalars['Int']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  name?: Maybe<Scalars['String']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type PlaneInput = {\n  name?: Maybe<Scalars['String']>;\n  minSlots?: Maybe<Scalars['Int']>;\n  maxSlots?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  hours?: Maybe<Scalars['Int']>;\n  nextMaintenanceHours?: Maybe<Scalars['Int']>;\n  registration?: Maybe<Scalars['String']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get dropzone details */\n  dropzone: Dropzone;\n  /** Get all available dropzones */\n  dropzones: DropzoneConnection;\n  /** Get ticket addons for a dropzone */\n  extras: Array<Extra>;\n  /** Available federations */\n  federations: Array<Federation>;\n  /** Load base64 images as graphql */\n  image?: Maybe<Scalars['String']>;\n  /** Get all jump types */\n  jumpTypes: Array<JumpType>;\n  /** Get all licenses for a federation */\n  licenses: Array<License>;\n  /** Get load by id */\n  load: Load;\n  /** Get loads */\n  loads: LoadConnection;\n  /** Get planes from a dropzone */\n  planes: Array<Plane>;\n  /** Get ticket types for a dropzone */\n  ticketTypes: Array<TicketType>;\n  userCheckPasswordToken: User;\n  userConfirmAccount: User;\n};\n\n\nexport type QueryDropzoneArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryDropzonesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryExtrasArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryImageArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryJumpTypesArgs = {\n  allowedForUserId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLicensesArgs = {\n  federationId?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryLoadArgs = {\n  id: Scalars['Int'];\n};\n\n\nexport type QueryLoadsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n  dropzoneId: Scalars['Int'];\n  earliestTimestamp?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPlanesArgs = {\n  dropzoneId: Scalars['Int'];\n};\n\n\nexport type QueryTicketTypesArgs = {\n  dropzoneId: Scalars['Int'];\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n};\n\n\nexport type QueryUserCheckPasswordTokenArgs = {\n  resetPasswordToken: Scalars['String'];\n  redirectUrl?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryUserConfirmAccountArgs = {\n  confirmationToken: Scalars['String'];\n  redirectUrl: Scalars['String'];\n};\n\n/** Autogenerated input type of RevokePermission */\nexport type RevokePermissionInput = {\n  permission: Permission;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of RevokePermission */\nexport type RevokePermissionPayload = {\n  __typename?: 'RevokePermissionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\nexport type Rig = AnyResource & {\n  __typename?: 'Rig';\n  canopySize?: Maybe<Scalars['Int']>;\n  createdAt: Scalars['Int'];\n  dropzone?: Maybe<Dropzone>;\n  id: Scalars['ID'];\n  isPublic: Scalars['Boolean'];\n  maintainedAt?: Maybe<Scalars['Int']>;\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  rigType?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n  user?: Maybe<User>;\n};\n\nexport type RigInput = {\n  make?: Maybe<Scalars['String']>;\n  model?: Maybe<Scalars['String']>;\n  serial?: Maybe<Scalars['String']>;\n  packValue?: Maybe<Scalars['Int']>;\n  repackExpiresAt?: Maybe<Scalars['Int']>;\n  maintainedAt?: Maybe<Scalars['Int']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  userId?: Maybe<Scalars['Int']>;\n  /** student / sport / tandem */\n  rigType?: Maybe<Scalars['String']>;\n  isPublic?: Maybe<Scalars['Boolean']>;\n  canopySize?: Maybe<Scalars['Int']>;\n};\n\nexport type RigInspection = {\n  __typename?: 'RigInspection';\n  createdAt: Scalars['Int'];\n  definition: Scalars['String'];\n  dropzoneUser: DropzoneUser;\n  formTemplate: FormTemplate;\n  id: Scalars['ID'];\n  inspectedBy: DropzoneUser;\n  isOk: Scalars['Boolean'];\n  rig?: Maybe<Rig>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type RigInspectionInput = {\n  dropzoneId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  definition?: Maybe<Scalars['String']>;\n  isOk?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Slot = AnyResource & {\n  __typename?: 'Slot';\n  createdAt: Scalars['Int'];\n  dropzoneUser?: Maybe<DropzoneUser>;\n  exitWeight: Scalars['Int'];\n  extras?: Maybe<Array<Extra>>;\n  groupNumber: Scalars['Int'];\n  id: Scalars['ID'];\n  jumpType?: Maybe<JumpType>;\n  load: Load;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n  passengerName?: Maybe<Scalars['String']>;\n  rig?: Maybe<Rig>;\n  ticketType?: Maybe<TicketType>;\n  user?: Maybe<User>;\n  wingLoading?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotInput = {\n  userId?: Maybe<Scalars['Int']>;\n  ticketTypeId?: Maybe<Scalars['Int']>;\n  jumpTypeId?: Maybe<Scalars['Int']>;\n  loadId?: Maybe<Scalars['Int']>;\n  rigId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n  userGroup?: Maybe<Array<SlotUser>>;\n  passengerName?: Maybe<Scalars['String']>;\n  passengerExitWeight?: Maybe<Scalars['Float']>;\n};\n\nexport type SlotUser = {\n  id: Scalars['Int'];\n  exitWeight: Scalars['Float'];\n  rigId?: Maybe<Scalars['Int']>;\n};\n\nexport type TicketType = AnyResource & {\n  __typename?: 'TicketType';\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  altitude?: Maybe<Scalars['Int']>;\n  cost?: Maybe<Scalars['Float']>;\n  createdAt: Scalars['Int'];\n  currency?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  extras: Array<Extra>;\n  id: Scalars['ID'];\n  isTandem?: Maybe<Scalars['Boolean']>;\n  name?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type TicketTypeInput = {\n  currency?: Maybe<Scalars['String']>;\n  cost?: Maybe<Scalars['Float']>;\n  name?: Maybe<Scalars['String']>;\n  altitude?: Maybe<Scalars['Int']>;\n  allowManifestingSelf?: Maybe<Scalars['Boolean']>;\n  dropzoneId?: Maybe<Scalars['Int']>;\n  isTandem?: Maybe<Scalars['Boolean']>;\n  extraIds?: Maybe<Array<Scalars['Int']>>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  amount: Scalars['Float'];\n  createdAt: Scalars['Int'];\n  dropzoneUser: DropzoneUser;\n  id: Scalars['ID'];\n  message?: Maybe<Scalars['String']>;\n  status?: Maybe<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** The connection type for Transaction. */\nexport type TransactionConnection = {\n  __typename?: 'TransactionConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n};\n\n/** An edge in a connection. */\nexport type TransactionEdge = {\n  __typename?: 'TransactionEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transaction>;\n};\n\nexport type TransactionInput = {\n  status?: Maybe<Scalars['String']>;\n  message?: Maybe<Scalars['String']>;\n  dropzoneUserId?: Maybe<Scalars['Int']>;\n  amount?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated input type of UpdateDropzone */\nexport type UpdateDropzoneInput = {\n  id: Scalars['Int'];\n  attributes: DropzoneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzone */\nexport type UpdateDropzonePayload = {\n  __typename?: 'UpdateDropzonePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzone?: Maybe<Dropzone>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserInput = {\n  attributes: DropzoneUserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateDropzoneUser */\nexport type UpdateDropzoneUserPayload = {\n  __typename?: 'UpdateDropzoneUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  dropzoneUser?: Maybe<DropzoneUser>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateExtra */\nexport type UpdateExtraInput = {\n  attributes: ExtraInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateExtra */\nexport type UpdateExtraPayload = {\n  __typename?: 'UpdateExtraPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  extra?: Maybe<Extra>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated input type of UpdateFormTemplate */\nexport type UpdateFormTemplateInput = {\n  attributes: FormTemplateInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateFormTemplate */\nexport type UpdateFormTemplatePayload = {\n  __typename?: 'UpdateFormTemplatePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  formTemplate?: Maybe<FormTemplate>;\n};\n\n/** Autogenerated input type of UpdateLoad */\nexport type UpdateLoadInput = {\n  id: Scalars['Int'];\n  attributes: LoadInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateLoad */\nexport type UpdateLoadPayload = {\n  __typename?: 'UpdateLoadPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  load?: Maybe<Load>;\n};\n\n/** Autogenerated input type of UpdateNotification */\nexport type UpdateNotificationInput = {\n  attributes: NotificationInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateNotification */\nexport type UpdateNotificationPayload = {\n  __typename?: 'UpdateNotificationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  notification?: Maybe<Notification>;\n};\n\n/** Autogenerated input type of UpdatePlane */\nexport type UpdatePlaneInput = {\n  id: Scalars['Int'];\n  attributes: PlaneInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdatePlane */\nexport type UpdatePlanePayload = {\n  __typename?: 'UpdatePlanePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  plane?: Maybe<Plane>;\n};\n\n/** Autogenerated input type of UpdateRig */\nexport type UpdateRigInput = {\n  attributes: RigInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpdateRigInspection */\nexport type UpdateRigInspectionInput = {\n  attributes: RigInspectionInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRigInspection */\nexport type UpdateRigInspectionPayload = {\n  __typename?: 'UpdateRigInspectionPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rigInspection?: Maybe<RigInspection>;\n};\n\n/** Autogenerated return type of UpdateRig */\nexport type UpdateRigPayload = {\n  __typename?: 'UpdateRigPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  rig?: Maybe<Rig>;\n};\n\n/** Autogenerated input type of UpdateRole */\nexport type UpdateRoleInput = {\n  permission: Scalars['String'];\n  enabled: Scalars['Boolean'];\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateRole */\nexport type UpdateRolePayload = {\n  __typename?: 'UpdateRolePayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  role?: Maybe<UserRole>;\n};\n\n/** Autogenerated input type of UpdateSlot */\nexport type UpdateSlotInput = {\n  id: Scalars['Int'];\n  attributes: SlotInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateSlot */\nexport type UpdateSlotPayload = {\n  __typename?: 'UpdateSlotPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  slot?: Maybe<Slot>;\n};\n\n/** Autogenerated input type of UpdateTicket */\nexport type UpdateTicketInput = {\n  id: Scalars['Int'];\n  attributes: TicketTypeInput;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateTicket */\nexport type UpdateTicketPayload = {\n  __typename?: 'UpdateTicketPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  ticketType?: Maybe<TicketType>;\n};\n\n/** Autogenerated input type of UpdateUser */\nexport type UpdateUserInput = {\n  attributes: UserInput;\n  id?: Maybe<Scalars['Int']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateUser */\nexport type UpdateUserPayload = {\n  __typename?: 'UpdateUserPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n  user?: Maybe<User>;\n};\n\nexport type User = AnyResource & {\n  __typename?: 'User';\n  createdAt: Scalars['Int'];\n  dropzoneUsers?: Maybe<Array<DropzoneUser>>;\n  email?: Maybe<Scalars['String']>;\n  exitWeight?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  image?: Maybe<Scalars['String']>;\n  jumpTypes?: Maybe<Array<JumpType>>;\n  license?: Maybe<License>;\n  name?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  rigs?: Maybe<Array<Rig>>;\n  updatedAt: Scalars['Int'];\n};\n\nexport type UserInput = {\n  name?: Maybe<Scalars['String']>;\n  nickname?: Maybe<Scalars['String']>;\n  pushToken?: Maybe<Scalars['String']>;\n  image?: Maybe<Scalars['String']>;\n  phone?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  licenseId?: Maybe<Scalars['Int']>;\n  exitWeight?: Maybe<Scalars['Float']>;\n};\n\n/** Autogenerated return type of UserLogin */\nexport type UserLoginPayload = {\n  __typename?: 'UserLoginPayload';\n  authenticatable: User;\n  credentials: Credential;\n};\n\n/** Autogenerated return type of UserLogout */\nexport type UserLogoutPayload = {\n  __typename?: 'UserLogoutPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserResendConfirmation */\nexport type UserResendConfirmationPayload = {\n  __typename?: 'UserResendConfirmationPayload';\n  message: Scalars['String'];\n};\n\nexport type UserRole = {\n  __typename?: 'UserRole';\n  createdAt: Scalars['Int'];\n  dropzone: Dropzone;\n  dropzoneId: Scalars['Int'];\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  permissions: Array<Scalars['String']>;\n  updatedAt: Scalars['Int'];\n};\n\n/** Autogenerated return type of UserSendPasswordReset */\nexport type UserSendPasswordResetPayload = {\n  __typename?: 'UserSendPasswordResetPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSendPasswordResetWithToken */\nexport type UserSendPasswordResetWithTokenPayload = {\n  __typename?: 'UserSendPasswordResetWithTokenPayload';\n  message: Scalars['String'];\n};\n\n/** Autogenerated return type of UserSignUp */\nexport type UserSignUpPayload = {\n  __typename?: 'UserSignUpPayload';\n  authenticatable?: Maybe<User>;\n  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */\n  credentials?: Maybe<Credential>;\n  errors?: Maybe<Array<Scalars['String']>>;\n  fieldErrors?: Maybe<Array<FieldError>>;\n};\n\n/** Autogenerated return type of UserUpdatePassword */\nexport type UserUpdatePasswordPayload = {\n  __typename?: 'UserUpdatePasswordPayload';\n  authenticatable: User;\n};\n\n/** Autogenerated return type of UserUpdatePasswordWithToken */\nexport type UserUpdatePasswordWithTokenPayload = {\n  __typename?: 'UserUpdatePasswordWithTokenPayload';\n  authenticatable: User;\n  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */\n  credentials?: Maybe<Credential>;\n};\n","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { Permission } from \"../graphql/schema\";\nimport { useAppSelector } from \"../redux\";\n\nexport const QUERY_PERMISSIONS = gql`\nquery QueryPermissions($dropzoneId: Int!) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n      primaryColor\n      secondaryColor\n      \n      currentUser {\n        id\n        role {\n          id\n          name\n        }\n        permissions\n      }\n\n    }\n  }`;\n\nexport default function useRestriction(permission: Permission): boolean {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data } = useQuery(QUERY_PERMISSIONS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId)\n    }\n  });\n\n  const permissions = data?.dropzone?.currentUser?.permissions || [];\n  return permissions?.includes(permission as any) || false;\n}"],"sourceRoot":""}