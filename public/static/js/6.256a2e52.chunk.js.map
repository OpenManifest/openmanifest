{"version":3,"sources":["components/layout/DialogOrSheet.web.tsx","components/notifications/index.ts","graphql/createQuery.tsx","components/layout/SwipeActions.tsx","components/input/dropdown_select/RigSelect.tsx","components/chips/GcaChip.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/input/chip_select/DropzoneUserChipSelect.tsx","components/input/chip_select/PlaneChipSelect.tsx","components/forms/load/LoadForm.tsx","components/forms/manifest_group/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/manifest_group/ManifestGroupForm.tsx","components/input/chip_select/JumpTypeChipSelect.tsx","components/input/chip_select/TicketTypeChipSelect.tsx","components/forms/manifest/ManifestForm.tsx","components/dialogs/ManifestUser/ManifestUser.web.tsx","components/dialogs/ManifestGroup/UserListSelect.tsx","components/dialogs/ManifestGroup/ManifestGroup.web.tsx","screens/authenticated/manifest/GetStarted.tsx","components/chips/LoadMasterChip.tsx","components/chips/PilotChip.tsx","components/chips/PlaneChip.tsx","screens/authenticated/manifest/LoadCard.tsx","components/dialogs/Load.tsx","screens/authenticated/manifest/ManifestScreen.tsx"],"names":["DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","style","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","justifyContent","onPress","onClose","StyleSheet","create","button","width","borderRadius","padding","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","height","display","flexDirection","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","previousData","refetch","error","transformedData","React","JSON","stringify","message","showSnackbarErrors","notifications","showSnackbar","variant","SwipeActions","rightAction","disabled","ref","enabled","renderRightActions","progress","dragX","scale","interpolate","inputRange","outputRange","translateX","current","close","View","transform","Text","fontWeight","label","useNativeAnimations","QUERY_RIGS","gql","RigSelect","isMenuOpen","setMenuOpen","currentDropzoneId","useLazyQuery","fetchRigs","userId","dropzoneId","Number","value","autoSelectFirst","dropzone","dropzoneUser","availableRigs","length","onSelect","onDismiss","anchor","Item","make","model","canopySize","description","required","left","Icon","icon","map","rig","key","id","user","QUERY_PERMISSION_USER","GCAChip","permissions","useRestriction","Permission","UpdateLoad","mode","marginHorizontal","name","dropzoneUsers","edges","edge","node","QUERY_DROPZONE_USERS","DropzoneUserChipSelect","requiredPermissions","useQueryDropzoneUsers","Subheader","ChipSelect","items","selected","filter","Boolean","isSelected","item","renderItemLabel","dzUser","isDisabled","onChangeSelected","first","QUERY_PLANES","PlaneChipSelect","uniqBy","planes","Plane","plane","LoadForm","forms","load","TextInput","styles","field","fields","placeholder","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","gca","pilot","Divider","marginVertical","Checkbox","status","isOpen","flex","marginBottom","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","console","selectedRig","rigs","find","Card","ProgressBar","image","Image","source","uri","size","ScrollView","horizontal","Chip","role","license","round","toFixed","text","keyboardType","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","SlotForm","manifestGroup","userIds","users","slotUser","flexShrink","jumpType","includes","ticketType","extras","ticketAddons","extra","some","cost","undefined","newRig","JumpTypeChipSelect","QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES","useTicketTypes","TicketTypeChipSelect","onlyPublicTickets","ManifestForm","currentDropzone","useCurrentDropzone","manifest","isEdit","original","allowedToManifestOthers","UpdateUserSlot","CreateUserSlot","right","Affix","isTandem","passengerName","passengerExitWeight","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","extraIds","loadId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","maxHeight","Button","reset","UsersScreen","screens","searchText","setSearchText","search","currentUser","canManifestGroup","canManifestGroupWithSelfOnly","CreateUserSlotWithSelf","Searchbar","contentContainerStyle","paddingTop","NoResults","subtitle","selectedUsers","setSelected","setDropzoneUsers","onNext","scrollView","MUTATION_CREATE_SLOTS","mutationCreateSlots","tabIndex","setTabIndex","userGroup","createSlots","sheetRef","snapTo","testID","defaultIndex","onChangeIndex","userListContainer","ManifestGroupForm","buttonContainer","GetStarted","hasPlanes","hasTicketTypes","palette","isPublic","usePalette","separator","lightColor","darkColor","success","container","alignItems","fontSize","LoadMasterChip","allowed","Menu","slots","slot","PilotChip","PlaneChip","QUERY_LOAD","MUTATION_UPDATE_LOAD","MUTATION_DELETE_SLOT","LoadCard","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","onManifestGroup","mutationUpdateLoad","mutation","mutationDeleteSlot","onDeleteSlot","deleteSlot","updatePilot","pilotId","updateGCA","gcaId","updatePlane","planeId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","Date","getTime","dispatchAt","Math","ceil","onLanded","hasLanded","canUpdateLoad","canEditSelf","UpdateSlot","canEditOthers","canRemoveSelf","DeleteSlot","canRemoveOthers","DeleteUserSlot","canManifestSelf","CreateSlot","showManifestButton","isFull","showGroupIcon","margin","opacity","loadNumber","IconButton","overflow","showsHorizontalScrollIndicator","diff","loadMaster","DataTable","Header","numeric","slotGroup","groupNumber","isCurrentUser","Row","onSlotGroupPress","onSlotPress","Cell","Paragraph","slotText","altitude","Array","from","v","i","differenceInMinutes","marginLeft","fab","position","bottom","MUTATION_CREATE_LOAD","LoadDialog","mutationCreateLoad","hasError","onSave","createLoad","snackbar","snapPoints","ManifestScreen","navigation","useNavigation","isFocused","useIsFocused","isSetupComplete","primaryColor","primary","setPrimaryColor","secondaryColor","canCreateLoad","CreateLoad","hasLicense","hasMembership","hasRigInspection","hasReserveInDate","hasExitWeight","hasCredits","setOpen","useWindowDimensions","numColumns","Dimensions","get","loads","keyExtractor","refreshing","onRefresh","refreshControl","RefreshControl","renderItem","index","setFromSlots","navigate","FAB","small"],"mappings":"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","file":"static/js/6.256a2e52.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\n\nexport interface ISwipeAction {\n  label: string;\n  \n  backgroundColor?: string;\n  onPress(): void;\n}\nexport interface ISwipeActions {\n  rightAction?: ISwipeAction;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport default function SwipeActions(props: ISwipeActions) {\n  const { children, rightAction, disabled } = props;\n\n  const ref = React.useRef<any>();\n  const rightActions = (progress: Animated.AnimatedInterpolation, dragX: Animated.AnimatedInterpolation) => {\n    const scale = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1.0, 0]\n    })\n\n    const translateX = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [0, 10]\n    });\n\n    return (\n        <TouchableOpacity\n          onPress={() => {\n            rightAction?.onPress();\n            ref?.current?.close();\n          }}\n        >\n          <Animated.View\n            style={{\n              flexGrow: 1,\n              backgroundColor: rightAction?.backgroundColor,\n              justifyContent: 'center',\n              height: \"100%\",\n              width: 75,\n              transform: [{ translateX }]\n            }}>\n            <Animated.Text\n              style={{\n                color: 'white',\n                paddingHorizontal: 10,\n                fontWeight: '600',\n                transform: [{ scale }]\n              }}>\n              {rightAction?.label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableOpacity>\n    )\n   }\n  return (\n    <Swipeable ref={ref} enabled={!disabled} renderRightActions={rightActions} useNativeAnimations>\n      { children }\n    </Swipeable>\n  )\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Rig, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  React.useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: currentDropzoneId,\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  React.useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            style={{ width: \"100%\" }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IGCAChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nexport const QUERY_PERMISSION_USER = gql`\n  query QueryGCAUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function GCAChip(props: IGCAChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PERMISSION_USER, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: [\"actAsGCA\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.user?.name || \"No gca\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"radio-handheld\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No gca\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`gca-chip-${edge?.node?.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useQueryDropzoneUsers from \"../../../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IDropzoneUserChipSelect {\n  value?: DropzoneUser | null;\n  label: string;\n  icon?: string;\n  required?: boolean;\n  requiredPermissions: string[];\n  onSelect(dzuser: DropzoneUser): void;\n}\n\nexport default function DropzoneUserChipSelect(props: IDropzoneUserChipSelect) {\n  const { label, requiredPermissions, icon, required, value } = props;\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: requiredPermissions\n    },\n    onError: (message) =>\n      dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        {label}\n      </List.Subheader>\n      <ChipSelect<DropzoneUser>\n        autoSelectFirst\n        icon={icon || \"account\"}\n        items={data?.edges?.map(({ node }) => node) || []}\n        selected={[props.value].filter(Boolean) as DropzoneUser[]}\n        isSelected={(item) => item.id === value?.id}\n        renderItemLabel={(dzUser) => dzUser?.user.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IPlaneSelect {\n  value?: Plane | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: Plane): void;\n}\n\nconst QUERY_PLANES = gql`\n  query QuerySelectPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChipSelect(props: IPlaneSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n    }\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Aircraft\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.planes || []),\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(Plane) => Plane?.name}\n        isDisabled={(plane) => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Divider, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport PlaneSelect from '../../input/dropdown_select/PlaneSelect';\nimport DropzoneUserSelect from '../../input/dropdown_select/DropzoneUserSelect';\nimport DropzoneUserChipSelect from '../../input/chip_select/DropzoneUserChipSelect';\nimport PlaneChipSelect from '../../input/chip_select/PlaneChipSelect';\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        \n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneChipSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.forms.load.setField([\"plane\", value]));\n            dispatch(actions.forms.load.setField([\"maxSlots\", value.maxSlots]));\n          }}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n\n        \n        <DropzoneUserChipSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"gca\", dzUser]))}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserChipSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"pilot\", dzUser]))}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.forms.load.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../input/dropdown_select/RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(userId: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  React.useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: globalState.currentDropzoneId,\n    },\n    onError: console.error\n  });\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.forms.manifestGroup.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.forms.manifestGroup.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={globalState.currentDropzoneId}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { JumpType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function JumpTypeChipSelect(props: IJumpTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: [Number(props.userId) || null].filter(Boolean) as number[],\n      dropzoneId: Number(currentDropzoneId),\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Jump type\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.allowedJumpTypes || []),\n            ...(data?.jumpTypes || [])\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(jumpType) => jumpType?.name}\n        isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType!.id)}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { TicketType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  onlyPublicTickets?: boolean;\n  onSelect(jt: TicketType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES = gql`\nquery DropzoneUsersAllowedTicketTypes(\n  $dropzoneId: Int!,\n  $onlyPublicTickets: Boolean\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    ticketTypes(isPublic: $onlyPublicTickets) {\n      id\n      name\n      cost\n      isTandem\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n}\n\n`;\n\nconst useTicketTypes = createQuery<{ ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  onlyPublicTickets?: boolean | null\n }>(QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES, {\n   getPayload: (query) => ({\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n   })\n });\n\nexport default function TicketTypeChipSelect(props: ITicketTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading } = useTicketTypes({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      onlyPublicTickets: props.onlyPublicTickets || null,\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={data?.ticketTypes || []}\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(ticketType) => ticketType?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Permission } from '../../../graphql/schema.d';\nimport JumpTypeChipSelect from '../../input/chip_select/JumpTypeChipSelect';\nimport TicketTypeChipSelect from '../../input/chip_select/TicketTypeChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../input/dropdown_select/RigSelect';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nexport default function ManifestForm() {\n  \n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.manifest);\n  React.useEffect(() => {\n    if (state.fields.dropzoneUser?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.manifest.setField([\"exitWeight\", Number(state.fields.dropzoneUser?.value?.user?.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.dropzoneUser.value.user?.rigs?.length) {\n        dispatch(\n          actions.forms.manifest.setField([\"rig\", state.fields.dropzoneUser?.value?.user.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.dropzoneUser?.value?.id]);\n\n  const isEdit = state?.original?.id;\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? Permission.UpdateUserSlot : Permission.CreateUserSlot\n  )\n\n  return ( \n    <> \n      <JumpTypeChipSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.dropzoneUser?.value?.user?.id) || null}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeChipSelect\n        value={state.fields.ticketType.value}\n        required\n        onlyPublicTickets={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.forms.manifest.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.forms.manifest.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      { !state.fields.dropzoneUser ? null :\n        <RigSelect\n          value={state.fields.rig.value}\n          userId={Number(state.fields.dropzoneUser?.value?.user?.id)}\n          dropzoneId={Number(currentDropzone?.dropzone?.id)}\n          onSelect={(value) => dispatch(actions.forms.manifest.setField([\"rig\", value]))}\n        />}\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      {\n        !state.fields.ticketType.value?.isTandem ? null : (\n          <>\n            <List.Subheader>Passenger</List.Subheader>\n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger name\"\n              error={!!state.fields.passengerName.error}\n              value={state.fields.passengerName?.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerName\", newValue]))}\n            />\n            \n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger exit weight\"\n              error={!!state.fields.passengerExitWeight.error}\n              value={state.fields.passengerExitWeight.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerExitWeight\", Number(newValue)]))}\n            />\n          </>\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport SlotForm from \"../../forms/manifest/ManifestForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $dropzoneUserId: Int\n    $exitWeight: Float\n    $passengerName: String\n    $passengerExitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          dropzoneUserId: $dropzoneUserId\n          exitWeight: $exitWeight\n          passengerExitWeight: $passengerExitWeight\n          passengerName: $passengerName\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            passengerName\n            passengerExitWeight\n            ticketType {\n              id\n              name\n              isTandem\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifest);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          dropzoneUserId: Number(state.fields.dropzoneUser?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n          ...!state.fields.ticketType.value?.isTandem\n            ? {}\n            : {\n                passengerName: state.fields.passengerName?.value,\n                passengerExitWeight: state.fields.passengerExitWeight?.value,\n              }\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifest.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifest.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(actions.forms.manifest.setFieldError([\"rig\", message]));\n          case \"dropzone_user\":\n            return dispatch(actions.forms.manifest.setFieldError([\"dropzoneUser\", message]));\n          case \"exit_weight\":\n            return dispatch(actions.forms.manifest.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} style={{ maxHeight: 500 }}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.dropzoneUser?.value?.user?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.ScrollArea>\n          <ScrollView>\n            <SlotForm />\n          </ScrollView>\n        </Dialog.ScrollArea>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.manifest.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, Button, Checkbox, Divider, List, Searchbar } from 'react-native-paper';\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nimport NoResults from '../../../components/NoResults';\nimport { Permission, Query } from '../../../graphql/schema.d';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search, licensed: true) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUserListSelect {\n  onNext(): void;\n}\n\nexport default function UsersScreen(props: IUserListSelect) {\n  const { screens } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const [searchText, setSearchText] = React.useState(\"\");\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      search: searchText,\n    }\n  });\n\n  const { currentUser } = useCurrentDropzone();\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  return (\n    <>\n    <Searchbar\n      value={searchText}\n      onChangeText={setSearchText}\n      placeholder=\"Search skydivers\"\n    />\n    <View style={{ height: 380}}>\n    <ScrollView contentContainerStyle={{ paddingTop: 16 }}>\n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n      <>\n        <List.Item\n          style={{ width: \"100%\"}}\n          key={`user-${edge?.node?.id}`}\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() =>\n            !edge?.node?.user?.image\n              ? <List.Icon icon=\"account\" />\n              : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n          }\n          right={() => \n            <Checkbox\n              status={\n                screens.manifest.selectedUsers?.map(({ id }) => id).includes(edge!.node!.id)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          disabled={\n          // Dont allow removing current user if the user\n            // can only manifest a group with themselves in it\n            edge?.node?.user.id === currentUser?.id && (\n              canManifestGroupWithSelfOnly && !canManifestGroup\n            )  \n          }\n          onPress={\n            () => dispatch(\n              actions.screens.manifest.setSelected(\n                screens.manifest.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                ? screens.manifest.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                : [...screens.manifest.selectedUsers, edge!.node!],\n              )\n            )\n          }\n        />\n        <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n        </>\n      )}\n    </ScrollView>\n    </View>\n    <Button\n      onPress={() => {\n        dispatch(actions.forms.manifestGroup.setDropzoneUsers(screens.manifest.selectedUsers));\n        props.onNext();\n      }}\n      style={styles.button}\n      mode=\"contained\"\n    >\n      Next\n    </Button>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  scrollView: {\n    height: 100,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal } from \"react-native-paper\";\nimport { Tabs, TabScreen, useTabNavigation } from 'react-native-paper-tabs';\nimport BottomSheet, { BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ManifestGroupForm from \"../../forms/manifest_group/ManifestGroupForm\";\nimport UserListSelect from \"./UserListSelect\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction NextStepButton() {\n  const setTab = useTabNavigation();\n\n  return (\n    <Button\n      onPress={() => setTab(1)} \n      style={styles.button}\n    >\n      Next\n    </Button>\n  )\n}\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const { open } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlots?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"ticketType\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        props.onClose();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  \n  const sheetRef = React.useRef<BottomSheet>(null);\n\n  React.useEffect(() => {\n    if (state.fields.ticketType?.value?.isTandem) {\n      sheetRef?.current?.snapTo(0);\n    }\n  }, [state.fields.ticketType?.value?.isTandem])\n\n  React.useEffect(() => {\n    if (open) {\n      sheetRef?.current?.snapTo(1);\n    } else {\n      sheetRef?.current?.close();\n      props.onClose();\n    }\n  }, [open]);\n\n  const snapPoints = React.useMemo(() => [0, 550], []);\n\n  return (\n    <Portal>\n      <Dialog\n        visible={!!props.open}\n        onDismiss={props.onClose}\n       >\n         <View style={{ backgroundColor: \"white\"}} testID=\"manifest-group-sheet\">\n            <View pointerEvents={(state.fields.users?.value?.length || 0) > 0 ? undefined : \"none\"}>\n              <Tabs defaultIndex={tabIndex} mode=\"fixed\" onChangeIndex={setTabIndex}>\n                <TabScreen label=\"Create group\" ><View /></TabScreen>\n                <TabScreen label=\"Configure jump\"><View /></TabScreen>\n              </Tabs>\n            </View>\n            \n            {\n              tabIndex === 0\n                ? (\n                  <View style={styles.userListContainer}>\n                    <UserListSelect onNext={() => setTabIndex(1)} />\n                  </View>\n                ) : (\n                  <ScrollView contentContainerStyle={{ paddingBottom: 200, flexGrow: 1}}>\n                    <ManifestGroupForm />\n                    <View style={styles.buttonContainer}>\n                      <Button onPress={onManifest} loading={mutationData.loading} mode=\"contained\" style={styles.button}>\n                        Save\n                      </Button>\n                    </View>\n                  </ScrollView>\n                )\n            }\n          </View>\n        </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  buttonContainer: {\n    paddingHorizontal: 16,\n    backgroundColor: \"white\",\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  userListContainer: {\n    height: \"100%\",\n    backgroundColor: \"white\",\n    width: \"100%\",\n    padding: 16,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingBottom: 32,\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 15,\n    borderTopRightRadius: 15,\n    height: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport { Slot, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\n\ninterface ILoadMasterChipSelect {\n  value?: DropzoneUser | null;\n  slots: Slot[];\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\n\nexport default function LoadMasterChip(props: ILoadMasterChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"shield-account\">\n      {props.value?.user?.name || \"No loadmaster\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-account\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.id ? props.value?.user?.name : \"No loadmaster\"}\n        </Chip>\n      }>\n      {\n        props.slots?.map((slot) => \n          <Menu.Item\n            key={`lm-chip-${slot.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(slot.dropzoneUser);\n            }}\n            title={\n              slot?.dropzoneUser?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Query, DropzoneUser, Permission } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPilotChipSelect {\n  dropzoneId: number;\n  value?: DropzoneUser | null;\n  onSelect(user: DropzoneUser): void;\n}\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryPilotUsers(\n    $dropzoneId: Int!\n    $permissions: [Permission!]\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(permissions: $permissions) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function PilotChip(props: IPilotChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n      permissions: [\"actAsPilot\"]\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"radio-handheld\">\n      {props.value?.user?.name || \"No pilot\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"shield-airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => setMenuOpen(true)}\n        >\n        {props.value?.id ? props.value?.user?.name : \"No pilot\"}\n        </Chip>\n      }>\n      {\n        data?.dropzone?.dropzoneUsers?.edges?.map((edge) => \n          <Menu.Item\n            key={`pilot-select-${edge!.node!.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(edge?.node);\n            }}\n            title={\n              edge?.node?.user?.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { Chip, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Permission, Query } from \"../../graphql/schema.d\";\nimport useRestriction from \"../../hooks/useRestriction\";\nimport { useAppSelector } from \"../../redux\";\n\ninterface IPlaneChipSelect {\n  value?: Plane | null;\n  onSelect(dzUser: Plane): void;\n}\n\n\nconst QUERY_PLANES = gql`\n  query QueryChipPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChip(props: IPlaneChipSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n    }\n  });\n  const allowed = useRestriction(Permission.UpdateLoad);\n\n  return (\n    !allowed ?\n    <Chip mode=\"outlined\" icon=\"airplane-takeoff\">\n      {props.value?.name || \"No plane\"}\n    </Chip> : (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <Chip\n          mode=\"outlined\"\n          icon=\"airplane\"\n          style={{ marginHorizontal: 4 }}\n          onPress={() => allowed && setMenuOpen(true)}\n        >\n          {props.value?.name || \"No plane\"}\n        </Chip>\n      }>\n      {\n        data?.planes?.map((plane) => \n          <Menu.Item\n            key={`lm-plane-chip-${plane.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(plane as Plane);\n            }}\n            title={\n              plane.name\n            }\n          />\n        )\n      }\n    </Menu>\n  ))\n}","import { gql, useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, IconButton, Menu, Paragraph, ProgressBar, Text } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport GCAChip from '../../../components/chips/GcaChip';\nimport LoadMasterChip from '../../../components/chips/LoadMasterChip';\nimport PilotChip from '../../../components/chips/PilotChip';\nimport PlaneChip from '../../../components/chips/PlaneChip';\n\nimport { View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Permission, Plane, Slot, DropzoneUser } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport SwipeActions from '../../../components/layout/SwipeActions';\n\ninterface ILoadCard {\n  load: Load;\n  onManifestGroup(): void;\n  onSlotGroupPress(slots: Slot[]): void;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        \n        dropzoneUser {\n          id\n          user {\n            id\n            name\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_SLOT = gql`\nmutation DeleteSlot($id: Int!) {\n  deleteSlot(input: { id: $id }) {\n    slot {\n      id\n      load {\n        id\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }  \n      }\n    }\n  }\n}\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const { load, onManifest, onManifestGroup } = props;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n  const currentDropzone = useCurrentDropzone();\n  const { currentUser } = currentDropzone;\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const [mutationDeleteSlot, mutationDelete] = useMutation<Mutation>(MUTATION_DELETE_SLOT);\n\n  const onDeleteSlot = React.useCallback(async (slot: Slot) => {\n    try {\n      const result = await mutationDeleteSlot({\n        variables: {\n          id: Number(slot.id)\n        }\n      });\n\n      if (result?.data?.deleteSlot?.errors) {\n        dispatch(\n          actions.notifications.showSnackbar({\n            message: result.data.deleteSlot.errors[0],\n            variant: \"error\"\n          })\n        );\n      }\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePilot = React.useCallback(async (pilot: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  \n  const canUpdateLoad = useRestriction(Permission.UpdateLoad);\n  \n  const canEditSelf = useRestriction(Permission.UpdateSlot);\n  const canEditOthers = useRestriction(Permission.UpdateUserSlot);\n  \n  const canRemoveSelf = useRestriction(Permission.DeleteSlot);\n  const canRemoveOthers = useRestriction(Permission.DeleteUserSlot);\n  \n  const canManifestSelf = useRestriction(Permission.CreateSlot);\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  const showManifestButton = canManifestSelf && data?.load?.isOpen && !data?.load?.isFull;\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  const showGroupIcon = (canManifestGroup || canManifestGroupWithSelfOnly) && !data?.load?.hasLanded && (!data?.load?.dispatchAt || data?.load.dispatchAt > (new Date().getTime() / 1000));\n\n  return (\n  <Card testID=\"load-card\" style={{ margin: 16, opacity: data?.load?.hasLanded ? 0.5 : 1.0 }} elevation={3}>\n    <Card.Title\n      style={{ justifyContent: \"space-between\"}}\n      title={\n        <View style={{ width: \"100%\", flex: 1, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n          <Text>{`Load ${data?.load?.loadNumber || 0}`}</Text>\n          <View style={{ flexGrow: 1 }} />\n          { showGroupIcon && (\n            <IconButton\n              icon=\"account-group\"\n              testID=\"manifest-group-button\"\n              onPress={() => {\n                dispatch(actions.forms.manifestGroup.reset());\n                dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n\n                if (canManifestGroupWithSelfOnly && !canManifestGroup) {\n                  // Automatically add current user to selection\n                  dispatch(actions.screens.manifest.setSelected([currentUser]));\n                  dispatch(actions.forms.manifestGroup.setDropzoneUsers([currentUser]));\n                }\n\n                if (onManifestGroup) {\n                  onManifestGroup();\n                }\n              }}\n            />\n          )}\n        </View>\n      }\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          <PlaneChip\n            value={data?.load?.plane}\n            onSelect={async (plane) => {\n              if ((data?.load?.slots?.length || 0) > (plane.maxSlots || 0)) {\n                const diff = (data?.load?.slots?.length || 0) - (plane.maxSlots || 0);\n\n                dispatch(\n                  actions.notifications.showSnackbar({\n                    message: `You need to take ${diff} people off the load to fit on this plane`,\n                    variant: \"warning\",\n                  })\n                );\n              } else {\n                await updatePlane(plane);\n                refetch();\n              }\n            }}\n          />\n          <GCAChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.gca}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.pilot}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            value={data?.load?.loadMaster}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              const slotGroup = data?.load?.slots?.filter(({ groupNumber }) => groupNumber && groupNumber === slot.groupNumber);\n              const isCurrentUser = slot?.user?.id === currentUser?.id;\n\n              return (\n                <SwipeActions\n                  disabled={\n                    (isCurrentUser && !canRemoveSelf) || (!isCurrentUser && !canRemoveOthers)\n                  }\n                  key={`slot-${slot.id}`}\n                  rightAction={{\n                    label: \"Delete\",\n                    backgroundColor: \"red\",\n                    onPress: () => onDeleteSlot(slot),\n                  }}\n                >\n                  <DataTable.Row\n                    testID=\"slot-row\"\n                    disabled={!!data?.load?.hasLanded}\n                    onPress={() => {\n                      if (slot.user?.id === currentUser?.id) {\n                        if (canEditSelf) {\n                          if (slotGroup?.length) {\n                            props.onSlotGroupPress(slotGroup!)\n                          } else {\n                            props.onSlotPress(slot);\n                          }\n                        }\n                      } else if (canEditOthers) {\n                        if (slotGroup?.length) {\n                          props.onSlotGroupPress(slotGroup!)\n                        } else {\n                          props.onSlotPress(slot);\n                        }\n                      }\n                    }}\n                    pointerEvents=\"none\"\n                  >\n                    <DataTable.Cell>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.dropzoneUser?.user?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.jumpType?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {((slot?.ticketType?.altitude || 14000) / 1000)}k\n                      </Paragraph>\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                </SwipeActions>\n              )\n            })\n          }\n          {\n            Array.from({length: (data?.load?.maxSlots || 0) - (data?.load?.slots?.length || 0)}, (v, i) => i).map((i) =>\n              <DataTable.Row key={`${load.id}-empty-slot-${i}`} testID=\"slot-row\">\n                <DataTable.Cell><Paragraph style={styles.slotText}>- Available -</Paragraph></DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"black\", padding: 8 }}>\n          <Paragraph style={{ color: \"#FFFFFF\" }}>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)} testID={ isExpanded ? \"show-less\" : \"show-more\" }>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)} testID=\"dispatch-cancel\">\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button\n                    mode=\"outlined\"\n                    onPress={() => setDispatchOpen(true)}\n                    testID=\"dispatch-button\"\n                  >\n                    Dispatch\n                  </Button>\n                }\n              >\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button\n                style={{ marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => {\n                  if (!data?.load?.loadMaster?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a load master before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n\n                  if (!data?.load?.pilot?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a pilot before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n                  onLanded();\n                }}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                testID=\"manifest-button\"\n                onPress={() => onManifest()}\n                disabled={!showManifestButton || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  slotText: {\n    fontSize: 12\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { actions, useAppSelector, useAppDispatch } from '../../redux';\nimport { actions as snackbar } from \"../../components/notifications\";\n\nimport { Load, Mutation } from '../../graphql/schema';\nimport LoadForm from '../forms/load/LoadForm';\nimport DialogOrSheet from '../layout/DialogOrSheet';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\ninterface ILoadDialog {\n  open: boolean;\n  onClose(): void;\n  onSuccess(load: Load): void;\n}\nexport default function LoadDialog(props: ILoadDialog) {\n  const { open, onClose, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.load);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const dispatch = useAppDispatch();\n  const [mutationCreateLoad, mutation] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: currentDropzoneId,\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(pilot.value?.id) : null,\n            gcaId: gca.value?.user?.id ? Number(gca.value?.user?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.forms.load.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.forms.load.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.forms.load.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.forms.load.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.forms.load.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.forms.load.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            onSuccess(result.data.createLoad.load);\n            dispatch(actions.forms.load.reset());\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <DialogOrSheet\n      open={open}\n      onClose={onClose}\n      buttonAction={onSave}\n      buttonLabel=\"Create\"\n      snapPoints={[\"30%\", 650]}\n      loading={mutation.loading}\n      title=\"New Load\"\n    >\n      <LoadForm />\n    </DialogOrSheet>\n  );\n}\n","import { useIsFocused, useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Dimensions, RefreshControl, StyleSheet, useWindowDimensions } from 'react-native';\nimport { FlatList } from 'react-native-gesture-handler';\nimport { FAB, ProgressBar } from 'react-native-paper';\nimport ManifestUserSheet from '../../../components/dialogs/ManifestUser/ManifestUser';\nimport ManifestGroupSheet from '../../../components/dialogs/ManifestGroup/ManifestGroup';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Load, Permission } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './LoadCard';\nimport LoadDialog from '../../../components/dialogs/Load';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const forms = useAppSelector(state => state.forms);\n  const dispatch = useAppDispatch();\n  const { dropzone, currentUser, loading, refetch } = useCurrentDropzone();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!dropzone?.planes?.length;\n  const hasTicketTypes = !!dropzone?.ticketTypes?.length;\n  const isPublic = !!dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (dropzone?.primaryColor && dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(actions.global.setPrimaryColor(dropzone.primaryColor));\n    }\n\n    if (dropzone?.secondaryColor && dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(actions.global.setPrimaryColor(dropzone.secondaryColor));\n    }\n  }, [\n    dropzone?.primaryColor,\n    dropzone?.secondaryColor\n  ])\n\n  const canCreateLoad = useRestriction(Permission.CreateLoad);\n\n  const onManifest = React.useCallback((load: Load) => {\n    \n    if (!currentUser.hasLicense) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You need to select a license on your user profile\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasMembership) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your membership is out of date\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasRigInspection) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs to be inspected before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasReserveInDate) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs a reserve repack\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasExitWeight) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Update your exit weight on your profile before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasCredits) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You have no credits on your account\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    dispatch(actions.forms.manifest.setOpen(true));\n    dispatch(\n      actions.forms.manifest.setField([\"dropzoneUser\", currentUser])\n    );\n    dispatch(\n      actions.forms.manifest.setField([\"load\", load])\n    );\n  }, [JSON.stringify(dropzone?.currentUser)]);\n\n\n  const { width } = useWindowDimensions(); \n\n  const numColumns = Math.ceil(width / 400) || 1;\n\n  return (\n    <>\n    <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                  { (dropzone?.loads?.edges?.length || 0) < 1\n                    ? <NoResults\n                        title=\"No loads so far today\"\n                        subtitle=\"How's the weather?\"\n                      />\n                    : <FlatList\n                        testID=\"loads\"\n                        keyExtractor={(item) => `load-${item?.node?.id}`}\n                        key={`loads-columns-${numColumns}`}\n                        style={{ flex: 1, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1 }}\n                        numColumns={numColumns}\n                        data={dropzone?.loads?.edges || []}\n                        refreshing={loading}\n                        onRefresh={refetch}\n                        refreshControl={\n                          <RefreshControl refreshing={loading} onRefresh={() => refetch()} />\n                        }\n                        renderItem={({ item: edge, index }) =>\n                          !edge?.node ? null : (\n                            <LoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              onSlotPress={(slot) => {\n                                dispatch(actions.forms.manifest.setOpen(slot));\n                                dispatch(\n                                  actions.forms.manifest.setField([\"load\", edge.node!])\n                                );\n                              }}\n                              onSlotGroupPress={(slots) => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setFromSlots(slots));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                                navigation.navigate(\"ManifestGroupScreen\");\n                              }}\n                              onManifest={() => {\n                                \n                                onManifest(edge.node!)\n                              }}\n                              onManifestGroup={() => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setOpen(true));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                              }}\n                            />\n                        )}\n                    />\n                  }\n\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => dispatch(actions.forms.load.setOpen(true))}\n            label=\"New load\"\n          />\n        )}\n      </View>\n      <ManifestUserSheet\n        open={forms.manifest.open}\n        onClose={() => dispatch(actions.forms.manifest.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifest.setOpen(false))}\n      />\n      <ManifestGroupSheet\n        open={forms.manifestGroup.open}\n        onClose={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n      />\n\n      <LoadDialog\n        onSuccess={() => {\n          dispatch(actions.forms.load.setOpen(false));\n          refetch();\n        }}\n        open={forms.load.open}\n        onClose={() => dispatch(actions.forms.load.setOpen(false))}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"sourceRoot":""}