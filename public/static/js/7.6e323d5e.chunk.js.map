{"version":3,"sources":["components/layout/DialogOrSheet.web.tsx","components/notifications/index.ts","graphql/createQuery.tsx","components/layout/SwipeActions.tsx","components/input/dropdown_select/RigSelect.tsx","graphql/hooks/useQueryDropzoneUsers.ts","components/input/chip_select/DropzoneUserChipSelect.tsx","components/input/chip_select/PlaneChipSelect.tsx","components/forms/load/LoadForm.tsx","components/forms/manifest_group/UserRigCard.tsx","utils/calculateWingLoading.ts","components/forms/manifest_group/ManifestGroupForm.tsx","assets/images/weather.png","components/input/chip_select/JumpTypeChipSelect.tsx","components/input/chip_select/TicketTypeChipSelect.tsx","components/forms/manifest/ManifestForm.tsx","components/dialogs/ManifestUser/ManifestUser.web.tsx","components/dialogs/ManifestGroup/UserListSelect.tsx","components/dialogs/ManifestGroup/ManifestGroup.web.tsx","screens/authenticated/manifest/GetStarted.tsx","screens/authenticated/manifest/SmallLoadCard.tsx","screens/authenticated/manifest/LoadCard.tsx","components/dialogs/Load.tsx","screens/authenticated/manifest/WeatherConditions.tsx","screens/authenticated/manifest/ManifestScreen.tsx"],"names":["DialogOrSheet","props","buttonLabel","buttonAction","title","loading","children","globalState","useAppSelector","state","global","visible","open","dismissable","style","maxWidth","alignSelf","indeterminate","color","theme","colors","accent","Title","Content","pointerEvents","ScrollArea","Actions","justifyContent","onPress","onClose","StyleSheet","create","button","width","borderRadius","padding","contentContainer","paddingHorizontal","paddingBottom","sheet","elevation","backgroundColor","flexGrow","height","display","flexDirection","sheetHeader","borderTopLeftRadius","borderTopRightRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","actions","slice","Notifications","createQuery","query","options","getPayload","opts","variables","onError","dispatch","useAppDispatch","useQuery","data","previousData","refetch","error","transformedData","React","JSON","stringify","message","showSnackbarErrors","notifications","showSnackbar","variant","SwipeActions","rightAction","disabled","ref","enabled","renderRightActions","progress","dragX","scale","interpolate","inputRange","outputRange","translateX","current","close","View","transform","Text","fontWeight","label","useNativeAnimations","QUERY_RIGS","gql","RigSelect","isMenuOpen","setMenuOpen","currentDropzoneId","useLazyQuery","fetchRigs","userId","dropzoneId","Number","value","autoSelectFirst","dropzone","dropzoneUser","availableRigs","length","onSelect","onDismiss","anchor","Item","make","model","canopySize","description","required","left","Icon","icon","map","rig","key","id","user","QUERY_DROPZONE_USERS","dropzoneUsers","DropzoneUserChipSelect","requiredPermissions","useQueryDropzoneUsers","permissions","Subheader","ChipSelect","items","edges","node","selected","filter","Boolean","isSelected","item","renderItemLabel","dzUser","name","isDisabled","onChangeSelected","first","QUERY_PLANES","PlaneChipSelect","uniqBy","planes","Plane","plane","LoadForm","forms","load","TextInput","styles","field","mode","fields","placeholder","onChangeText","newValue","setField","HelperText","type","maxSlots","toString","gca","pilot","Divider","marginVertical","Checkbox","status","isOpen","flex","marginBottom","QUERY_DROPZONE_USERS_MANIFEST_DETAILS","useQueryDropzoneUsersDetails","UserRigCard","exitWeightInKg","canopySizeInFt","dropzoneUserId","onChangeRig","exitWeight","rigId","onChangeExitWeight","console","selectedRig","rigs","find","Card","ProgressBar","image","Image","source","uri","size","ScrollView","horizontal","Chip","marginHorizontal","role","license","round","toFixed","text","keyboardType","QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES","useAllowedJumpTypes","allowedJumpTypes","ticketTypes","jumpTypes","SlotForm","manifestGroup","userIds","users","slotUser","flexShrink","jumpType","includes","ticketType","extras","ticketAddons","extra","some","cost","undefined","newRig","module","exports","JumpTypeChipSelect","QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES","useTicketTypes","TicketTypeChipSelect","onlyPublicTickets","ManifestForm","currentDropzone","useCurrentDropzone","manifest","isEdit","original","allowedToManifestOthers","useRestriction","Permission","UpdateUserSlot","CreateUserSlot","right","Affix","isTandem","passengerName","passengerExitWeight","MUTATION_CREATE_SLOT","ManifestUserDialog","useMutation","mutationCreateSlot","mutationData","validate","hasErrors","setFieldError","onManifest","a","async","jumpTypeId","extraIds","loadId","ticketTypeId","result","createSlot","fieldErrors","errors","onSuccess","Portal","Dialog","maxHeight","Button","reset","UsersScreen","screens","searchText","setSearchText","search","currentUser","canManifestGroup","canManifestGroupWithSelfOnly","CreateUserSlotWithSelf","Searchbar","contentContainerStyle","paddingTop","NoResults","subtitle","edge","selectedUsers","setSelected","setDropzoneUsers","onNext","scrollView","MUTATION_CREATE_SLOTS","mutationCreateSlots","tabIndex","setTabIndex","userGroup","createSlots","sheetRef","snapTo","testID","defaultIndex","onChangeIndex","userListContainer","ManifestGroupForm","buttonContainer","GetStarted","hasPlanes","hasTicketTypes","palette","isPublic","usePalette","separator","lightColor","darkColor","success","container","alignItems","fontSize","QUERY_LOAD","MUTATION_UPDATE_LOAD","LOAD_BADGE_COLOR","successColor","cancelled","errorColor","boarding_call","warningColor","LoadCard","pollInterval","mutationUpdateLoad","updatePilot","pilotId","updatePlane","planeId","loadStates","LoadState","Open","BoardingCall","Cancelled","InFlight","Landed","margin","opacity","Badge","marginTop","marginRight","loadNumber","dispatchAt","isBefore","Date","Countdown","end","cardContent","flexWrap","PlaneChip","small","slots","diff","PilotChip","smallChip","textStyle","smallChipText","overflow","MUTATION_DELETE_SLOT","isExpanded","setExpanded","isDispatchOpen","setDispatchOpen","onManifestGroup","mutation","mutationDeleteSlot","onDeleteSlot","slot","deleteSlot","updateGCA","gcaId","updateLoadMaster","lm","loadMasterId","updateCall","minutes","dispatchTime","addMinutes","getTime","Math","ceil","onLanded","hasLanded","canUpdateLoad","UpdateLoad","canEditSelf","UpdateSlot","canEditOthers","canRemoveSelf","DeleteSlot","canRemoveOthers","DeleteUserSlot","canManifestSelf","CreateSlot","showManifestButton","isFull","showGroupIcon","IconButton","showsHorizontalScrollIndicator","LoadMasterChip","loadMaster","DataTable","Header","numeric","slotGroup","groupNumber","isCurrentUser","Row","onSlotGroupPress","onSlotPress","Cell","Paragraph","slotText","altitude","Array","from","v","i","differenceInMinutes","Menu","marginLeft","fab","position","bottom","MUTATION_CREATE_LOAD","LoadDialog","mutationCreateLoad","hasError","onSave","createLoad","snackbar","snapPoints","WeatherConditions","jumpRun","currentConditions","canUpdate","UpdateWeatherConditions","card","weather","setOpen","ImageBackground","weatherBackground","absoluteFillObject","resizeMode","windboard","row","cell","header","FontAwesome","rotate","orderBy","winds","wind","speed","direction","test","ManifestScreen","manifestScreen","isDisplayOptionsOpen","setDisplayOptionsOpen","fetchMore","navigation","useNavigation","isFocused","useIsFocused","isSetupComplete","primaryColor","primary","setPrimaryColor","secondaryColor","canCreateLoad","CreateLoad","hasLicense","hasMembership","hasRigInspection","hasReserveInDate","hasExitWeight","hasCredits","useWindowDimensions","numColumns","floor","Dimensions","get","ListHeaderComponent","ListEmptyComponent","keyExtractor","loads","refreshControl","RefreshControl","refreshing","onRefresh","renderItem","index","setFromSlots","navigate","FAB","titleStyle","setDisplayStyle","top"],"mappings":"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","file":"static/js/7.6e323d5e.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { useAppSelector } from \"../../redux\";\ninterface IBottomSheetProps {\n  open?: boolean;\n  title?: string;\n  buttonLabel?: string;\n  children: React.ReactNode;\n  loading?: boolean;\n\n  snapPoints?: Array<string | number>;\n  buttonAction?(): void;\n  onClose(): void;\n}\n\nexport default function DialogOrSheet(props: IBottomSheetProps) {\n  const { buttonLabel, buttonAction, title, loading, children } = props;\n  const globalState = useAppSelector(state => state.global);\n\n  return (\n    <Portal>\n      <Dialog visible={!!props.open} dismissable={false} style={{ maxWidth: 500, alignSelf: \"center\" }}>\n        <ProgressBar indeterminate visible={loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          { title }\n        </Dialog.Title>\n        <Dialog.Content pointerEvents=\"box-none\">\n          <Dialog.ScrollArea>\n            <ScrollView>\n              { children }\n            </ScrollView>\n          </Dialog.ScrollArea>\n        </Dialog.Content>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          \n          <Button onPress={buttonAction}>\n            { buttonLabel }\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    height: 40,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import slice from \"./slice\";\nimport Notifications from \"./Notifications\";\n\nconst { actions } = slice;\n\nexport { actions };\nexport default Notifications;\n","import { DocumentNode, useQuery } from \"@apollo/client\";\nimport { Maybe } from \"graphql/jsutils/Maybe\";\nimport * as React from \"react\";\nimport { Query } from \"../graphql/schema\";\nimport { actions, useAppDispatch } from \"../redux\";\n\nexport interface IAppQuery<Payload, InputType> {\n  data: Maybe<Payload>,\n  loading: boolean;\n  refetch(variables?: InputType): void;\n}\n\nexport interface IAppQueryProps<Payload, InputType> {\n  onError?(message: string): void;\n  showSnackbarErrors?: boolean;\n  variables?: InputType;\n}\n\nexport function createQuery<Payload extends any, InputType extends {}>(\n  query: DocumentNode,\n  options: {\n    getPayload(query?: Query): Maybe<Payload>;\n  }\n) {\n  const { getPayload } = options;\n\n  return function useAppQuery(opts: IAppQueryProps<Payload, InputType>): IAppQuery<Payload, InputType> {\n    const { variables, onError } = opts\n    const dispatch = useAppDispatch();\n    \n    const { data, loading, previousData, refetch, error } = useQuery(query, {\n      variables,\n    });\n\n    const transformedData = React.useMemo(() => getPayload(data), [JSON.stringify(data)]);\n\n    React.useEffect(() => {\n      const hasChanged = JSON.stringify(previousData) !== JSON.stringify(data);\n      if (error?.message) {\n        if (opts.showSnackbarErrors !== false) {\n          dispatch(\n            actions.notifications.showSnackbar({ message: error.message, variant: \"error\" })\n          );\n        }\n\n        if (onError) {\n          (error.message);\n        }\n      }\n      \n    }, [opts.onError, error?.message])\n    \n\n    return {\n      loading,\n      data: transformedData,\n      refetch,\n    }    \n  }\n}","import * as React from \"react\";\nimport { Animated } from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport Swipeable from 'react-native-gesture-handler/Swipeable';\n\n\nexport interface ISwipeAction {\n  label: string;\n  \n  backgroundColor?: string;\n  onPress(): void;\n}\nexport interface ISwipeActions {\n  rightAction?: ISwipeAction;\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport default function SwipeActions(props: ISwipeActions) {\n  const { children, rightAction, disabled } = props;\n\n  const ref = React.useRef<any>();\n  const rightActions = (progress: Animated.AnimatedInterpolation, dragX: Animated.AnimatedInterpolation) => {\n    const scale = dragX.interpolate({\n      inputRange: [-100, 0],\n      outputRange: [1.0, 0]\n    })\n\n    const translateX = dragX.interpolate({\n      inputRange: [-150, 0],\n      outputRange: [0, 10]\n    });\n\n    return (\n        <TouchableOpacity\n          onPress={() => {\n            rightAction?.onPress();\n            ref?.current?.close();\n          }}\n        >\n          <Animated.View\n            style={{\n              flexGrow: 1,\n              backgroundColor: rightAction?.backgroundColor,\n              justifyContent: 'center',\n              height: \"100%\",\n              width: 75,\n              transform: [{ translateX }]\n            }}>\n            <Animated.Text\n              style={{\n                color: 'white',\n                paddingHorizontal: 10,\n                fontWeight: '600',\n                transform: [{ scale }]\n              }}>\n              {rightAction?.label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableOpacity>\n    )\n   }\n  return (\n    <Swipeable ref={ref} enabled={!disabled} renderRightActions={rightActions} useNativeAnimations>\n      { children }\n    </Swipeable>\n  )\n}","import { useLazyQuery, useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List, Menu } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Rig, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\n\ninterface IRigSelect {\n  dropzoneId?: number;\n  userId?: number;\n  value?: Rig | null;\n  required?: boolean;\n  autoSelectFirst?: boolean;\n  onSelect(rig: Rig): void;\n}\n\n\nconst QUERY_RIGS = gql`\n  query QueryAvailableRigs(\n    $dropzoneId: Int!\n    $userId: Int!\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      dropzoneUser(userId: $userId) {\n        id\n        availableRigs {\n          id\n          make\n          model\n          canopySize\n          serial\n\n          user {\n            id\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function RigSelect(props: IRigSelect) {\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const [fetchRigs, { data, }] = useLazyQuery<Query>(QUERY_RIGS);\n\n  React.useEffect(() => {\n    if (props.userId && props.dropzoneId) {\n      fetchRigs({\n        variables: {\n          dropzoneId: currentDropzoneId,\n          userId: Number(props.userId)\n        }\n      });\n    }\n  }, [props.userId, props.dropzoneId])\n\n  React.useEffect(() => {\n    if (!props.value && props.autoSelectFirst && data?.dropzone?.dropzoneUser?.availableRigs?.length) {\n      props.onSelect(data.dropzone.dropzoneUser.availableRigs[0]);\n    }\n  }, [props.autoSelectFirst, JSON.stringify(data?.dropzone?.dropzoneUser?.availableRigs)])\n  \n  return (\n    <Menu\n      onDismiss={() => setMenuOpen(false)}\n      visible={isMenuOpen}\n      anchor={\n        <List.Item\n          onPress={() => {\n            setMenuOpen(true);\n          }}\n          title={\n            props.value\n            ? `${props.value?.make} ${props.value?.model} (${props.value?.canopySize || \"?\"}sqft)`\n            : 'Select rig'\n          }\n          description={!props.required ? \"Optional\" : null}\n          left={() => <List.Icon icon=\"parachute\" />}\n        />\n      }>\n      {\n        data?.dropzone?.dropzoneUser?.availableRigs?.map((rig) => \n          <Menu.Item\n            key={`rig-select-${rig.id}`}\n            onPress={() => {\n              setMenuOpen(false);\n              props.onSelect(rig);\n            }}\n            style={{ width: \"100%\" }}\n            title={\n              `${rig?.make} ${rig?.model} (${rig?.canopySize} sqft) ${!rig.user ? \"[DROPZONE RIG]\": \"\"}`\n            }\n          />\n        )\n      }\n    </Menu>\n  )\n}","import gql from \"graphql-tag\";\nimport { createQuery } from \"../createQuery\";\nimport { Query } from \"../schema\";\n\n\nconst QUERY_DROPZONE_USERS = gql`\nquery QueryDropzoneUsers(\n  $dropzoneId: Int!\n  $permissions: [Permission!]\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUsers(permissions: $permissions) {\n      edges {\n        node {\n          id\n          role {\n            id\n            name\n          }\n          user {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n}\n`;\n\nexport default createQuery<Query[\"dropzone\"][\"dropzoneUsers\"], {\n  dropzoneId: number,\n  permissions: string[],\n }>(QUERY_DROPZONE_USERS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUsers,\n });","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport useQueryDropzoneUsers from \"../../../graphql/hooks/useQueryDropzoneUsers\";\nimport { DropzoneUser } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IDropzoneUserChipSelect {\n  value?: DropzoneUser | null;\n  label: string;\n  icon?: string;\n  required?: boolean;\n  requiredPermissions: string[];\n  onSelect(dzuser: DropzoneUser): void;\n}\n\nexport default function DropzoneUserChipSelect(props: IDropzoneUserChipSelect) {\n  const { label, requiredPermissions, icon, required, value } = props;\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n\n  const { data, loading, refetch } = useQueryDropzoneUsers({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      permissions: requiredPermissions\n    },\n    onError: (message) =>\n      dispatch(actions.notifications.showSnackbar({ message, variant: \"error\" }))\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        {label}\n      </List.Subheader>\n      <ChipSelect<DropzoneUser>\n        autoSelectFirst\n        icon={icon || \"account\"}\n        items={data?.edges?.map(({ node }) => node) || []}\n        selected={[props.value].filter(Boolean) as DropzoneUser[]}\n        isSelected={(item) => item.id === value?.id}\n        renderItemLabel={(dzUser) => dzUser?.user.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import { useQuery } from \"@apollo/client\";\nimport gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { Plane, Query } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IPlaneSelect {\n  value?: Plane | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: Plane): void;\n}\n\nconst QUERY_PLANES = gql`\n  query QuerySelectPlanes(\n    $dropzoneId: Int!\n  ) {\n    planes(dropzoneId: $dropzoneId) {\n      id\n      name\n      registration\n      hours\n      minSlots\n      maxSlots\n      nextMaintenanceHours\n      createdAt\n    }\n  }\n`;\n\nexport default function PlaneChipSelect(props: IPlaneSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading, refetch } = useQuery<Query>(QUERY_PLANES, {\n    variables: {\n      dropzoneId: currentDropzoneId,\n    }\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Aircraft\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.planes || []),\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(Plane) => Plane?.name}\n        isDisabled={(plane) => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { TextInput, HelperText, Checkbox, Divider, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport PlaneSelect from '../../input/dropdown_select/PlaneSelect';\nimport DropzoneUserSelect from '../../input/dropdown_select/DropzoneUserSelect';\nimport DropzoneUserChipSelect from '../../input/chip_select/DropzoneUserChipSelect';\nimport PlaneChipSelect from '../../input/chip_select/PlaneChipSelect';\n\nexport default function LoadForm() {\n  const state = useAppSelector(state => state.forms.load);\n  const dispatch = useAppDispatch();\n  const globalState = useAppSelector(state => state.global);\n\n\n  return ( \n    <>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Name\"\n        error={!!state.fields.name.error}\n        placeholder=\"Optional\"\n        value={state.fields.name.value || \"\"}\n        \n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"name\", newValue]))}\n      />\n      <HelperText type={!!state.fields.name.error ? \"error\" : \"info\"}>\n        { state.fields.name.error || \"e.g Starcrest load, Tandem load\" }\n      </HelperText>\n\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Slots\"\n        error={!!state.fields.maxSlots.error}\n        value={state.fields.maxSlots?.value?.toString()}\n        onChangeText={(newValue) => dispatch(actions.forms.load.setField([\"maxSlots\", Number(newValue)]))}\n      />\n      <HelperText type={!!state.fields.maxSlots.error ? \"error\" : \"info\"}>\n        { state.fields.maxSlots.error || \"\" }\n      </HelperText>\n      <View style={{ width: \"100%\"}}>\n        <PlaneChipSelect\n          value={state.fields.plane.value}\n          required\n          onSelect={(value) => {\n            dispatch(actions.forms.load.setField([\"plane\", value]));\n            dispatch(actions.forms.load.setField([\"maxSlots\", value.maxSlots]));\n          }}\n        />\n        <HelperText type={!!state.fields.plane.error ? \"error\" : \"info\"}>\n          { state.fields.plane.error || \"\" }\n        </HelperText>\n        \n\n        \n        <DropzoneUserChipSelect\n          label=\"GCA\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"gca\", dzUser]))}\n          value={state.fields.gca.value || null}\n          requiredPermissions={[\"actAsGCA\"]}\n          required\n        />\n        <HelperText type={!!state.fields.gca.error ? \"error\" : \"info\"}>\n          { state.fields.gca.error || \"\" }\n        </HelperText>\n        \n        <DropzoneUserChipSelect\n          label=\"Pilot\"\n          onSelect={dzUser => dispatch(actions.forms.load.setField([\"pilot\", dzUser]))}\n          value={state.fields.pilot.value || null}\n          requiredPermissions={[\"actAsPilot\"]}\n        />\n        <HelperText type={!!state.fields.pilot.error ? \"error\" : \"info\"}>\n          { state.fields.pilot.error || \"\" }\n        </HelperText>\n\n        <Divider style={{ marginVertical: 8 }} />\n      \n        <Checkbox.Item\n          label=\"Allow public manifesting\"\n          status={!!state.fields.isOpen.value\n            ? \"checked\"\n            : \"unchecked\"\n          }\n          onPress={\n            () => dispatch(actions.forms.load.setField([\"isOpen\", !state.fields.isOpen.value]))\n          }\n        />\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    width: \"100%\"\n  },\n  field: {\n    marginBottom: 8,\n    width: \"100%\"\n  }\n})\n","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Avatar, Card, TextInput, ProgressBar, Chip, Divider } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport { Query, Rig } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport calculateWingLoading from \"../../../utils/calculateWingLoading\";\nimport RigSelect from \"../../input/dropdown_select/RigSelect\";\n\n\ninterface IUserRigCard {\n  dropzoneUserId: number;\n  dropzoneId: number;\n  exitWeight?: number;\n  onChangeExitWeight(weight: number): void;\n  rigId?: number;\n  onChangeRig(rig: Rig): void;\n}\n\nconst QUERY_DROPZONE_USERS_MANIFEST_DETAILS = gql`\nquery QueryDropzoneUsersManifestDetails(\n  $dropzoneId: Int!\n  $dropzoneUserId: Int!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n    name\n\n    dropzoneUser(id: $dropzoneUserId) {\n      id\n\n      user {\n        id\n        name\n        exitWeight\n        license {\n          id\n          name\n        }\n        rigs {\n          id\n          make\n          model\n          canopySize\n        }\n      }\n      role {\n        id\n        name\n      }\n      user {\n        id\n        name\n        image\n      }\n    }\n  }\n}\n`;\nconst useQueryDropzoneUsersDetails = createQuery<Query[\"dropzone\"][\"dropzoneUser\"], {\n  dropzoneId: number,\n  dropzoneUserId: number,\n }>(QUERY_DROPZONE_USERS_MANIFEST_DETAILS, {\n   getPayload: (query) => query?.dropzone?.dropzoneUser,\n });\n\nexport default function UserRigCard(props: IUserRigCard) {\n\n  const { dropzoneId, dropzoneUserId, onChangeRig, exitWeight, rigId, onChangeExitWeight } = props;\n  const { global: globalState } = useAppSelector(state => state);\n\n  const { data, loading } = useQueryDropzoneUsersDetails({\n    variables: {\n      dropzoneUserId,\n      dropzoneId\n    },\n    onError: console.error\n  });\n\n  const selectedRig = data?.user?.rigs?.find(({ id }) => Number(id) === rigId);\n\n  React.useEffect(() => {\n    if (!exitWeight && data?.user?.exitWeight) {\n      onChangeExitWeight(Number(data.user.exitWeight));\n    }\n  }, [data?.user?.exitWeight])\n  return (\n    <Card style={{ width: \"100%\"}} elevation={3}>\n      <ProgressBar indeterminate color={globalState.theme.colors.accent} visible={loading} />\n      <Card.Title\n        title={data?.user.name}\n        left={() =>\n          data?.user?.image\n          ? <Avatar.Image source={{ uri: data.user.image }} size={24} />\n          : <Avatar.Icon icon=\"account\" size={24} />\n        }\n      />\n      \n      <Card.Content>\n        <Divider style={{ marginBottom: 8 }} />\n        <ScrollView horizontal>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"lock\" mode=\"outlined\" disabled>{data?.role?.name}</Chip>\n          <Chip style={{ marginHorizontal: 1 }} icon=\"ticket-account\" mode=\"outlined\" disabled>{data?.user?.license?.name}</Chip>\n          {\n            !selectedRig || !exitWeight || !selectedRig.canopySize\n              ? null\n              : <Chip style={{ marginHorizontal: 1 }} icon=\"escalator-down\" mode=\"outlined\" disabled>{calculateWingLoading(exitWeight, selectedRig.canopySize!)}</Chip>\n                  \n          }\n        </ScrollView>\n        <RigSelect\n          userId={dropzoneUserId}\n          dropzoneId={dropzoneId}\n          onSelect={onChangeRig}\n          value={selectedRig}\n          autoSelectFirst\n        />\n\n        <TextInput\n          value={!exitWeight ? \"\" : `${exitWeight}`}\n          onChangeText={(text: string) => onChangeExitWeight(Number(text))}\n          keyboardType=\"number-pad\"\n          label=\"Exit weight\"\n          mode=\"outlined\"\n        />\n      </Card.Content>\n    </Card>\n  );\n}","import { round } from \"lodash\";\n\nexport default function calculateWingLoading(exitWeightInKg: number, canopySizeInFt: number) {\n  return round((2.20462 * exitWeightInKg) / canopySizeInFt, 2).toFixed(2);\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { HelperText, Divider, Chip, List, Card } from 'react-native-paper';\nimport gql from 'graphql-tag';\nimport { uniqBy } from 'lodash';\n\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\n\nimport ChipSelect from '../../input/chip_select/ChipSelect';\nimport { createQuery } from '../../../graphql/createQuery';\nimport { JumpType, TicketType } from '../../../graphql/schema';\n\nimport UserRigCard from \"./UserRigCard\";\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\nconst QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n\n    ticketTypes(isPublic: true) {\n      id\n      name\n      cost\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[], ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function SlotForm() {\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: state.fields.users?.value?.map((slotUser) => slotUser.id) as number[],\n      dropzoneId: globalState.currentDropzoneId,\n    },\n    onError: console.error\n  });\n\n  return ( \n    <>\n      <List.Subheader>Jump type</List.Subheader>\n      <Card elevation={2} style={{ marginBottom: 16, flexShrink: 1 }}>\n        <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={uniqBy([\n                  ...(data?.allowedJumpTypes || []),\n                  ...(data?.jumpTypes || [])\n                ], ({ id }) => id) || []\n              }\n              selected={state.fields.jumpType.value ? [state.fields.jumpType.value] : []}\n              renderItemLabel={(jumpType) => jumpType.name}\n              isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType.id)}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"jumpType\", first]))\n              }\n            />\n            \n            <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n              { state.fields.jumpType.error || \"\" }\n            </HelperText>\n          </Card.Content>\n        </Card>\n\n        <List.Subheader>Ticket</List.Subheader>\n        <Card elevation={2} style={{ width: \"100%\" }}>\n          <Card.Content>\n            <ChipSelect\n              autoSelectFirst\n              items={data?.ticketTypes || []}\n              selected={state.fields.ticketType.value ? [state.fields.ticketType.value] : []}\n              renderItemLabel={(ticketType) => ticketType.name}\n              isDisabled={() => false}\n              onChangeSelected={([first]) =>\n                dispatch(actions.forms.manifestGroup.setField([\"ticketType\", first]))\n              }\n            />\n            <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n              { state.fields.ticketType.error || \"\" }\n            </HelperText>\n\n          {\n            !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n              <List.Subheader>\n                Ticket addons\n              </List.Subheader>\n            )\n          }\n          <ScrollView horizontal style={styles.ticketAddons}>\n            {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n              <Chip\n                selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n                onPress={\n                  state?.fields?.extras.value?.some(({id}) => id === extra.id)\n                  ? () => dispatch(actions.forms.manifestGroup.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n                  : () => dispatch(actions.forms.manifestGroup.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n                }\n              >\n                {`${extra.name} ($${extra.cost})`}\n              </Chip>\n            )}\n          </ScrollView>\n          <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n            { state.fields.extras.error || \"\" }\n          </HelperText>\n      </Card.Content>\n    </Card>\n    <Divider />\n        \n\n      <List.Subheader>Group</List.Subheader>\n      {\n        state.fields?.users?.value?.map((slotUser) =>\n          <UserRigCard\n            dropzoneId={globalState.currentDropzoneId}\n            dropzoneUserId={Number(slotUser.id)}\n            rigId={Number(slotUser.rigId) || undefined}\n            exitWeight={slotUser.exitWeight}\n            onChangeExitWeight={(exitWeight) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, exitWeight }\n                    : user\n                  )\n                ]))\n            }\n            onChangeRig={(newRig) =>\n              dispatch(\n                actions.forms.manifestGroup.setField([\n                  \"users\", state.fields.users.value?.map((user) => user.id === slotUser.id\n                    ? { ...slotUser, rigId: Number(newRig.id) }\n                    : user\n                  )\n                ]))\n            }\n          />\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","module.exports = __webpack_public_path__ + \"static/media/weather.0908eb6b.png\";","import gql from \"graphql-tag\";\nimport { uniqBy } from \"lodash\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { JumpType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface IJumpTypeSelect {\n  value?: JumpType | null;\n  required?: boolean;\n  userId?: number | null;\n  onSelect(jt: JumpType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES = gql`\nquery DropzoneUsersAllowedJumpTypes(\n  $dropzoneId: Int!,\n  $userIds: [Int!]!\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    allowedJumpTypes(userId: $userIds) {\n      id\n      name\n    }\n  }\n  jumpTypes {\n    id\n    name\n  }\n}\n\n`;\n\nconst useAllowedJumpTypes = createQuery<{ jumpTypes: JumpType[], allowedJumpTypes: JumpType[] }, {\n  dropzoneId: number,\n  userIds: number[],\n }>(QUERY_DROPZONE_USERS_ALLOWED_JUMP_TYPES, {\n   getPayload: (query) => ({\n     allowedJumpTypes: query?.dropzone?.allowedJumpTypes || [],\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n     jumpTypes: query?.jumpTypes || [],\n   })\n });\n\nexport default function JumpTypeChipSelect(props: IJumpTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  const { data, loading } = useAllowedJumpTypes({\n    variables: {\n      userIds: [Number(props.userId) || null].filter(Boolean) as number[],\n      dropzoneId: Number(currentDropzoneId),\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Jump type\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={uniqBy([\n            ...(data?.allowedJumpTypes || []),\n            ...(data?.jumpTypes || [])\n          ], ({ id }) => id) || []\n        }\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(jumpType) => jumpType?.name}\n        isDisabled={(jumpType) => !data?.allowedJumpTypes?.map(({ id }) => id).includes(jumpType!.id)}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import gql from \"graphql-tag\";\nimport * as React from \"react\";\nimport { List } from \"react-native-paper\";\nimport { createQuery } from \"../../../graphql/createQuery\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { TicketType } from \"../../../graphql/schema.d\";\nimport { useAppSelector } from \"../../../redux\";\nimport ChipSelect from \"./ChipSelect\";\n\n\ninterface ITicketTypeSelect {\n  value?: TicketType | null;\n  required?: boolean;\n  onlyPublicTickets?: boolean;\n  onSelect(jt: TicketType): void;\n}\n\nexport const QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES = gql`\nquery DropzoneUsersAllowedTicketTypes(\n  $dropzoneId: Int!,\n  $onlyPublicTickets: Boolean\n) {\n  dropzone(id: $dropzoneId) {\n    id\n\n    ticketTypes(isPublic: $onlyPublicTickets) {\n      id\n      name\n      cost\n      isTandem\n\n      extras {\n        id\n        cost\n        name\n      }\n    }\n  }\n}\n\n`;\n\nconst useTicketTypes = createQuery<{ ticketTypes: TicketType[] }, {\n  dropzoneId: number,\n  onlyPublicTickets?: boolean | null\n }>(QUERY_DROPZONE_USERS_ALLOWED_TICKET_TYPES, {\n   getPayload: (query) => ({\n     ticketTypes: query?.dropzone?.ticketTypes || [],\n   })\n });\n\nexport default function TicketTypeChipSelect(props: ITicketTypeSelect) {\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const { data, loading } = useTicketTypes({\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      onlyPublicTickets: props.onlyPublicTickets || null,\n    },\n    onError: console.error\n  });\n\n  return (\n    <>\n      <List.Subheader>\n        Ticket\n      </List.Subheader>\n      <ChipSelect\n        autoSelectFirst\n        items={data?.ticketTypes || []}\n        selected={[props.value].filter(Boolean)}\n        renderItemLabel={(ticketType) => ticketType?.name}\n        isDisabled={() => false}\n        onChangeSelected={([first]) =>\n          first ? props.onSelect(first) : null\n        }\n      />\n    </>\n  )\n}","import * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { TextInput, HelperText, Divider, Chip, List } from 'react-native-paper';\nimport { actions, useAppSelector, useAppDispatch } from '../../../redux';\n\nimport { Permission } from '../../../graphql/schema.d';\nimport JumpTypeChipSelect from '../../input/chip_select/JumpTypeChipSelect';\nimport TicketTypeChipSelect from '../../input/chip_select/TicketTypeChipSelect';\nimport useRestriction from '../../../hooks/useRestriction';\nimport RigSelect from '../../input/dropdown_select/RigSelect';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\nexport default function ManifestForm() {\n  \n  const dispatch = useAppDispatch();\n  const currentDropzone = useCurrentDropzone();\n  const state = useAppSelector(state => state.forms.manifest);\n  React.useEffect(() => {\n    if (state.fields.dropzoneUser?.value) {\n      if (!state.fields.exitWeight.value) {\n        dispatch(\n          actions.forms.manifest.setField([\"exitWeight\", Number(state.fields.dropzoneUser?.value?.user?.exitWeight || 60)])\n        );\n      }\n\n      if (!state.fields.rig.value && state.fields.dropzoneUser.value.user?.rigs?.length) {\n        dispatch(\n          actions.forms.manifest.setField([\"rig\", state.fields.dropzoneUser?.value?.user.rigs[0]])\n        );\n      }\n\n    }\n  }, [state.fields?.dropzoneUser?.value?.id]);\n\n  const isEdit = state?.original?.id;\n\n  const allowedToManifestOthers = useRestriction(\n    isEdit ? Permission.UpdateUserSlot : Permission.CreateUserSlot\n  )\n\n  return ( \n    <> \n      <JumpTypeChipSelect\n        value={state.fields.jumpType.value}\n        required\n        userId={Number(state?.fields?.dropzoneUser?.value?.user?.id) || null}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"jumpType\", value]))}\n      />\n      <HelperText type={!!state.fields.jumpType.error ? \"error\" : \"info\"}>\n        { state.fields.jumpType.error || \"\" }\n      </HelperText>\n\n      <TicketTypeChipSelect\n        value={state.fields.ticketType.value}\n        required\n        onlyPublicTickets={!allowedToManifestOthers}\n        onSelect={(value) => dispatch(actions.forms.manifest.setField([\"ticketType\", value]))}\n      />\n      <HelperText type={!!state.fields.ticketType.error ? \"error\" : \"info\"}>\n        { state.fields.ticketType.error || \"\" }\n      </HelperText>\n\n      {\n        !state?.fields?.ticketType?.value?.extras?.length ? null:  (\n          <List.Subheader>\n            Ticket addons\n          </List.Subheader>\n        )\n      }\n      <ScrollView horizontal style={styles.ticketAddons}>\n        {state?.fields?.ticketType?.value?.extras?.map((extra) =>\n          <Chip\n            selected={state?.fields?.extras.value?.some(({id}) => id === extra.id)}\n            onPress={\n              state?.fields?.extras.value?.some(({id}) => id === extra.id)\n              ? () => dispatch(actions.forms.manifest.setField([\"extras\", state?.fields?.extras.value?.filter(({ id }) => id !== extra.id)]))\n              : () => dispatch(actions.forms.manifest.setField([\"extras\", [...(state?.fields?.extras?.value || []), extra]]))\n            }\n          >\n            {`${extra.name} ($${extra.cost})`}\n          </Chip>\n        )}\n      </ScrollView>\n      <HelperText type={!!state.fields.extras.error ? \"error\" : \"info\"}>\n        { state.fields.extras.error || \"\" }\n      </HelperText>\n      <Divider />\n      { !state.fields.dropzoneUser ? null :\n        <RigSelect\n          value={state.fields.rig.value}\n          userId={Number(state.fields.dropzoneUser?.value?.user?.id)}\n          dropzoneId={Number(currentDropzone?.dropzone?.id)}\n          onSelect={(value) => dispatch(actions.forms.manifest.setField([\"rig\", value]))}\n        />}\n      <HelperText type={!!state.fields.rig.error ? \"error\" : \"info\"}>\n        { state.fields.rig.error || \"\" }\n      </HelperText>\n      <TextInput\n        style={styles.field}\n        mode=\"outlined\"\n        label=\"Exit weight\"\n        error={!!state.fields.exitWeight.error}\n        value={state.fields.exitWeight?.value?.toString() || \"\"}\n        keyboardType=\"numbers-and-punctuation\"\n        right={() => <TextInput.Affix text=\"kg\" />}\n        onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"exitWeight\", Number(newValue)]))}\n      />\n      \n      <HelperText type={!!state.fields.exitWeight.error ? \"error\" : \"info\"}>\n        { state.fields.exitWeight.error || \"\" }\n      </HelperText>\n\n      {\n        !state.fields.ticketType.value?.isTandem ? null : (\n          <>\n            <List.Subheader>Passenger</List.Subheader>\n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger name\"\n              error={!!state.fields.passengerName.error}\n              value={state.fields.passengerName?.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerName\", newValue]))}\n            />\n            \n            <TextInput\n              style={styles.field}\n              mode=\"outlined\"\n              label=\"Passenger exit weight\"\n              error={!!state.fields.passengerExitWeight.error}\n              value={state.fields.passengerExitWeight.value?.toString() || \"\"}\n              onChangeText={(newValue) => dispatch(actions.forms.manifest.setField([\"passengerExitWeight\", Number(newValue)]))}\n            />\n          </>\n        )\n      }\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  fields: {\n    flex: 1,\n    \n  },\n  field: {\n    marginBottom: 8,\n  },\n  ticketAddons: {\n    marginBottom: 8\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { ScrollView } from \"react-native\";\nimport { Button, Dialog, Portal, ProgressBar } from \"react-native-paper\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport SlotForm from \"../../forms/manifest/ManifestForm\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOT = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $rigId: Int\n    $ticketTypeId: Int\n    $dropzoneUserId: Int\n    $exitWeight: Float\n    $passengerName: String\n    $passengerExitWeight: Float\n  ) {\n    createSlot(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          rigId: $rigId\n          ticketTypeId: $ticketTypeId\n          dropzoneUserId: $dropzoneUserId\n          exitWeight: $exitWeight\n          passengerExitWeight: $passengerExitWeight\n          passengerName: $passengerName\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      slot {\n        id\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n        exitWeight\n        load {\n          id\n          name\n          createdAt\n          dispatchAt\n          hasLanded\n          maxSlots\n          isFull\n          isOpen\n          plane {\n            id\n            name\n          }\n          gca {\n            id\n            user {\n              id\n              name\n            }\n          }\n          pilot {\n            id\n            user {\n              id\n              name\n            }\n          }\n          loadMaster {\n            id\n            user {\n              id\n              name\n            }\n          }\n          slots {\n            id\n            createdAt\n            user {\n              id\n              name\n            }\n            passengerName\n            passengerExitWeight\n            ticketType {\n              id\n              name\n              isTandem\n              altitude\n            }\n            jumpType {\n              id\n              name\n            }\n            extras {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifest);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlot, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOT);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifest.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlot({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          rigId: !state.fields.rig.value?.id ? null : Number(state.fields.rig.value?.id),\n          ticketTypeId: Number(state.fields.ticketType?.value?.id),\n          dropzoneUserId: Number(state.fields.dropzoneUser?.value?.id),\n          exitWeight: state.fields.exitWeight.value,\n          ...!state.fields.ticketType.value?.isTandem\n            ? {}\n            : {\n                passengerName: state.fields.passengerName?.value,\n                passengerExitWeight: state.fields.passengerExitWeight?.value,\n              }\n        }\n      });\n\n      result.data?.createSlot?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifest.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifest.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifest.setFieldError([\"ticketType\", message]));\n          case \"rig\":\n            return dispatch(actions.forms.manifest.setFieldError([\"rig\", message]));\n          case \"dropzone_user\":\n            return dispatch(actions.forms.manifest.setFieldError([\"dropzoneUser\", message]));\n          case \"exit_weight\":\n            return dispatch(actions.forms.manifest.setFieldError([\"exitWeight\", message]));\n        }\n      });\n      if (result?.data?.createSlot?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlot?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlot?.fieldErrors?.length) {\n        props.onSuccess();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlot, props.onSuccess])\n  \n  return (\n    <Portal>\n      <Dialog visible={!!props.open} style={{ maxHeight: 500 }}>\n        <ProgressBar indeterminate visible={mutationData.loading} color={globalState.theme.colors.accent} />\n        <Dialog.Title>\n          {`Manifest ${state?.fields?.dropzoneUser?.value?.user?.name} on ${state.fields.load?.value?.name}`}\n        </Dialog.Title>\n        <Dialog.ScrollArea>\n          <ScrollView>\n            <SlotForm />\n          </ScrollView>\n        </Dialog.ScrollArea>\n        <Dialog.Actions style={{ justifyContent: \"flex-end\"}}>\n          <Button\n            onPress={() => {\n              dispatch(actions.forms.manifest.reset());\n              props.onClose();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button onPress={onManifest}>\n            Manifest\n          </Button>\n        </Dialog.Actions>\n      </Dialog>\n    </Portal>\n  )\n}","import { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { Avatar, Button, Checkbox, Divider, List, Searchbar } from 'react-native-paper';\nimport { ScrollView } from \"react-native-gesture-handler\";\n\nimport NoResults from '../../../components/NoResults';\nimport { Permission, Query } from '../../../graphql/schema.d';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport useRestriction from '../../../hooks/useRestriction';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\n\n\n\nconst QUERY_DROPZONE_USERS = gql`\n  query QueryDropzoneUsersSearch(\n    $dropzoneId: Int!\n    $search: String\n  ) {\n    dropzone(id: $dropzoneId) {\n      id\n      name\n\n      dropzoneUsers(search: $search, licensed: true) {\n        edges {\n          node {\n            id\n            role {\n              id\n              name\n            }\n            user {\n              id\n              image\n              name\n              exitWeight\n            }\n\n            availableRigs {\n              id\n              make\n              model\n              canopySize\n              serial\n\n              user {\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\ninterface IUserListSelect {\n  onNext(): void;\n}\n\nexport default function UsersScreen(props: IUserListSelect) {\n  const { screens } = useAppSelector(state => state);\n  const dispatch = useAppDispatch();\n  const [searchText, setSearchText] = React.useState(\"\");\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n\n  const { data, loading } = useQuery<Query>(QUERY_DROPZONE_USERS, {\n    variables: {\n      dropzoneId: Number(currentDropzoneId),\n      search: searchText,\n    }\n  });\n\n  const { currentUser } = useCurrentDropzone();\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  return (\n    <>\n    <Searchbar\n      value={searchText}\n      onChangeText={setSearchText}\n      placeholder=\"Search skydivers\"\n    />\n    <View style={{ height: 380}}>\n    <ScrollView contentContainerStyle={{ paddingTop: 16 }}>\n      { !data?.dropzone?.dropzoneUsers?.edges?.length && (\n        <NoResults title=\"No users\" subtitle=\"\" />\n      )}\n\n      { data?.dropzone?.dropzoneUsers?.edges?.map((edge) =>\n      <>\n        <List.Item\n          style={{ width: \"100%\"}}\n          key={`user-${edge?.node?.id}`}\n          title={edge?.node?.user.name}\n          description={edge?.node?.role?.name}\n          left={() =>\n            !edge?.node?.user?.image\n              ? <List.Icon icon=\"account\" />\n              : <Avatar.Image source={{ uri: edge?.node?.user.image }} style={{ alignSelf: \"center\", marginHorizontal: 12 }} size={32} />\n          }\n          right={() => \n            <Checkbox\n              status={\n                screens.manifest.selectedUsers?.map(({ id }) => id).includes(edge!.node!.id)\n                ? \"checked\"\n                : \"unchecked\"\n              }\n            />\n          }\n          disabled={\n          // Dont allow removing current user if the user\n            // can only manifest a group with themselves in it\n            edge?.node?.user.id === currentUser?.id && (\n              canManifestGroupWithSelfOnly && !canManifestGroup\n            )  \n          }\n          onPress={\n            () => {\n              dispatch(\n                actions.screens.manifest.setSelected(\n                  screens.manifest.selectedUsers?.find(({ id }) => id === `${edge?.node?.id}`)\n                  ? screens.manifest.selectedUsers?.filter(({ id }) => id !== `${edge?.node?.id}`)\n                  : [...screens.manifest.selectedUsers, edge!.node!],\n                )\n              );\n          }}\n        />\n        <Divider style={{ width: \"100%\" }} key={`divider-${edge?.node!.id}`}/>\n        </>\n      )}\n    </ScrollView>\n    </View>\n    <Button\n      onPress={() => {\n        dispatch(actions.forms.manifestGroup.setDropzoneUsers(screens.manifest.selectedUsers));\n        props.onNext();\n      }}\n      style={styles.button}\n      mode=\"contained\"\n    >\n      Next\n    </Button>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  scrollView: {\n    height: 100,\n  }\n});\n","import { gql, useMutation } from \"@apollo/client\";\nimport * as React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { ScrollView } from \"react-native-gesture-handler\";\nimport { Button, Dialog, Portal } from \"react-native-paper\";\nimport { Tabs, TabScreen, useTabNavigation } from 'react-native-paper-tabs';\nimport BottomSheet, { BottomSheetBackdrop } from \"@gorhom/bottom-sheet\";\nimport { Mutation } from \"../../../graphql/schema.d\";\nimport { actions, useAppDispatch, useAppSelector } from \"../../../redux\";\nimport ManifestGroupForm from \"../../forms/manifest_group/ManifestGroupForm\";\nimport UserListSelect from \"./UserListSelect\";\ninterface IManifestUserDialog {\n  open?: boolean;\n  onClose(): void;\n  onSuccess(): void;\n}\n\nconst MUTATION_CREATE_SLOTS = gql`\n  mutation CreateSlot(\n    $jumpTypeId: Int\n    $extraIds: [Int!]\n    $loadId: Int\n    $ticketTypeId: Int\n    $userGroup: [SlotUser!]!,\n  ) {\n    createSlots(\n      input: {\n        attributes: {\n          jumpTypeId: $jumpTypeId\n          extraIds: $extraIds\n          loadId: $loadId\n          ticketTypeId: $ticketTypeId\n          userGroup: $userGroup,\n        }\n      }\n    ) {\n      errors\n      fieldErrors {\n        field\n        message\n      }\n      \n      load {\n        id\n        name\n        loadNumber\n        createdAt\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          user {\n            id\n            name\n          }\n          passengerName\n          passengerExitWeight\n          ticketType {\n            id\n            name\n            isTandem\n            altitude\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction NextStepButton() {\n  const setTab = useTabNavigation();\n\n  return (\n    <Button\n      onPress={() => setTab(1)} \n      style={styles.button}\n    >\n      Next\n    </Button>\n  )\n}\nexport default function ManifestUserDialog(props: IManifestUserDialog) {\n  const { open } = props;\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.forms.manifestGroup);\n  const globalState = useAppSelector(state => state.global);\n  const [mutationCreateSlots, mutationData] = useMutation<Mutation>(MUTATION_CREATE_SLOTS);\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const validate = React.useCallback(() => {\n    let hasErrors = false;\n    if (!state.fields.jumpType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"jumpType\", \"You must specify the type of jump\"])\n      );\n    }\n\n    if (!state.fields.ticketType.value?.id) {\n      hasErrors = true;\n      dispatch(\n        actions.forms.manifestGroup.setFieldError([\"ticketType\", \"You must select a ticket type to manifest\"])\n      );\n    }\n\n    return !hasErrors;\n  }, [JSON.stringify(state.fields)]);\n  const onManifest = React.useCallback(async () => {\n\n    if (!validate()) {\n      return;\n    }\n    try {\n      const result = await mutationCreateSlots({\n        variables: {\n          jumpTypeId: Number(state.fields.jumpType.value?.id),\n          ticketTypeId: Number(state.fields.ticketType.value?.id),\n          extraIds: state.fields.extras?.value?.map(({ id }) => Number(id)),\n          loadId: Number(state.fields.load.value?.id),\n          userGroup: state.fields.users.value,\n        }\n      });\n\n      result.data?.createSlots?.fieldErrors?.map(({ field, message }) => {\n        switch (field) {\n          case \"jump_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"jumpType\", message]));\n          case \"load\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"load\", message]));\n          case \"credits\":\n          case \"extras\":\n          case \"extra_ids\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"extras\", message]));\n          case \"ticket_type\":\n            return dispatch(actions.forms.manifestGroup.setFieldError([\"ticketType\", message]));\n        }\n      });\n      if (result?.data?.createSlots?.errors?.length) {\n        return dispatch(actions.notifications.showSnackbar({ message: result?.data?.createSlots?.errors[0], variant: \"error\" }));\n      }\n      if (!result.data?.createSlots?.fieldErrors?.length) {\n        props.onClose();\n      }\n\n    } catch(error) {\n      dispatch(actions.notifications.showSnackbar({ message: error.message, variant: \"error\" }));\n    } \n  }, [JSON.stringify(state.fields), mutationCreateSlots, props.onSuccess])\n  \n  \n  const sheetRef = React.useRef<BottomSheet>(null);\n\n  React.useEffect(() => {\n    if (state.fields.ticketType?.value?.isTandem) {\n      sheetRef?.current?.snapTo(0);\n    }\n  }, [state.fields.ticketType?.value?.isTandem])\n\n  React.useEffect(() => {\n    if (open) {\n      sheetRef?.current?.snapTo(1);\n    } else {\n      sheetRef?.current?.close();\n      props.onClose();\n    }\n  }, [open]);\n\n  const snapPoints = React.useMemo(() => [0, 550], []);\n\n  return (\n    <Portal>\n      <Dialog\n        visible={!!props.open}\n        onDismiss={props.onClose}\n       >\n         <View style={{ backgroundColor: \"white\"}} testID=\"manifest-group-sheet\">\n            <View pointerEvents={(state.fields.users?.value?.length || 0) > 0 ? undefined : \"none\"}>\n              <Tabs defaultIndex={tabIndex} mode=\"fixed\" onChangeIndex={setTabIndex}>\n                <TabScreen label=\"Create group\" ><View /></TabScreen>\n                <TabScreen label=\"Configure jump\"><View /></TabScreen>\n              </Tabs>\n            </View>\n            \n            {\n              tabIndex === 0\n                ? (\n                  <View style={styles.userListContainer}>\n                    <UserListSelect onNext={() => setTabIndex(1)} />\n                  </View>\n                ) : (\n                  <ScrollView contentContainerStyle={{ paddingBottom: 200, flexGrow: 1}}>\n                    <ManifestGroupForm />\n                    <View style={styles.buttonContainer}>\n                      <Button onPress={onManifest} loading={mutationData.loading} mode=\"contained\" style={styles.button}>\n                        Save\n                      </Button>\n                    </View>\n                  </ScrollView>\n                )\n            }\n          </View>\n        </Dialog>\n    </Portal>\n  )\n}\n\nconst styles = StyleSheet.create({\n  button: {\n    width: \"100%\",\n    borderRadius: 16,\n    padding: 5,\n  },\n  buttonContainer: {\n    paddingHorizontal: 16,\n    backgroundColor: \"white\",\n  },\n  contentContainer: {\n    paddingHorizontal: 16,\n    paddingBottom: 32,\n  },\n  userListContainer: {\n    height: \"100%\",\n    backgroundColor: \"white\",\n    width: \"100%\",\n    padding: 16,\n  },\n  sheet: {\n    elevation: 3,\n    backgroundColor: \"white\",\n    flexGrow: 1,\n    height: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingBottom: 32,\n  },\n  sheetHeader: {\n    elevation: 2,\n    borderTopLeftRadius: 15,\n    borderTopRightRadius: 15,\n    height: 30,\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: -4,\n    },\n    backgroundColor: \"white\",\n    shadowOpacity: 0.22,\n    shadowRadius: 2.22,\n  }\n\n})","import { useQuery } from '@apollo/client';\nimport { Ionicons, MaterialIcons } from '@expo/vector-icons';\nimport gql from 'graphql-tag';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { List, Menu } from 'react-native-paper';\n\nimport { Text, View } from '../../../components/Themed';\nimport { Query } from '../../../graphql/schema';\nimport usePalette from '../../../hooks/usePalette';\nimport { useAppSelector } from '../../../redux';\n\n\ninterface IGetStartedProps {\n  hasPlanes: boolean;\n  hasTicketTypes: boolean;\n  isPublic: boolean;\n}\nexport default function GetStarted({\n  hasPlanes,\n  hasTicketTypes,\n  isPublic,\n}: IGetStartedProps) {\n  const palette = usePalette();\n\n  return (\n      <View style={{ width: \"70%\"}}>\n      <Text style={styles.title}>Set up dropzone</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n        <List.Item\n          title=\"Create dropzone\"\n          left={\n            () =>\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        >\n        </List.Item>\n        <List.Item\n          title=\"Add a plane\"\n          left={\n            () =>\n              !hasPlanes ?\n                <List.Icon\n                  color={palette.error}\n                  icon=\"close\"\n                /> :\n                <List.Icon\n                  color={palette.success}\n                  icon=\"check\"\n                />\n          }\n        />\n        <List.Item\n          title=\"Configure jump tickets\"\n          left={\n            () =>\n            !hasTicketTypes ?\n              <List.Icon\n                color={palette.error}\n                icon=\"close\"\n              /> :\n              <List.Icon\n                color={palette.success}\n                icon=\"check\"\n              />\n          }\n        />\n      </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { gql, useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { Badge, Card, Chip } from 'react-native-paper';\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport PilotChip from '../../../components/chips/PilotChip';\nimport PlaneChip from '../../../components/chips/PlaneChip';\n\nimport { View } from '../../../components/Themed';\nimport { Query, Load, Mutation, Plane, DropzoneUser, LoadState } from '../../../graphql/schema.d';\nimport { actions, useAppDispatch } from '../../../redux';\nimport { errorColor, successColor, warningColor } from '../../../constants/Colors';\nimport Countdown from './Countdown';\nimport { isBefore } from 'date-fns';\n\ninterface ILoadCard {\n  load: Load;\n  onPress(): void;\n}\n\n\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      state\n      plane {\n        id\n        name\n        maxSlots\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        \n        dropzoneUser {\n          id\n          user {\n            id\n            name\n            exitWeight\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        state\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst LOAD_BADGE_COLOR = {\n  open: successColor,\n  cancelled: errorColor,\n  boarding_call: warningColor,\n};\n\nexport default function LoadCard(props: ILoadCard) {\n  const dispatch = useAppDispatch();\n\n  const { load, onPress } = props;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    pollInterval: process.env.EXPO_ENV === \"production\" ? 30000 : null,\n  });\n  const currentDropzone = useCurrentDropzone();\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n\n  const updatePilot = React.useCallback(async (pilot: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n  \n  const loadStates = {\n    [LoadState.Open]: \"Open\",\n    [LoadState.BoardingCall]: \"On call\",\n    [LoadState.Cancelled]: \"Cancelled\",\n    [LoadState.InFlight]: \"In air\",\n    [LoadState.Landed]: \"Landed\"\n  };\n  return (\n    <Card\n      testID=\"load-card\"\n      style={{\n        margin: 16,\n        borderRadius: 8,\n        opacity: ['cancelled', 'landed'].includes(data?.load?.state) ? 0.5 : 1.0\n      }}\n      elevation={3}\n      onPress={onPress}\n    >\n      <Badge\n        style={{\n          backgroundColor: LOAD_BADGE_COLOR[data?.load?.state],\n          marginTop: -5,\n          marginRight: -5,\n        }}\n      >\n        {loadStates[data?.load?.state] || ''}\n      </Badge>\n      <Card.Title\n        style={{ justifyContent: \"space-between\" }}\n        title={`Load #${load.loadNumber}`}\n        subtitle={load.name}\n        right={() => !data?.load?.dispatchAt || isBefore(new Date(), data?.load?.dispatchAt) ? null : (\n          <View style={{ marginRight: 16 }}>\n            <Countdown end={new Date(data.load.dispatchAt * 1000)} />\n          </View>\n        )}\n      />\n      \n      <Card.Content style={styles.cardContent}>\n        <View style={{ flexDirection: \"row\", flexWrap: 'wrap' }}>\n            <PlaneChip\n              value={data?.load?.plane}\n              small\n              onSelect={async (plane) => {\n                if ((data?.load?.slots?.length || 0) > (plane.maxSlots || 0)) {\n                  const diff = (data?.load?.slots?.length || 0) - (plane.maxSlots || 0);\n\n                  dispatch(\n                    actions.notifications.showSnackbar({\n                      message: `You need to take ${diff} people off the load to fit on this plane`,\n                      variant: \"warning\",\n                    })\n                  );\n                } else {\n                  await updatePlane(plane);\n                  refetch();\n                }\n              }}\n            />\n            <PilotChip\n              dropzoneId={Number(currentDropzone?.dropzone?.id)}\n              value={data?.load?.pilot}\n              onSelect={updatePilot}\n              small\n            />\n            <Chip\n              mode=\"outlined\"\n              icon=\"parachute\"\n              style={styles.smallChip}\n              textStyle={styles.smallChipText}\n            >\n              {data?.load?.slots?.length} / {data?.load?.plane?.maxSlots}\n            </Chip>\n        </View>\n        </Card.Content>\n    </Card>           \n  );\n}\n\nconst styles = StyleSheet.create({\n  cardContent: {\n    marginVertical: 8,\n    overflow: \"hidden\",\n    flexDirection: \"row\"\n  },\n  smallChip: {\n    height: 25,\n    margin: 4,\n    alignItems: \"center\"\n  },\n  smallChipText: { fontSize: 12 },\n});\n","import { gql, useMutation, useQuery } from '@apollo/client';\nimport * as React from 'react';\nimport { ScrollView, StyleSheet } from 'react-native';\nimport { Button, Card, DataTable, IconButton, Menu, Paragraph, ProgressBar, Text } from 'react-native-paper';\nimport addMinutes from \"date-fns/addMinutes\";\nimport differenceInMinutes from \"date-fns/differenceInMinutes\";\n\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport GCAChip from '../../../components/chips/GcaChip';\nimport LoadMasterChip from '../../../components/chips/LoadMasterChip';\nimport PilotChip from '../../../components/chips/PilotChip';\nimport PlaneChip from '../../../components/chips/PlaneChip';\n\nimport { View } from '../../../components/Themed';\nimport { Query, Load, Mutation, User, Permission, Plane, Slot, DropzoneUser } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport SwipeActions from '../../../components/layout/SwipeActions';\n\ninterface ILoadCard {\n  load: Load;\n  onManifestGroup(): void;\n  onSlotGroupPress(slots: Slot[]): void;\n  onSlotPress(slot: Slot): void;\n  onSlotLongPress?(slot: Slot): void;\n  onManifest(): void;\n}\n\n\nexport const QUERY_LOAD = gql`\n  query QueryLoad($id: Int!) {\n    load(id: $id) {\n      id\n      name\n      createdAt\n      dispatchAt\n      hasLanded\n      maxSlots\n      loadNumber\n      isFull\n      isOpen\n      plane {\n        id\n        name\n      }\n      gca {\n        id\n        user {\n          id\n          name\n        }\n      }\n      pilot {\n        id\n        user {\n          id\n          name\n        }\n      }\n      loadMaster {\n        id\n        user {\n          id\n          name\n        }\n      }\n      slots {\n        id\n        createdAt\n        exitWeight\n        passengerName\n        passengerExitWeight\n        \n        dropzoneUser {\n          id\n          user {\n            id\n            name\n            exitWeight\n          }\n        }\n        ticketType {\n          id\n          name\n          altitude\n          isTandem\n\n          extras {\n            id\n            name\n            cost\n          }\n        }\n        jumpType {\n          id\n          name\n        }\n        extras {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst MUTATION_UPDATE_LOAD = gql`\n  mutation UpdateLoad(\n    $id: Int!,\n    $pilotId: Int,\n    $gcaId: Int,\n    $planeId: Int,\n    $isOpen: Boolean,\n    $loadMasterId: Int,\n    $dispatchAt: Int,\n    $hasLanded: Boolean,\n  ){\n    updateLoad(input: {\n      id: $id\n      attributes: {\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        planeId: $planeId,\n        isOpen: $isOpen,\n        loadMasterId: $loadMasterId\n        dispatchAt: $dispatchAt\n        hasLanded: $hasLanded\n      }\n    }) {\n      load {\n        id\n        name\n        createdAt\n        loadNumber\n        dispatchAt\n        hasLanded\n        maxSlots\n        isFull\n        isOpen\n        plane {\n          id\n          name\n        }\n        gca {\n          id\n          user {\n            id\n            name\n          }\n        }\n        pilot {\n          id\n          user {\n            id\n            name\n          }\n        }\n        loadMaster {\n          id\n          user {\n            id\n            name\n          }\n        }\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n`;\n\n\nconst MUTATION_DELETE_SLOT = gql`\nmutation DeleteSlot($id: Int!) {\n  deleteSlot(input: { id: $id }) {\n    slot {\n      id\n      load {\n        id\n        slots {\n          id\n          createdAt\n          exitWeight\n\n          passengerName\n          passengerExitWeight\n\n          user {\n            id\n            name\n          }\n          ticketType {\n            id\n            name\n            altitude\n            isTandem\n          }\n          jumpType {\n            id\n            name\n          }\n          extras {\n            id\n            name\n          }\n        }  \n      }\n    }\n  }\n}\n`;\n\n\nexport default function LoadCard(props: ILoadCard) {\n  const state = useAppSelector(state => state.global);\n  const dispatch = useAppDispatch();\n  const [isExpanded, setExpanded] = React.useState(false);\n  const [isDispatchOpen, setDispatchOpen] = React.useState(false);\n\n  const { load, onManifest, onManifestGroup } = props;\n  const { data, loading, refetch } = useQuery<Query>(QUERY_LOAD, {\n    variables: {\n      id: Number(load.id),\n    },\n    // pollInterval: 30000,\n  });\n  const currentDropzone = useCurrentDropzone();\n  const { currentUser } = currentDropzone;\n\n  const [mutationUpdateLoad, mutation] = useMutation<Mutation>(MUTATION_UPDATE_LOAD);\n  const [mutationDeleteSlot, mutationDelete] = useMutation<Mutation>(MUTATION_DELETE_SLOT);\n\n  const onDeleteSlot = React.useCallback(async (slot: Slot) => {\n    try {\n      const result = await mutationDeleteSlot({\n        variables: {\n          id: Number(slot.id)\n        }\n      });\n\n      if (result?.data?.deleteSlot?.errors) {\n        dispatch(\n          actions.notifications.showSnackbar({\n            message: result.data.deleteSlot.errors[0],\n            variant: \"error\"\n          })\n        );\n      }\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePilot = React.useCallback(async (pilot: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), pilotId: Number(pilot.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateGCA = React.useCallback(async (gca: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), gcaId: Number(gca.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updatePlane = React.useCallback(async (plane: Plane) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), planeId: Number(plane.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateLoadMaster = React.useCallback(async (lm: DropzoneUser) => {\n    try {\n      await mutationUpdateLoad({ variables: { id: Number(load.id), loadMasterId: Number(lm.id) }});\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const updateCall = React.useCallback(async (minutes: number | null) => {\n    const dispatchTime = !minutes ? null : addMinutes(new Date(), minutes).getTime() / 1000;\n\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          dispatchAt: dispatchTime ? Math.ceil(dispatchTime) : null\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  const onLanded = React.useCallback(async () => {\n    try {\n      await mutationUpdateLoad({\n        variables: {\n          id: Number(load.id),\n          hasLanded: true,\n        }\n      });\n    } catch (e) {\n\n    }\n  }, [mutationUpdateLoad, JSON.stringify(load)]);\n\n  \n  const canUpdateLoad = useRestriction(Permission.UpdateLoad);\n  \n  const canEditSelf = useRestriction(Permission.UpdateSlot);\n  const canEditOthers = useRestriction(Permission.UpdateUserSlot);\n  \n  const canRemoveSelf = useRestriction(Permission.DeleteSlot);\n  const canRemoveOthers = useRestriction(Permission.DeleteUserSlot);\n  \n  const canManifestSelf = useRestriction(Permission.CreateSlot);\n  const canManifestGroup = useRestriction(Permission.CreateUserSlot);\n  const canManifestGroupWithSelfOnly = useRestriction(Permission.CreateUserSlotWithSelf);\n\n  const showManifestButton = canManifestSelf && data?.load?.isOpen && !data?.load?.isFull;\n\n  React.useEffect(() => {\n    if (data?.load?.maxSlots && data?.load?.maxSlots < 5 && !isExpanded) {\n      setExpanded(true);\n    }\n  }, [data?.load?.maxSlots]);\n\n  const showGroupIcon = (canManifestGroup || canManifestGroupWithSelfOnly) && !data?.load?.hasLanded && (!data?.load?.dispatchAt || data?.load.dispatchAt > (new Date().getTime() / 1000));\n\n  return (\n  <Card testID=\"load-card\" style={{ margin: 16, opacity: data?.load?.hasLanded ? 0.5 : 1.0 }} elevation={3}>\n    <Card.Title\n      style={{ justifyContent: \"space-between\"}}\n      title={\n        <View style={{ width: \"100%\", flex: 1, flexDirection: \"row\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n          <Text>{`Load ${data?.load?.loadNumber || 0}`}</Text>\n          <View style={{ flexGrow: 1 }} />\n          { showGroupIcon && (\n            <IconButton\n              icon=\"account-group\"\n              testID=\"manifest-group-button\"\n              onPress={() => {\n                dispatch(actions.forms.manifestGroup.reset());\n                dispatch(actions.forms.manifestGroup.setField([\"load\", load]));\n\n                if (canManifestGroupWithSelfOnly && !canManifestGroup) {\n                  // Automatically add current user to selection\n                  dispatch(actions.screens.manifest.setSelected([currentUser]));\n                  dispatch(actions.forms.manifestGroup.setDropzoneUsers([currentUser]));\n                }\n\n                if (onManifestGroup) {\n                  onManifestGroup();\n                }\n              }}\n            />\n          )}\n        </View>\n      }\n      subtitle={load.name}\n    />\n    <ProgressBar\n      visible={loading || mutation.loading}\n      color={state.theme.colors.accent}\n    />\n    <Card.Content style={{ marginVertical: 8, height: isExpanded ? undefined : 300, overflow: \"hidden\" }}>\n      <View style={{ flexDirection: \"row\"}}>\n        <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n          <PlaneChip\n            value={data?.load?.plane}\n            onSelect={async (plane) => {\n              if ((data?.load?.slots?.length || 0) > (plane.maxSlots || 0)) {\n                const diff = (data?.load?.slots?.length || 0) - (plane.maxSlots || 0);\n\n                dispatch(\n                  actions.notifications.showSnackbar({\n                    message: `You need to take ${diff} people off the load to fit on this plane`,\n                    variant: \"warning\",\n                  })\n                );\n              } else {\n                await updatePlane(plane);\n                refetch();\n              }\n            }}\n          />\n          <GCAChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.gca}\n            onSelect={updateGCA}\n          />\n          <PilotChip\n            dropzoneId={Number(currentDropzone?.dropzone?.id)}\n            value={data?.load?.pilot}\n            onSelect={updatePilot}\n          />\n          <LoadMasterChip\n            value={data?.load?.loadMaster}\n            slots={data?.load.slots || []}\n            onSelect={updateLoadMaster}\n          />\n        </ScrollView>\n      </View>\n      <DataTable>\n        <DataTable.Header style={{ width: \"100%\"}}>\n          <DataTable.Title>Name</DataTable.Title>\n          <DataTable.Title numeric>Jump type</DataTable.Title>\n          <DataTable.Title numeric>Altitude</DataTable.Title>\n        </DataTable.Header>\n          {\n            data?.load?.slots?.map(slot => {\n              const slotGroup = data?.load?.slots?.filter(({ groupNumber }) => groupNumber && groupNumber === slot.groupNumber);\n              const isCurrentUser = slot?.user?.id === currentUser?.id;\n\n              return (\n                <SwipeActions\n                  disabled={\n                    (isCurrentUser && !canRemoveSelf) || (!isCurrentUser && !canRemoveOthers)\n                  }\n                  key={`slot-${slot.id}`}\n                  rightAction={{\n                    label: \"Delete\",\n                    backgroundColor: \"red\",\n                    onPress: () => onDeleteSlot(slot),\n                  }}\n                >\n                  <DataTable.Row\n                    testID=\"slot-row\"\n                    disabled={!!data?.load?.hasLanded}\n                    onPress={() => {\n                      if (slot.user?.id === currentUser?.id) {\n                        if (canEditSelf) {\n                          if (slotGroup?.length) {\n                            props.onSlotGroupPress(slotGroup!)\n                          } else {\n                            props.onSlotPress(slot);\n                          }\n                        }\n                      } else if (canEditOthers) {\n                        if (slotGroup?.length) {\n                          props.onSlotGroupPress(slotGroup!)\n                        } else {\n                          props.onSlotPress(slot);\n                        }\n                      }\n                    }}\n                    pointerEvents=\"none\"\n                  >\n                    <DataTable.Cell>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.dropzoneUser?.user?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {slot?.jumpType?.name}\n                      </Paragraph>\n                    </DataTable.Cell>\n                    <DataTable.Cell numeric>\n                      <Paragraph style={styles.slotText}>\n                        {((slot?.ticketType?.altitude || 14000) / 1000)}k\n                      </Paragraph>\n                    </DataTable.Cell>\n                  </DataTable.Row>\n                </SwipeActions>\n              )\n            })\n          }\n          {\n            Array.from({length: (data?.load?.maxSlots || 0) - (data?.load?.slots?.length || 0)}, (v, i) => i).map((i) =>\n              <DataTable.Row key={`${load.id}-empty-slot-${i}`} testID=\"slot-row\">\n                <DataTable.Cell><Paragraph style={styles.slotText}>- Available -</Paragraph></DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n                <DataTable.Cell numeric>-</DataTable.Cell>\n              </DataTable.Row>\n            )\n          }\n      </DataTable>\n    </Card.Content>\n    {\n      !!data?.load?.dispatchAt && data?.load?.dispatchAt > (new Date().getTime() / 1000) && (\n        <View style={{ flex: 1, backgroundColor: \"black\", padding: 8 }}>\n          <Paragraph style={{ color: \"#FFFFFF\" }}>\n            {\n              `Take-off in ${differenceInMinutes(new Date(), (data?.load?.dispatchAt as number) * 1000)} min`\n            }\n          </Paragraph>\n        </View>\n    )}\n    <Card.Actions>\n      {\n        data?.load?.maxSlots && data?.load?.maxSlots < 5 ? null :\n          <Button onPress={() => setExpanded(!isExpanded)} testID={ isExpanded ? \"show-less\" : \"show-more\" }>\n            { isExpanded ? \"Show less\" : \"Show more\" }\n          </Button>\n      }\n      <View style={{ flexGrow: 1 }} />\n      {\n       !canUpdateLoad || !!data?.load?.hasLanded ? null : (\n      \n          data?.load?.dispatchAt\n            ? (\n              <Button mode=\"outlined\" onPress={() => updateCall(null)} testID=\"dispatch-cancel\">\n                Cancel\n              </Button>\n            ) : (\n              <Menu\n                onDismiss={() => setDispatchOpen(false)}\n                visible={isDispatchOpen}\n                anchor={\n                  <Button\n                    mode=\"outlined\"\n                    onPress={() => setDispatchOpen(true)}\n                    testID=\"dispatch-button\"\n                  >\n                    Dispatch\n                  </Button>\n                }\n              >\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(20)\n                  }}\n                  title=\"20 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(15)\n                  }}\n                  title=\"15 minute call\"\n                />\n                <Menu.Item\n                  testID=\"dispatch-call\"\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(10)\n                  }}\n                  title=\"10 minute call\"\n                />\n                <Menu.Item\n                  onPress={() => {\n                    setDispatchOpen(false);\n                    updateCall(5)\n                  }}\n                  title=\"5 minute call\"\n                />\n              </Menu>\n            ))}\n      \n      {\n        data?.load?.hasLanded ? null : (\n          data?.load?.dispatchAt && data?.load.dispatchAt < new Date().getTime() / 1000 && canUpdateLoad\n            ? <Button\n                style={{ marginLeft: 8 }}\n                mode=\"contained\"\n                onPress={() => {\n                  if (!data?.load?.loadMaster?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a load master before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n\n                  if (!data?.load?.pilot?.id) {\n                    return dispatch(\n                      actions.notifications.showSnackbar({\n                        message: \"You must select a pilot before this load can be finalized\",\n                        variant: \"warning\"\n                      })\n                    );\n                  }\n                  onLanded();\n                }}>\n                Mark as landed\n              </Button>\n            : <Button\n                style={{marginLeft: 8 }}\n                mode=\"contained\"\n                testID=\"manifest-button\"\n                onPress={() => onManifest()}\n                disabled={!showManifestButton || Boolean(data?.load?.dispatchAt && data.load.dispatchAt < new Date().getTime() / 1000)}\n              >\n                Manifest\n              </Button>\n        )\n      }\n    </Card.Actions>\n  </Card>\n                      \n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 8,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  slotText: {\n    fontSize: 12\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n});\n","import * as React from 'react';\nimport { gql, useMutation } from \"@apollo/client\";\n\nimport { actions, useAppSelector, useAppDispatch } from '../../redux';\nimport { actions as snackbar } from \"../../components/notifications\";\n\nimport { Load, Mutation } from '../../graphql/schema';\nimport LoadForm from '../forms/load/LoadForm';\nimport DialogOrSheet from '../layout/DialogOrSheet';\nimport useCurrentDropzone from '../../graphql/hooks/useCurrentDropzone';\n\n\nconst MUTATION_CREATE_LOAD = gql`\n  mutation CreateLoad(\n    $name: String,\n    $pilotId: Int,\n    $gcaId: Int,\n    $maxSlots: Int!,\n    $planeId: Int,\n    $isOpen: Boolean,\n  ){\n    createLoad(input: {\n      attributes: {\n        name: $name,\n        pilotId: $pilotId,\n        gcaId: $gcaId,\n        maxSlots: $maxSlots,\n        planeId: $planeId,\n        isOpen: $isOpen,\n      }\n    }) {\n      load {\n        id\n        name\n        pilot {\n          id\n          user {\n            id \n            name\n          }\n        }\n        gca {\n          id\n          user {\n            id \n            name\n          }\n        }\n        maxSlots\n        isOpen\n      }\n      fieldErrors {\n        field,\n        message\n      }\n      errors\n    }\n  }\n`;\n\ninterface ILoadDialog {\n  open: boolean;\n  onClose(): void;\n  onSuccess(load: Load): void;\n}\nexport default function LoadDialog(props: ILoadDialog) {\n  const { open, onClose, onSuccess } = props;\n  const state = useAppSelector(state => state.forms.load);\n  const { currentDropzoneId } = useAppSelector(state => state.global);\n  \n  const dispatch = useAppDispatch();\n  const [mutationCreateLoad, mutation] = useMutation<Mutation>(MUTATION_CREATE_LOAD);\n\n  const validate = React.useCallback((): boolean => {\n    let hasError = false;\n \n    if (state.fields.maxSlots.value! < 1) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"maxSlots\", \"Please specify amount of allowed jumpers\"])\n      );\n    }\n\n    if (!state.fields.plane.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"plane\", \"What plane is flying this load?\"])\n      );\n    }\n\n    if (!state.fields.gca.value) {\n      hasError = true;\n      dispatch(\n        actions.forms.load.setFieldError([\"gca\", \"You must have a GCA for this load\"])\n      );\n    }\n\n    return !hasError;\n  }, [JSON.stringify(state.fields), dispatch]);\n\n  const onSave = React.useCallback(async () => {\n    const { name, gca, loadMaster, plane, maxSlots, pilot, isOpen } = state.fields;\n\n    \n\n    if (validate()) {\n      try {\n        const result = await mutationCreateLoad({\n          variables: {\n            dropzoneId: currentDropzoneId,\n            name: name.value,\n            maxSlots: maxSlots.value,\n            planeId: plane.value?.id ? Number(plane.value?.id) : null,\n            pilotId: pilot.value?.id ? Number(pilot.value?.id) : null,\n            gcaId: gca.value?.id ? Number(gca.value?.id) : null,\n            isOpen: !!isOpen.value\n          }\n        });\n        \n        result.data?.createLoad?.fieldErrors?.map(({ field, message }) => {\n          switch (field) {\n            case \"name\":\n              return dispatch(actions.forms.load.setFieldError([\"name\", message]));\n            case \"maxSlots\":\n              return dispatch(actions.forms.load.setFieldError([\"maxSlots\", message]));\n            case \"plane\":\n              return dispatch(actions.forms.load.setFieldError([\"plane\", message]));\n            case \"gca\":\n              return dispatch(actions.forms.load.setFieldError([\"gca\", message]));\n            case \"is_open\":\n              return dispatch(actions.forms.load.setFieldError([\"isOpen\", message]));\n            case \"pilot\":\n              return dispatch(actions.forms.load.setFieldError([\"pilot\", message]));\n          }\n        });\n\n        if (result?.data?.createLoad?.errors?.length) {\n          return dispatch(\n            snackbar.showSnackbar({ message: result.data.createLoad.errors[0], variant: \"error\" })\n          );\n        }\n\n        if (result.data?.createLoad?.load) {\n          const { load } = result.data.createLoad;\n          dispatch(\n            snackbar.showSnackbar({ message: `Load ${load.name} created`, variant: \"success\" })\n          );\n\n          if (!result.data?.createLoad?.fieldErrors) {\n            onSuccess(result.data.createLoad.load);\n            dispatch(actions.forms.load.reset());\n          }\n        }\n      } catch (error) {\n        dispatch(\n          snackbar.showSnackbar({ message: error.message, variant: \"error\" })\n        );\n      }\n    }\n    \n  }, [JSON.stringify(state.fields), dispatch, mutationCreateLoad]);\n\n  return (\n    <DialogOrSheet\n      open={open}\n      onClose={onClose}\n      buttonAction={onSave}\n      buttonLabel=\"Create\"\n      snapPoints={[\"30%\", 650]}\n      loading={mutation.loading}\n      title=\"New Load\"\n    >\n      <LoadForm />\n    </DialogOrSheet>\n  );\n}\n","import * as React from \"react\";\nimport { FontAwesome } from '@expo/vector-icons';\n\nimport { StyleSheet, ImageBackground, Text, View } from \"react-native\";\nimport { Card, DataTable } from \"react-native-paper\";\nimport weatherBackground from '../../../assets/images/weather.png';\nimport { isNumber, orderBy } from \"lodash\";\nimport useCurrentDropzone from \"../../../graphql/hooks/useCurrentDropzone\";\nimport { actions, useAppDispatch } from \"../../../redux\";\nimport useRestriction from \"../../../hooks/useRestriction\";\nimport { Permission } from \"../../../graphql/schema.d\";\nexport default function WeatherConditions() {\n\n\n  const { dropzone } = useCurrentDropzone();\n  const dispatch = useAppDispatch();\n\n  const jumpRun = dropzone?.currentConditions?.jumpRun || 0;\n  const canUpdate = useRestriction(Permission.UpdateWeatherConditions);\n  return (\n    <Card\n      style={styles.card}\n      onPress={() =>\n        !canUpdate ? null : dispatch(actions.forms.weather.setOpen(dropzone.currentConditions))\n      }\n    >\n      <ImageBackground\n        source={weatherBackground}\n        style={{...StyleSheet.absoluteFillObject }}\n        resizeMode=\"cover\"\n      >\n        <Card.Content>\n          <View style={styles.windboard}>\n            <View style={styles.row}>\n              <View style={styles.cell}>\n                <Text style={[styles.header, { flex: 1/3 }]}>Jump run</Text>\n                <View style={{ flex: 2/3, flexDirection: 'row' }}>\n                  <Text style={styles.header}>\n                    {jumpRun}\n                  </Text>\n                    <FontAwesome\n                      name=\"long-arrow-up\"\n                      size={14}\n                      style={\n                        {\n                          transform: [{\n                            rotate: `${jumpRun}deg`\n                          }],\n                          marginLeft: 8,\n                        }\n                      }\n                    />\n                  </View>\n              </View>\n            </View>\n            { true ? null : <View style={styles.row}>\n              <View style={styles.cell}>\n                <Text style={[styles.header, { flex: 1/3 }]}>Temp</Text>\n                <Text style={[styles.value, { flex: 2/3 }]}>{dropzone?.currentConditions?.temperature}</Text>\n              </View>\n            </View>}\n            <View style={styles.row}>\n              <View style={styles.cell}><Text style={styles.header}>Altitude</Text></View>\n              <View style={styles.cell}><Text style={styles.header}>Wind</Text></View>\n              <View style={styles.cell}><Text style={styles.header}>Direction</Text></View>\n            </View>\n            {\n              orderBy(dropzone?.currentConditions?.winds || [], (item) => Number(item.altitude), \"desc\").map(({ speed: wind, direction, altitude }) =>\n                <View style={styles.row}>\n                  <View style={styles.cell}><Text style={styles.value}>{altitude}</Text></View>\n                  <View style={styles.cell}><Text style={styles.value}>{wind}</Text></View>\n                  <View style={[styles.cell, { justifyContent: 'center'}]}>\n                    <Text style={styles.value}>{direction}</Text>\n                    <FontAwesome\n                      name=\"long-arrow-down\"\n                      size={14}\n                      style={\n                        direction && /\\d+/.test(direction) && Number(direction) < 361 ?\n                        {\n                          transform: [{\n                            rotate: `${direction}deg`\n                          }],\n                          marginLeft: 4,\n                        }\n                        : { marginLeft: 4, }\n                      }\n                    />\n                  </View>\n                </View>\n              )\n            }\n          </View>\n\n        </Card.Content>\n      </ImageBackground>\n      \n    </Card>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    flexGrow: 1,\n    borderRadius: 10,\n    marginBottom: 30,\n    marginHorizontal: 16,\n    height: 200,\n    overflow: \"hidden\",\n  },\n  label: {\n    color: 'white',\n    fontWeight: 'bold'\n  },\n  value: {\n    color: '#555555'\n  },\n  row: {\n    alignItems: \"center\",\n    justifyContent: \"space-evenly\",\n    height: 20,\n    flexGrow: 1,\n    flexDirection: \"row\",\n  },\n  cell: {\n    flex: 1,\n    color: 'white',\n    flexDirection: \"row\"\n  },\n  header: {\n    fontWeight: 'bold',\n    color: '#222222'\n  },\n  windboard: {\n    marginTop: 40,\n    maxWidth: 400,\n    flex: 1,\n    height: \"100%\",\n    flexDirection: \"column\",\n  }\n});","import { useIsFocused, useNavigation } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Dimensions, RefreshControl, StyleSheet, useWindowDimensions, Text } from 'react-native';\nimport { FlatList, TouchableOpacity } from 'react-native-gesture-handler';\nimport { Banner, FAB, IconButton, Menu, ProgressBar, ToggleButton } from 'react-native-paper';\nimport ManifestUserSheet from '../../../components/dialogs/ManifestUser/ManifestUser';\nimport ManifestGroupSheet from '../../../components/dialogs/ManifestGroup/ManifestGroup';\n\nimport NoResults from '../../../components/NoResults';\nimport { View } from '../../../components/Themed';\nimport { Load, Permission } from '../../../graphql/schema.d';\nimport useRestriction from '../../../hooks/useRestriction';\nimport { actions, useAppDispatch, useAppSelector } from '../../../redux';\nimport GetStarted from './GetStarted';\nimport LoadCard from './SmallLoadCard';\nimport DetailedLoadCard from './LoadCard';\nimport LoadDialog from '../../../components/dialogs/Load';\nimport useCurrentDropzone from '../../../graphql/hooks/useCurrentDropzone';\nimport WeatherConditions from './WeatherConditions';\n\nexport default function ManifestScreen() {\n  const state = useAppSelector(state => state.global);\n  const forms = useAppSelector(state => state.forms);\n  const manifestScreen = useAppSelector(state => state.screens.manifest);\n  const dispatch = useAppDispatch();\n  const [isDisplayOptionsOpen, setDisplayOptionsOpen] = React.useState(false);\n  const { dropzone, currentUser, loading, refetch, fetchMore } = useCurrentDropzone();\n\n  const navigation = useNavigation();\n  const isFocused = useIsFocused();\n\n  React.useEffect(() => {\n    if (isFocused) {\n      refetch();\n    }\n  }, [isFocused]);\n\n  const hasPlanes = !!dropzone?.planes?.length;\n  const hasTicketTypes = !!dropzone?.ticketTypes?.length;\n  const isPublic = !!dropzone?.isPublic;\n  const isSetupComplete = hasPlanes && hasTicketTypes;\n\n  React.useEffect(() => {\n    if (dropzone?.primaryColor && dropzone?.primaryColor !== state.theme?.colors?.primary) {\n      dispatch(actions.global.setPrimaryColor(dropzone.primaryColor));\n    }\n\n    if (dropzone?.secondaryColor && dropzone?.secondaryColor !== state.theme?.colors?.accent) {\n      dispatch(actions.global.setPrimaryColor(dropzone.secondaryColor));\n    }\n  }, [\n    dropzone?.primaryColor,\n    dropzone?.secondaryColor\n  ])\n\n  const canCreateLoad = useRestriction(Permission.CreateLoad);\n\n  const onManifest = React.useCallback((load: Load) => {\n    \n    if (!currentUser.hasLicense) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You need to select a license on your user profile\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasMembership) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your membership is out of date\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasRigInspection) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs to be inspected before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasReserveInDate) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Your rig needs a reserve repack\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasExitWeight) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"Update your exit weight on your profile before manifesting\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    if (!currentUser.hasCredits) {\n      return dispatch(\n        actions.notifications.showSnackbar({\n          message: \"You have no credits on your account\",\n          variant: \"warning\"\n        })\n      );\n    }\n\n    dispatch(actions.forms.manifest.setOpen(true));\n    dispatch(\n      actions.forms.manifest.setField([\"dropzoneUser\", currentUser])\n    );\n    dispatch(\n      actions.forms.manifest.setField([\"load\", load])\n    );\n  }, [JSON.stringify(dropzone?.currentUser)]);\n\n\n  const { width } = useWindowDimensions(); \n\n  const numColumns = Math.floor(width / 400) || 1;\n\n  return (\n    <>\n      <ProgressBar visible={loading} indeterminate color={state.theme.colors.accent} />\n      <View style={styles.container}>\n        \n        {\n          !loading && (\n            !isSetupComplete\n              ? <GetStarted {...{ hasPlanes, hasTicketTypes, isPublic }}/>\n                : <View style={{ width: \"100%\", flex: 1,  height: Dimensions.get(\"window\").height }}>\n                    \n                    <FlatList\n                      ListHeaderComponent={() => <WeatherConditions />}\n                      ListEmptyComponent={() =>\n                        <NoResults\n                          title=\"No loads so far today\"\n                          subtitle=\"How's the weather?\"\n                        />\n                      }\n                        testID=\"loads\"\n                        keyExtractor={(item) => `load-${item?.node?.id}`}\n                        key={`loads-columns-${numColumns}`}\n                        style={{ flex: 1, paddingTop: 35, height: Dimensions.get(\"window\").height }}\n                        contentContainerStyle={{ flexGrow: 1, paddingBottom: 100 }}\n                        numColumns={numColumns}\n                        data={(dropzone?.loads?.edges || [])}\n                        refreshControl={\n                          <RefreshControl refreshing={loading} onRefresh={() => fetchMore({ })} />\n                        }\n                        renderItem={({ item: edge, index }) =>\n                          manifestScreen.display === \"list\" ? (\n                            <DetailedLoadCard\n                              key={`load-${edge.node.id}`}\n                              load={edge.node}\n                              onSlotPress={(slot) => {\n                                dispatch(actions.forms.manifest.setOpen(slot));\n                                dispatch(\n                                  actions.forms.manifest.setField([\"load\", edge.node!])\n                                );\n                              }}\n                              onSlotGroupPress={(slots) => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setFromSlots(slots));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                                navigation.navigate(\"ManifestGroupScreen\");\n                              }}\n                              onManifest={() => {\n                                \n                                onManifest(edge.node!)\n                              }}\n                              onManifestGroup={() => {\n                                dispatch(actions.forms.manifestGroup.reset());\n                                dispatch(actions.forms.manifestGroup.setOpen(true));\n                                dispatch(actions.forms.manifestGroup.setField([\"load\", edge.node!]));\n                              }}\n                            />) : (\n                              <LoadCard\n                                key={`load-${edge.node.id}`}\n                                load={edge.node}\n                                onPress={() => navigation.navigate(\"LoadScreen\", { load: edge.node })}\n                              />\n                            )\n                        }\n                    />\n                </View>\n        )}\n        { canCreateLoad && isSetupComplete && (\n          <FAB\n            style={styles.fab}\n            small\n            icon=\"plus\"\n            onPress={() => dispatch(actions.forms.load.setOpen(true))}\n            label=\"New load\"\n          />\n        )}\n      </View>\n      <View style={styles.header}>\n        <Menu\n          anchor={\n            <IconButton icon=\"cog-outline\" onPress={() => setDisplayOptionsOpen(true)} />\n          }\n          visible={isDisplayOptionsOpen}\n          onDismiss={() => setDisplayOptionsOpen(false)}\n        >\n          <Menu.Item\n            title=\"Show expanded cards\"\n            titleStyle={{ fontWeight: manifestScreen.display === 'cards' ? 'normal' : 'bold'}}\n            onPress={() => {\n              dispatch(actions.screens.manifest.setDisplayStyle('list'));\n              setDisplayOptionsOpen(false);\n            }}\n          />\n          <Menu.Item\n            title=\"Show compact cards\"\n            titleStyle={{ fontWeight: manifestScreen.display === 'list' ? 'normal' : 'bold'}}\n            onPress={() => {\n              dispatch(actions.screens.manifest.setDisplayStyle('cards'));\n              setDisplayOptionsOpen(false);\n            }}\n          />\n        </Menu>\n      </View>\n      <ManifestUserSheet\n        open={forms.manifest.open}\n        onClose={() => dispatch(actions.forms.manifest.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifest.setOpen(false))}\n      />\n      <ManifestGroupSheet\n        open={forms.manifestGroup.open}\n        onClose={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n        onSuccess={() => dispatch(actions.forms.manifestGroup.setOpen(false))}\n      />\n\n      <LoadDialog\n        onSuccess={() => {\n          dispatch(actions.forms.load.setOpen(false));\n          refetch();\n        }}\n        open={forms.load.open}\n        onClose={() => dispatch(actions.forms.load.setOpen(false))}\n      />\n\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  fab: {\n    position: 'absolute',\n    margin: 16,\n    right: 0,\n    bottom: 0,\n  },\n  header: {\n    alignItems: \"flex-start\",\n    justifyContent: \"flex-end\",\n    flexDirection: 'row',\n    padding: 0,\n    width: \"100%\",\n    position: \"absolute\",\n    top: 0,\n    backgroundColor: \"transparent\"\n  }\n});\n"],"sourceRoot":""}