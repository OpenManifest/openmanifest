interface AnyResource {
  id: ID!
}

"""Autogenerated input type of CreateDropzone"""
input CreateDropzoneInput {
  attributes: DropzoneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateDropzone"""
type CreateDropzonePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of CreateExtra"""
input CreateExtraInput {
  attributes: ExtraInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateExtra"""
type CreateExtraPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  extra: Extra
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of CreateGhost"""
input CreateGhostInput {
  attributes: GhostInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateGhost"""
type CreateGhostPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  user: User
}

"""Autogenerated input type of CreateLoad"""
input CreateLoadInput {
  attributes: LoadInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateLoad"""
type CreateLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of CreateOrder"""
input CreateOrderInput {
  attributes: OrderInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateOrder"""
type CreateOrderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  order: Order
}

"""Autogenerated input type of CreatePlane"""
input CreatePlaneInput {
  attributes: PlaneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePlane"""
type CreatePlanePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  plane: Plane
}

"""Autogenerated input type of CreateRig"""
input CreateRigInput {
  attributes: RigInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateRigInspection"""
input CreateRigInspectionInput {
  attributes: RigInspectionInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateRigInspection"""
type CreateRigInspectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rigInspection: RigInspection
}

"""Autogenerated return type of CreateRig"""
type CreateRigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rig: Rig
}

"""Autogenerated input type of CreateSlot"""
input CreateSlotInput {
  attributes: SlotInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSlot"""
type CreateSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  slot: Slot
}

"""Autogenerated input type of CreateSlots"""
input CreateSlotsInput {
  attributes: SlotInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSlots"""
type CreateSlotsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of CreateTicket"""
input CreateTicketInput {
  attributes: TicketTypeInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateTicket"""
type CreateTicketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  ticketType: TicketType
}

"""Autogenerated input type of CreateWeatherCondition"""
input CreateWeatherConditionInput {
  attributes: WeatherConditionInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateWeatherCondition"""
type CreateWeatherConditionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  weatherCondition: WeatherCondition
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

"""Autogenerated input type of DeleteDropzone"""
input DeleteDropzoneInput {
  id: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteDropzone"""
type DeleteDropzonePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
}

"""Autogenerated input type of DeleteLoad"""
input DeleteLoadInput {
  id: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteLoad"""
type DeleteLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  load: Load
}

"""Autogenerated input type of DeletePlane"""
input DeletePlaneInput {
  id: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeletePlane"""
type DeletePlanePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  plane: Plane
}

"""Autogenerated input type of DeleteSlot"""
input DeleteSlotInput {
  id: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteSlot"""
type DeleteSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  slot: Slot
}

"""Autogenerated input type of DeleteTicket"""
input DeleteTicketInput {
  id: Int!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of DeleteTicket"""
type DeleteTicketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  ticketType: TicketType
}

type Dropzone implements AnyResource & Wallet {
  allowedJumpTypes(userId: [Int!]!): [JumpType!]!
  banner: String
  createdAt: Int!
  currentConditions: WeatherCondition!
  currentUser: DropzoneUser!
  dropzoneUser(id: Int, userId: Int): DropzoneUser
  dropzoneUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    permissions: [Permission!]
    search: String
    licensed: Boolean
  ): DropzoneUserConnection!
  extras: [Extra!]!
  federation: Federation!
  id: ID!
  isCreditSystemEnabled: Boolean!
  isPublic: Boolean!
  lat: Float
  lng: Float
  loads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    earliestTimestamp: Int
  ): LoadConnection!

  """Get the master log entry for a given date"""
  masterLog(
    """This should be the timestamp of the beginning of the day"""
    date: Int!
  ): MasterLog!
  name: String
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: Int
  ): OrderConnection
  planes: [Plane!]!
  primaryColor: String
  purchases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  requestPublication: Boolean!
  rigInspectionTemplate: FormTemplate

  """Get rigs for dropzone"""
  rigs: [Rig!]
  roles(selectable: Boolean): [UserRole!]!
  sales(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  secondaryColor: String
  ticketTypes(isPublic: Boolean): [TicketType!]!
  updatedAt: Int!
  userRoles: [UserRole!]!
}

"""The connection type for Dropzone."""
type DropzoneConnection {
  """A list of edges."""
  edges: [DropzoneEdge]

  """A list of nodes."""
  nodes: [Dropzone]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DropzoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Dropzone
}

input DropzoneInput {
  name: String!
  banner: String
  federationId: Int!
  requestPublication: Boolean
  isPublic: Boolean
  lat: Float
  lng: Float
  primaryColor: String
  secondaryColor: String
  isCreditSystemEnabled: Boolean
}

type DropzoneUser implements AnyResource & Wallet {
  """
  Get user rigs that have been inspected and marked as OK + dropzone rigs
  """
  availableRigs(isTandem: Boolean): [Rig!]
  createdAt: Int!
  credits: Int
  dropzone: Dropzone!
  expiresAt: Int
  hasCredits: Boolean!
  hasExitWeight: Boolean!
  hasLicense: Boolean!
  hasMembership: Boolean!
  hasReserveInDate: Boolean!
  hasRigInspection: Boolean!
  id: ID!
  jumpTypes: [JumpType!]
  license: License
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): NotificationConnection
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: Int
  ): OrderConnection
  permissions: [Permission!]
  purchases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  rigInspections: [RigInspection!]
  role: UserRole
  sales(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  slots(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SlotConnection
  unseenNotifications: Int!
  updatedAt: Int!
  user: User!
}

"""The connection type for DropzoneUser."""
type DropzoneUserConnection {
  """A list of edges."""
  edges: [DropzoneUserEdge]

  """A list of nodes."""
  nodes: [DropzoneUser]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DropzoneUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DropzoneUser
}

input DropzoneUserInput {
  expiresAt: Int
  credits: Float
  userRoleId: Int
}

type Extra implements SellableItem {
  cost: Float!
  createdAt: Int!
  dropzone: Dropzone!
  id: ID!
  name: String
  ticketTypes: [TicketType!]!
  title: String
  updatedAt: Int!
}

input ExtraInput {
  name: String
  cost: Float
  dropzoneId: Int
  ticketTypeIds: [Int!]
}

type Federation {
  createdAt: Int!
  id: ID!
  name: String
  slug: String
  updatedAt: Int!
}

type FieldError {
  field: String!
  message: String!
}

"""Autogenerated input type of FinalizeLoad"""
input FinalizeLoadInput {
  id: Int!
  state: LoadState!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of FinalizeLoad"""
type FinalizeLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

type FormTemplate {
  createdAt: Int!
  definition: String
  id: ID!
  name: String
  updatedAt: Int!
}

input FormTemplateInput {
  name: String
  definition: String
  dropzoneId: Int
}

input GhostInput {
  name: String!
  email: String!
  phone: String
  exitWeight: Float!
  dropzoneId: Int!
  roleId: Int!
  licenseId: Int
  federationNumber: String
}

"""Autogenerated input type of GrantPermission"""
input GrantPermissionInput {
  permission: Permission!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of GrantPermission"""
type GrantPermissionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of JoinFederation"""
input JoinFederationInput {
  attributes: UserFederationInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of JoinFederation"""
type JoinFederationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  userFederation: UserFederation
}

type JumpType {
  createdAt: Int!
  id: ID!
  name: String
  updatedAt: Int!
}

type License implements AnyResource {
  createdAt: Int!
  federation: Federation
  id: ID!
  name: String
  updatedAt: Int!
}

type Load implements AnyResource {
  availableSlots: Int!
  createdAt: Int!
  dispatchAt: Int
  gca: DropzoneUser
  hasLanded: Boolean
  id: ID!
  isFull: Boolean!
  isOpen: Boolean!
  isReady: Boolean!
  loadMaster: DropzoneUser
  loadNumber: Int!
  maxSlots: Int!
  name: String
  occupiedSlots: Int!
  pilot: DropzoneUser
  plane: Plane!
  slots: [Slot!]
  state: LoadState!
  updatedAt: Int!
  weight: Int!
}

"""The connection type for Load."""
type LoadConnection {
  """A list of edges."""
  edges: [LoadEdge]

  """A list of nodes."""
  nodes: [Load]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LoadEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Load
}

input LoadInput {
  dispatchAt: Int
  name: String
  maxSlots: Int
  isOpen: Boolean
  hasLanded: Boolean
  pilotId: Int
  planeId: Int
  gcaId: Int
  loadMasterId: Int
  state: LoadState
}

enum LoadState {
  """open"""
  open

  """boarding_call"""
  boarding_call

  """in_flight"""
  in_flight

  """landed"""
  landed

  """cancelled"""
  cancelled
}

type MasterLog {
  createdAt: Int!
  dropzone: Dropzone
  dzso: [DropzoneUser!]
  id: ID!
  loads: [Load!]
  notes: String
  updatedAt: Int!
}

enum ModerationRole {
  """user"""
  user

  """support"""
  support

  """moderator"""
  moderator

  """administrator"""
  administrator
}

type Mutation {
  createDropzone(
    """Parameters for CreateDropzone"""
    input: CreateDropzoneInput!
  ): CreateDropzonePayload
  createExtra(
    """Parameters for CreateExtra"""
    input: CreateExtraInput!
  ): CreateExtraPayload
  createGhost(
    """Parameters for CreateGhost"""
    input: CreateGhostInput!
  ): CreateGhostPayload
  createLoad(
    """Parameters for CreateLoad"""
    input: CreateLoadInput!
  ): CreateLoadPayload
  createOrder(
    """Parameters for CreateOrder"""
    input: CreateOrderInput!
  ): CreateOrderPayload
  createPlane(
    """Parameters for CreatePlane"""
    input: CreatePlaneInput!
  ): CreatePlanePayload
  createRig(
    """Parameters for CreateRig"""
    input: CreateRigInput!
  ): CreateRigPayload
  createRigInspection(
    """Parameters for CreateRigInspection"""
    input: CreateRigInspectionInput!
  ): CreateRigInspectionPayload
  createSlot(
    """Parameters for CreateSlot"""
    input: CreateSlotInput!
  ): CreateSlotPayload
  createSlots(
    """Parameters for CreateSlots"""
    input: CreateSlotsInput!
  ): CreateSlotsPayload
  createTicketType(
    """Parameters for CreateTicket"""
    input: CreateTicketInput!
  ): CreateTicketPayload
  createWeatherCondition(
    """Parameters for CreateWeatherCondition"""
    input: CreateWeatherConditionInput!
  ): CreateWeatherConditionPayload
  deleteDropzone(
    """Parameters for DeleteDropzone"""
    input: DeleteDropzoneInput!
  ): DeleteDropzonePayload
  deleteLoad(
    """Parameters for DeleteLoad"""
    input: DeleteLoadInput!
  ): DeleteLoadPayload
  deletePlane(
    """Parameters for DeletePlane"""
    input: DeletePlaneInput!
  ): DeletePlanePayload
  deleteSlot(
    """Parameters for DeleteSlot"""
    input: DeleteSlotInput!
  ): DeleteSlotPayload
  deleteTicketType(
    """Parameters for DeleteTicket"""
    input: DeleteTicketInput!
  ): DeleteTicketPayload
  finalizeLoad(
    """Parameters for FinalizeLoad"""
    input: FinalizeLoadInput!
  ): FinalizeLoadPayload
  grantPermission(
    """Parameters for GrantPermission"""
    input: GrantPermissionInput!
  ): GrantPermissionPayload
  joinFederation(
    """Parameters for JoinFederation"""
    input: JoinFederationInput!
  ): JoinFederationPayload
  reloadWeatherCondition(
    """Parameters for ReloadWeatherCondition"""
    input: ReloadWeatherConditionInput!
  ): ReloadWeatherConditionPayload
  revokePermission(
    """Parameters for RevokePermission"""
    input: RevokePermissionInput!
  ): RevokePermissionPayload
  updateDropzone(
    """Parameters for UpdateDropzone"""
    input: UpdateDropzoneInput!
  ): UpdateDropzonePayload
  updateDropzoneUser(
    """Parameters for UpdateDropzoneUser"""
    input: UpdateDropzoneUserInput!
  ): UpdateDropzoneUserPayload
  updateExtra(
    """Parameters for UpdateExtra"""
    input: UpdateExtraInput!
  ): UpdateExtraPayload
  updateFormTemplate(
    """Parameters for UpdateFormTemplate"""
    input: UpdateFormTemplateInput!
  ): UpdateFormTemplatePayload
  updateLoad(
    """Parameters for UpdateLoad"""
    input: UpdateLoadInput!
  ): UpdateLoadPayload
  updateNotification(
    """Parameters for UpdateNotification"""
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload
  updatePlane(
    """Parameters for UpdatePlane"""
    input: UpdatePlaneInput!
  ): UpdatePlanePayload
  updateRig(
    """Parameters for UpdateRig"""
    input: UpdateRigInput!
  ): UpdateRigPayload
  updateRigInspection(
    """Parameters for UpdateRigInspection"""
    input: UpdateRigInspectionInput!
  ): UpdateRigInspectionPayload
  updateRole(
    """Parameters for UpdateRole"""
    input: UpdateRoleInput!
  ): UpdateRolePayload
  updateSlot(
    """Parameters for UpdateSlot"""
    input: UpdateSlotInput!
  ): UpdateSlotPayload
  updateTicketType(
    """Parameters for UpdateTicket"""
    input: UpdateTicketInput!
  ): UpdateTicketPayload
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userRegister(email: String!, password: String!, passwordConfirmation: String!, confirmUrl: String): UserRegisterPayload
  userResendConfirmation(email: String!, redirectUrl: String!): UserResendConfirmationPayload
  userResendConfirmationWithToken(email: String!, confirmUrl: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordReset(email: String!, redirectUrl: String!): UserSendPasswordResetPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userSignUp(email: String!, password: String!, passwordConfirmation: String!, confirmSuccessUrl: String, phone: String!, exitWeight: Float!, name: String!, licenseId: Int, pushToken: String): UserSignUpPayload
  userUpdatePassword(password: String!, passwordConfirmation: String!, currentPassword: String): UserUpdatePasswordPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

type Notification {
  createdAt: Int!
  id: ID!
  isSeen: Boolean!
  message: String
  notificationType: NotificationType
  receivedBy: DropzoneUser!
  resource: AnyResource
  sentBy: DropzoneUser
  updatedAt: Int!
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]

  """A list of nodes."""
  nodes: [Notification]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification
}

input NotificationInput {
  isSeen: Boolean!
}

enum NotificationType {
  """system"""
  system

  """packjob_pending_confirm"""
  packjob_pending_confirm

  """packjob_confirmed"""
  packjob_confirmed

  """rig_pending_inspection"""
  rig_pending_inspection

  """boarding_call"""
  boarding_call

  """user_manifested"""
  user_manifested

  """credits_updated"""
  credits_updated

  """rig_inspection_completed"""
  rig_inspection_completed

  """rig_inspection_requested"""
  rig_inspection_requested

  """membership_updated"""
  membership_updated

  """boarding_call_canceled"""
  boarding_call_canceled

  """permission_granted"""
  permission_granted

  """permission_revoked"""
  permission_revoked

  """publication_requested"""
  publication_requested
}

type Order implements AnyResource {
  amount: Float!
  buyer: Wallet!
  createdAt: Int!
  dropzone: Dropzone!
  id: ID!
  item: SellableItem
  orderNumber: Int!
  receipts: [Receipt!]
  seller: Wallet!
  state: OrderState!
  title: String
  updatedAt: Int!
}

"""The connection type for Order."""
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge]

  """A list of nodes."""
  nodes: [Order]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Order
}

input OrderInput {
  title: String

  """Any sales peer, e.g DropzoneUser or Dropzone"""
  seller: WalletInput!

  """Any buyer peer, e.g DropzoneUser or Dropzone"""
  buyer: WalletInput!

  """Total amount of the order"""
  amount: Int!
  sellableItem: SellableItemInput
  dropzoneId: Int!
}

enum OrderState {
  """pending"""
  pending

  """completed"""
  completed

  """refunded"""
  refunded

  """cancelled"""
  cancelled
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum Permission {
  """updateDropzone"""
  updateDropzone

  """deleteDropzone"""
  deleteDropzone

  """updateWeatherConditions"""
  updateWeatherConditions

  """createLoad"""
  createLoad

  """updateLoad"""
  updateLoad

  """deleteLoad"""
  deleteLoad

  """readLoad"""
  readLoad

  """createSlot"""
  createSlot

  """updateSlot"""
  updateSlot

  """deleteSlot"""
  deleteSlot

  """createUserSlot"""
  createUserSlot

  """createUserSlotWithSelf"""
  createUserSlotWithSelf

  """updateUserSlot"""
  updateUserSlot

  """deleteUserSlot"""
  deleteUserSlot

  """createStudentSlot"""
  createStudentSlot

  """updateStudentSlot"""
  updateStudentSlot

  """deleteStudentSlot"""
  deleteStudentSlot

  """createTicketType"""
  createTicketType

  """updateTicketType"""
  updateTicketType

  """deleteTicketType"""
  deleteTicketType

  """createExtra"""
  createExtra

  """updateExtra"""
  updateExtra

  """deleteExtra"""
  deleteExtra

  """readExtra"""
  readExtra

  """createPlane"""
  createPlane

  """updatePlane"""
  updatePlane

  """deletePlane"""
  deletePlane

  """createRig"""
  createRig

  """updateRig"""
  updateRig

  """deleteRig"""
  deleteRig

  """readRig"""
  readRig

  """createDropzoneRig"""
  createDropzoneRig

  """updateDropzoneRig"""
  updateDropzoneRig

  """deleteDropzoneRig"""
  deleteDropzoneRig

  """readDropzoneRig"""
  readDropzoneRig

  """readPermissions"""
  readPermissions

  """updatePermissions"""
  updatePermissions

  """createPackjob"""
  createPackjob

  """updatePackjob"""
  updatePackjob

  """deletePackjob"""
  deletePackjob

  """readPackjob"""
  readPackjob

  """createFormTemplate"""
  createFormTemplate

  """updateFormTemplate"""
  updateFormTemplate

  """deleteFormTemplate"""
  deleteFormTemplate

  """readFormTemplate"""
  readFormTemplate

  """readUser"""
  readUser

  """updateUser"""
  updateUser

  """deleteUser"""
  deleteUser

  """createUser"""
  createUser

  """actAsPilot"""
  actAsPilot

  """actAsLoadMaster"""
  actAsLoadMaster

  """actAsGCA"""
  actAsGCA

  """actAsDZSO"""
  actAsDZSO

  """actAsRigInspector"""
  actAsRigInspector

  """createUserTransaction"""
  createUserTransaction

  """readUserTransactions"""
  readUserTransactions

  """grantPermission"""
  grantPermission

  """revokePermission"""
  revokePermission
}

type Plane implements AnyResource {
  createdAt: Int!
  dropzone: Dropzone!
  hours: Int
  id: ID!
  maxSlots: Int
  minSlots: Int
  name: String
  nextMaintenanceHours: Int
  registration: String
  updatedAt: Int!
}

input PlaneInput {
  name: String
  minSlots: Int
  maxSlots: Int
  dropzoneId: Int
  hours: Int
  nextMaintenanceHours: Int
  registration: String
}

type Query {
  """Get dropzone details"""
  dropzone(id: Int!): Dropzone!

  """Get all available dropzones"""
  dropzones(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    requestedPublication: Boolean
    isPublic: Boolean
  ): DropzoneConnection!

  """Get ticket addons for a dropzone"""
  extras(dropzoneId: Int!): [Extra!]!

  """Available federations"""
  federations: [Federation!]!

  """Load base64 images as graphql"""
  image(id: Int!): String

  """Get all jump types"""
  jumpTypes(allowedForUserId: Int): [JumpType!]!

  """Get all licenses for a federation"""
  licenses(federationId: Int): [License!]!

  """Get load by id"""
  load(id: Int!): Load!

  """Get loads"""
  loads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    dropzoneId: Int!
    earliestTimestamp: Int
  ): LoadConnection!

  """Get planes from a dropzone"""
  planes(dropzoneId: Int!): [Plane!]!

  """Get ticket types for a dropzone"""
  ticketTypes(dropzoneId: Int!, allowManifestingSelf: Boolean): [TicketType!]!
  userCheckPasswordToken(resetPasswordToken: String!, redirectUrl: String): User!
  userConfirmAccount(confirmationToken: String!, redirectUrl: String!): User!
}

type Receipt implements AnyResource {
  amountCents: Int
  createdAt: Int!
  id: ID!
  order: Order!
  transactions: [Transaction!]!
  updatedAt: Int!
}

"""Autogenerated input type of ReloadWeatherCondition"""
input ReloadWeatherConditionInput {
  id: Int
  dropzoneId: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of ReloadWeatherCondition"""
type ReloadWeatherConditionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  weatherCondition: WeatherCondition
}

"""Autogenerated input type of RevokePermission"""
input RevokePermissionInput {
  permission: Permission!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of RevokePermission"""
type RevokePermissionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

type Rig implements AnyResource {
  canopySize: Int
  createdAt: Int!
  dropzone: Dropzone
  id: ID!
  isPublic: Boolean!
  maintainedAt: Int
  make: String
  model: String
  name: String
  packValue: Int
  packingCard: String
  repackExpiresAt: Int
  rigInspections(dropzoneId: Int!): RigInspection
  rigType: String
  serial: String
  updatedAt: Int!
  user: User
}

input RigInput {
  name: String
  make: String
  model: String
  serial: String
  packValue: Int
  repackExpiresAt: Int
  maintainedAt: Int
  dropzoneId: Int
  packingCard: String
  userId: Int

  """student / sport / tandem"""
  rigType: String
  isPublic: Boolean
  canopySize: Int
}

type RigInspection implements AnyResource {
  createdAt: Int!
  definition: String!
  dropzoneUser: DropzoneUser!
  formTemplate: FormTemplate!
  id: ID!
  inspectedBy: DropzoneUser!
  isOk: Boolean!
  rig: Rig
  updatedAt: Int!
}

input RigInspectionInput {
  dropzoneId: Int
  rigId: Int
  definition: String
  isOk: Boolean
}

interface SellableItem {
  cost: Float
  title: String
}

input SellableItemInput {
  """Any sales peer, e.g DropzoneUser or Dropzone"""
  type: SellableItemTypes!

  """ID of the record"""
  id: ID!
}

enum SellableItemTypes {
  pack
  ticketType
  extra
  slot
}

type Slot implements AnyResource & SellableItem {
  cost: Float!
  createdAt: Int!
  dropzoneUser: DropzoneUser
  exitWeight: Int!
  extras: [Extra!]
  groupNumber: Int!
  id: ID!
  jumpType: JumpType
  load: Load!
  order: Order
  passengerExitWeight: Float
  passengerName: String
  rig: Rig
  ticketType: TicketType
  title: String
  user: User
  wingLoading: Float
}

"""The connection type for Slot."""
type SlotConnection {
  """A list of edges."""
  edges: [SlotEdge]

  """A list of nodes."""
  nodes: [Slot]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SlotEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Slot
}

input SlotInput {
  dropzoneUserId: Int
  ticketTypeId: Int
  jumpTypeId: Int
  loadId: Int
  rigId: Int
  exitWeight: Float
  extraIds: [Int!]
  userGroup: [SlotUser!]
  passengerName: String
  passengerExitWeight: Float
}

input SlotUser {
  id: Int!
  exitWeight: Float!
  rigId: Int
  passengerName: String
  passengerExitWeight: Float
}

type TicketType implements AnyResource & SellableItem {
  allowManifestingSelf: Boolean
  altitude: Int
  cost: Float!
  createdAt: Int!
  currency: String
  dropzone: Dropzone
  extras: [Extra!]!
  id: ID!
  isTandem: Boolean
  name: String
  title: String
  updatedAt: Int!
}

input TicketTypeInput {
  currency: String
  cost: Float
  name: String
  altitude: Int
  allowManifestingSelf: Boolean
  dropzoneId: Int
  isTandem: Boolean
  extraIds: [Int!]
}

type Transaction implements AnyResource {
  amount: Float!
  createdAt: Int!
  dropzoneUser: DropzoneUser!
  id: ID!
  message: String
  receipt: Receipt!
  receiver: Wallet!
  sender: Wallet!
  status: TransactionStatus!
  transactionType: TransactionType!
  updatedAt: Int!
}

enum TransactionStatus {
  reserved
  completed
  cancelled
}

enum TransactionType {
  purchase
  sale
  deposit
  withdrawal
  refund
}

"""Autogenerated input type of UpdateDropzone"""
input UpdateDropzoneInput {
  id: Int!
  attributes: DropzoneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateDropzone"""
type UpdateDropzonePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateDropzoneUser"""
input UpdateDropzoneUserInput {
  attributes: DropzoneUserInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateDropzoneUser"""
type UpdateDropzoneUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateExtra"""
input UpdateExtraInput {
  attributes: ExtraInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateExtra"""
type UpdateExtraPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  extra: Extra
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateFormTemplate"""
input UpdateFormTemplateInput {
  attributes: FormTemplateInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateFormTemplate"""
type UpdateFormTemplatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  formTemplate: FormTemplate
}

"""Autogenerated input type of UpdateLoad"""
input UpdateLoadInput {
  id: Int!
  attributes: LoadInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateLoad"""
type UpdateLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of UpdateNotification"""
input UpdateNotificationInput {
  attributes: NotificationInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateNotification"""
type UpdateNotificationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  notification: Notification
}

"""Autogenerated input type of UpdatePlane"""
input UpdatePlaneInput {
  id: Int!
  attributes: PlaneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdatePlane"""
type UpdatePlanePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  plane: Plane
}

"""Autogenerated input type of UpdateRig"""
input UpdateRigInput {
  attributes: RigInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of UpdateRigInspection"""
input UpdateRigInspectionInput {
  attributes: RigInspectionInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRigInspection"""
type UpdateRigInspectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rigInspection: RigInspection
}

"""Autogenerated return type of UpdateRig"""
type UpdateRigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rig: Rig
}

"""Autogenerated input type of UpdateRole"""
input UpdateRoleInput {
  permission: String!
  enabled: Boolean!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateRole"""
type UpdateRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  role: UserRole
}

"""Autogenerated input type of UpdateSlot"""
input UpdateSlotInput {
  id: Int!
  attributes: SlotInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateSlot"""
type UpdateSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  slot: Slot
}

"""Autogenerated input type of UpdateTicket"""
input UpdateTicketInput {
  id: Int!
  attributes: TicketTypeInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateTicket"""
type UpdateTicketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  ticketType: TicketType
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  attributes: UserInput!
  id: Int

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of UpdateUser"""
type UpdateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  user: User
}

type User implements AnyResource {
  apfNumber: String
  createdAt: Int!
  dropzoneUsers: [DropzoneUser!]
  email: String
  exitWeight: String
  id: ID!
  image: String
  jumpTypes: [JumpType!]
  license: License
  moderationRole: ModerationRole
  name: String
  nickname: String
  phone: String
  pushToken: String
  rigs: [Rig!]
  updatedAt: Int!
  userFederations: [UserFederation!]
}

"""Autogenerated return type of UserConfirmRegistrationWithToken"""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

type UserFederation implements AnyResource {
  federation: Federation!
  id: ID!
  license: License
  qualifications: [UserQualification!]

  """User Federation ID, e.g APF number"""
  uid: String
  user: User!
}

input UserFederationInput {
  federationId: Int!

  """User Federation ID, e.g APF number"""
  uid: String
  licenseId: Int
}

input UserInput {
  name: String
  nickname: String
  pushToken: String
  image: String
  apfNumber: String
  phone: String
  email: String
  licenseId: Int
  exitWeight: Float
}

"""Autogenerated return type of UserLogin"""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""Autogenerated return type of UserLogout"""
type UserLogoutPayload {
  authenticatable: User!
}

type UserQualification implements AnyResource {
  expiresAt: Int
  id: ID!
  name: String
  uid: String
}

"""Autogenerated return type of UserRegister"""
type UserRegisterPayload {
  authenticatable: User!

  """
  Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required).
  """
  credentials: Credential
}

"""Autogenerated return type of UserResendConfirmation"""
type UserResendConfirmationPayload {
  message: String!
}

"""Autogenerated return type of UserResendConfirmationWithToken"""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

type UserRole {
  createdAt: Int!
  dropzone: Dropzone!
  dropzoneId: Int!
  id: ID!
  name: String
  permissions: [String!]!
  updatedAt: Int!
}

"""Autogenerated return type of UserSendPasswordReset"""
type UserSendPasswordResetPayload {
  message: String!
}

"""Autogenerated return type of UserSendPasswordResetWithToken"""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""Autogenerated return type of UserSignUp"""
type UserSignUpPayload {
  authenticatable: User

  """
  Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required).
  """
  credentials: Credential
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated return type of UserUpdatePassword"""
type UserUpdatePasswordPayload {
  authenticatable: User!
}

"""Autogenerated return type of UserUpdatePasswordWithToken"""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

interface Wallet {
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: Int
  ): OrderConnection
  purchases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  sales(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
}

input WalletInput {
  """Any model with an account, e.g DropzoneUser or Dropzone"""
  type: WalletableTypes!

  """ID of the record"""
  id: ID!
}

enum WalletableTypes {
  dropzoneUser
  dropzone
}

type WeatherCondition {
  createdAt: Int!
  exitSpotMiles: Int
  id: ID!
  jumpRun: Int
  offsetDirection: Int
  offsetMiles: Int
  temperature: Int
  updatedAt: Int!
  winds: [Wind!]
}

input WeatherConditionInput {
  winds: String
  temperature: Int
  jumpRun: Int
  exitSpotMiles: Int
  offsetMiles: Int
  offsetDirection: String
  dropzoneId: Int!
}

type Wind {
  altitude: String
  direction: String
  speed: String
  temperature: String
}
