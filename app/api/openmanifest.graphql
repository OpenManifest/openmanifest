interface AnyResource {
  guid: ID!
  id: ID!
}

"""Autogenerated return type of Apple."""
type ApplePayload {
  authenticatable: User

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of CreateDropzone"""
input CreateDropzoneInput {
  attributes: DropzoneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateDropzone."""
type CreateDropzonePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of CreateExtra"""
input CreateExtraInput {
  attributes: ExtraInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of CreateExtra."""
type CreateExtraPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  extra: Extra
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of CreateGhost"""
input CreateGhostInput {
  attributes: GhostInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateGhost."""
type CreateGhostPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  user: User
}

"""Autogenerated input type of CreateLoad"""
input CreateLoadInput {
  attributes: LoadInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateLoad."""
type CreateLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of CreateOrder"""
input CreateOrderInput {
  attributes: OrderInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateOrder."""
type CreateOrderPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  order: Order
}

"""Autogenerated input type of CreatePlane"""
input CreatePlaneInput {
  attributes: PlaneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreatePlane."""
type CreatePlanePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  plane: Plane
}

"""Autogenerated input type of CreateRig"""
input CreateRigInput {
  attributes: RigInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated input type of CreateRigInspection"""
input CreateRigInspectionInput {
  attributes: RigInspectionInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of CreateRigInspection."""
type CreateRigInspectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rigInspection: RigInspection
}

"""Autogenerated return type of CreateRig."""
type CreateRigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rig: Rig
}

"""Autogenerated input type of CreateSlot"""
input CreateSlotInput {
  attributes: SlotInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSlot."""
type CreateSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  slot: Slot
}

"""Autogenerated input type of CreateSlots"""
input CreateSlotsInput {
  attributes: SlotInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateSlots."""
type CreateSlotsPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of CreateTicket"""
input CreateTicketInput {
  attributes: TicketTypeInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of CreateTicket."""
type CreateTicketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  ticketType: TicketType
}

"""Autogenerated input type of CreateWeatherCondition"""
input CreateWeatherConditionInput {
  attributes: WeatherConditionInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of CreateWeatherCondition."""
type CreateWeatherConditionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  weatherCondition: WeatherCondition
}

type Credential {
  accessToken: String!
  client: String!
  expiry: Int!
  tokenType: String!
  uid: String!
}

"""Autogenerated input type of DeleteDropzone"""
input DeleteDropzoneInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of DeleteDropzone."""
type DeleteDropzonePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of DeleteLoad"""
input DeleteLoadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of DeleteLoad."""
type DeleteLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of DeletePlane"""
input DeletePlaneInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of DeletePlane."""
type DeletePlanePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  plane: Plane
}

"""Autogenerated input type of DeleteRig"""
input DeleteRigInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of DeleteRig."""
type DeleteRigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rig: Rig
}

"""Autogenerated input type of DeleteSlot"""
input DeleteSlotInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of DeleteSlot."""
type DeleteSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  slot: Slot
}

"""Autogenerated input type of DeleteTicket"""
input DeleteTicketInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of DeleteTicket."""
type DeleteTicketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  ticketType: TicketType
}

"""Autogenerated input type of DeleteUser"""
input DeleteUserInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The ID of the dropzone user to delete"""
  id: Int!
}

"""Autogenerated return type of DeleteUser."""
type DeleteUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

type Dropzone implements AnyResource & Wallet {
  allowedJumpTypes(userId: [Int!]!): [JumpType!]!
  banner: String
  createdAt: ISO8601DateTime!
  currentConditions: WeatherCondition!
  currentUser: DropzoneUser!
  dropzoneUser(id: Int, userId: Int): DropzoneUser
  extras: [Extra!]!
  federation: Federation!
  guid: ID!
  id: ID!
  isCreditSystemEnabled: Boolean!
  lat: Float
  lng: Float

  """Get the master log entry for a given date"""
  masterLog(
    """This should be the timestamp of the beginning of the day"""
    date: Int!
  ): MasterLog!
  name: String
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: Int
  ): OrderConnection
  planes: [Plane!]!
  primaryColor: String
  purchases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  rigInspectionTemplate: FormTemplate

  """Get rigs for dropzone"""
  rigs: [Rig!]
  roles(selectable: Boolean): [UserRole!]!
  sales(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  secondaryColor: String
  state: DropzoneState!
  statistics: Statistics!
  ticketTypes(isPublic: Boolean): [TicketType!]!
  updatedAt: ISO8601DateTime!
  userRoles: [UserRole!]!
  walletId: ID!
}

"""The connection type for Dropzone."""
type DropzoneConnection {
  """A list of edges."""
  edges: [DropzoneEdge]

  """A list of nodes."""
  nodes: [Dropzone]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DropzoneEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Dropzone
}

input DropzoneInput {
  banner: String
  federation: Int!
  isCreditSystemEnabled: Boolean
  isPublic: Boolean
  lat: Float
  lng: Float
  name: String!
  primaryColor: String
  requestPublication: Boolean
  secondaryColor: String
}

enum DropzoneState {
  archived
  demo
  in_review
  private
  public
}

enum DropzoneStateEvent {
  """archive"""
  archive

  """demo"""
  demo

  """publish"""
  publish

  """request_publication"""
  request_publication

  """unpublish"""
  unpublish
}

type DropzoneUser implements AnyResource & Wallet {
  """
  Get user rigs that have been inspected and marked as OK + dropzone rigs
  """
  availableRigs(
    isTandem: Boolean

    """Filter out rigs already occupied for a load"""
    loadId: Int
  ): [Rig!]
  createdAt: ISO8601DateTime!
  credits: Int
  dropzone: Dropzone!
  expiresAt: Int
  guid: ID!
  hasCredits: Boolean!
  hasExitWeight: Boolean!
  hasLicense: Boolean!
  hasMembership: Boolean!
  hasReserveInDate: Boolean!
  hasRigInspection: Boolean!
  id: ID!
  jumpTypes: [JumpType!]
  license: License
  notifications(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): NotificationConnection
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: Int
  ): OrderConnection
  permissions: [Permission!]
  purchases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  rigInspections: [RigInspection!]
  role: UserRole
  sales(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  slots(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): SlotConnection
  unseenNotifications: Int!
  updatedAt: ISO8601DateTime!
  user: User!
  userFederation: UserFederation
  walletId: ID!
}

"""The connection type for DropzoneUser."""
type DropzoneUserConnection {
  """A list of edges."""
  edges: [DropzoneUserEdge]

  """A list of nodes."""
  nodes: [DropzoneUser]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type DropzoneUserEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: DropzoneUser
}

input DropzoneUserInput {
  credits: Float
  email: String
  exitWeight: Float
  expiresAt: Int
  federationNumber: String
  image: String
  license: Int
  name: String
  nickname: String
  phone: String
  pushToken: String
  userRoleId: Int
}

type Event {
  action: EventAction
  createdAt: ISO8601DateTime!
  createdBy: DropzoneUser
  details: String
  id: ID!
  level: EventLevel
  message: String
  resource: AnyResource
  updatedAt: ISO8601DateTime!
}

enum EventAccessLevel {
  """admin"""
  admin

  """system"""
  system

  """user"""
  user
}

enum EventAction {
  """assigned"""
  assigned

  """confirmed"""
  confirmed

  """created"""
  created

  """deleted"""
  deleted

  """updated"""
  updated
}

"""The connection type for Event."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]

  """A list of nodes."""
  nodes: [Event]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Event
}

enum EventLevel {
  """debug"""
  debug

  """error"""
  error

  """info"""
  info
}

type Extra implements AnyResource & SellableItem {
  cost: Float!
  createdAt: ISO8601DateTime!
  dropzone: Dropzone!
  guid: ID!
  id: ID!
  name: String
  ticketTypes: [TicketType!]!
  title: String
  updatedAt: ISO8601DateTime!
}

input ExtraInput {
  cost: Float
  dropzoneId: Int
  name: String
  ticketTypeIds: [Int!]
}

"""Autogenerated return type of Facebook."""
type FacebookPayload {
  authenticatable: User

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
  errors: [String!]
  fieldErrors: [FieldError!]
}

type Federation {
  createdAt: ISO8601DateTime!
  id: ID!
  licenses: [License!]
  name: String
  slug: String
  updatedAt: ISO8601DateTime!
}

type FieldError {
  field: String!
  message: String!
}

"""Autogenerated input type of FinalizeLoad"""
input FinalizeLoadInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
  state: LoadState!
}

"""Autogenerated return type of FinalizeLoad."""
type FinalizeLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

type FormTemplate {
  createdAt: ISO8601DateTime!
  definition: String
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

input FormTemplateInput {
  definition: String
  dropzoneId: Int
  name: String
}

type GeocodedLocation {
  formattedString: String
  id: ID!
  lat: Float
  lng: Float!
}

input GhostInput {
  dropzone: Int!
  email: String!
  exitWeight: Float!
  federationNumber: String
  license: Int
  name: String!
  phone: String
  role: Int!
}

"""Autogenerated input type of GrantPermission"""
input GrantPermissionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: ID
  permission: Permission!
}

"""Autogenerated return type of GrantPermission."""
type GrantPermissionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Autogenerated input type of JoinFederation"""
input JoinFederationInput {
  attributes: UserFederationInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of JoinFederation."""
type JoinFederationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  userFederation: UserFederation
}

type JumpType {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

type License implements AnyResource {
  createdAt: ISO8601DateTime!
  federation: Federation
  guid: ID!
  id: ID!
  name: String
  updatedAt: ISO8601DateTime!
}

type Load implements AnyResource {
  availableSlots: Int!
  createdAt: ISO8601DateTime!
  dispatchAt: Int
  gca: DropzoneUser
  guid: ID!
  hasLanded: Boolean
  id: ID!
  isFull: Boolean!
  isOpen: Boolean!
  isReady: Boolean!
  loadMaster: DropzoneUser
  loadNumber: Int!
  maxSlots: Int!
  name: String
  occupiedSlots: Int!
  pilot: DropzoneUser
  plane: Plane!
  slots: [Slot!]
  state: LoadState!
  updatedAt: ISO8601DateTime!
  weight: Int!
}

"""The connection type for Load."""
type LoadConnection {
  """A list of edges."""
  edges: [LoadEdge]

  """A list of nodes."""
  nodes: [Load]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LoadEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Load
}

input LoadInput {
  dispatchAt: ISO8601DateTime
  gca: Int
  loadMaster: Int
  maxSlots: Int
  name: String
  pilot: Int
  plane: Int
  state: LoadState
}

enum LoadState {
  """boarding_call"""
  boarding_call

  """cancelled"""
  cancelled

  """in_flight"""
  in_flight

  """landed"""
  landed

  """open"""
  open
}

"""Autogenerated return type of LoadUpdated."""
type LoadUpdatedPayload {
  load: Load
}

type MasterLog {
  createdAt: ISO8601DateTime!
  dropzone: Dropzone
  dzso: [DropzoneUser!]
  id: ID!
  loads: [Load!]
  notes: String
  updatedAt: ISO8601DateTime!
}

type MasterLogAircraft {
  name: String
  registration: String
}

type MasterLogEntry {
  date: ISO8601Date
  loads: [MasterLogLoad!]
  location: GeocodedLocation
}

type MasterLogLoad {
  aircraft: MasterLogAircraft
  dispatchAt: ISO8601DateTime
  gca: MasterLogUser
  id: ID!
  loadMaster: MasterLogUser
  loadNumber: Int
  slots: [MasterLogSlot!]
}

type MasterLogSlot {
  altitude: Int
  id: ID!
  jumpType: String
  name: String
}

type MasterLogUser {
  email: String
  name: String
  nickname: String
  phone: String
}

enum ModerationRole {
  """administrator"""
  administrator

  """moderator"""
  moderator

  """support"""
  support

  """user"""
  user
}

"""Autogenerated input type of MoveSlot"""
input MoveSlotInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  sourceSlot: Int!
  targetLoad: Int!
  targetSlot: Int
}

"""Autogenerated return type of MoveSlot."""
type MoveSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  loads: [Load!]
}

type Mutation {
  archiveRig(
    """Parameters for DeleteRig"""
    input: DeleteRigInput!
  ): DeleteRigPayload
  archiveTicketType(
    """Parameters for DeleteTicket"""
    input: DeleteTicketInput!
  ): DeleteTicketPayload
  createDropzone(
    """Parameters for CreateDropzone"""
    input: CreateDropzoneInput!
  ): CreateDropzonePayload
  createExtra(
    """Parameters for CreateExtra"""
    input: CreateExtraInput!
  ): CreateExtraPayload
  createGhost(
    """Parameters for CreateGhost"""
    input: CreateGhostInput!
  ): CreateGhostPayload
  createLoad(
    """Parameters for CreateLoad"""
    input: CreateLoadInput!
  ): CreateLoadPayload
  createOrder(
    """Parameters for CreateOrder"""
    input: CreateOrderInput!
  ): CreateOrderPayload
  createPlane(
    """Parameters for CreatePlane"""
    input: CreatePlaneInput!
  ): CreatePlanePayload
  createRig(
    """Parameters for CreateRig"""
    input: CreateRigInput!
  ): CreateRigPayload
  createRigInspection(
    """Parameters for CreateRigInspection"""
    input: CreateRigInspectionInput!
  ): CreateRigInspectionPayload
  createSlot(
    """Parameters for CreateSlot"""
    input: CreateSlotInput!
  ): CreateSlotPayload
  createSlots(
    """Parameters for CreateSlots"""
    input: CreateSlotsInput!
  ): CreateSlotsPayload
  createTicketType(
    """Parameters for CreateTicket"""
    input: CreateTicketInput!
  ): CreateTicketPayload
  createWeatherCondition(
    """Parameters for CreateWeatherCondition"""
    input: CreateWeatherConditionInput!
  ): CreateWeatherConditionPayload
  deleteDropzone(
    """Parameters for DeleteDropzone"""
    input: DeleteDropzoneInput!
  ): DeleteDropzonePayload
  deleteLoad(
    """Parameters for DeleteLoad"""
    input: DeleteLoadInput!
  ): DeleteLoadPayload
  deletePlane(
    """Parameters for DeletePlane"""
    input: DeletePlaneInput!
  ): DeletePlanePayload
  deleteSlot(
    """Parameters for DeleteSlot"""
    input: DeleteSlotInput!
  ): DeleteSlotPayload
  deleteUser(
    """Parameters for DeleteUser"""
    input: DeleteUserInput!
  ): DeleteUserPayload
  finalizeLoad(
    """Parameters for FinalizeLoad"""
    input: FinalizeLoadInput!
  ): FinalizeLoadPayload
  grantPermission(
    """Parameters for GrantPermission"""
    input: GrantPermissionInput!
  ): GrantPermissionPayload
  joinFederation(
    """Parameters for JoinFederation"""
    input: JoinFederationInput!
  ): JoinFederationPayload
  loginWithApple(
    """Used to create the redirect URL"""
    confirmUrl: String
    pushToken: String
    token: String!
    userIdentity: String!
  ): ApplePayload
  loginWithFacebook(
    """Used to create the redirect URL"""
    confirmUrl: String
    pushToken: String
    token: String!
  ): FacebookPayload
  moveSlot(
    """Parameters for MoveSlot"""
    input: MoveSlotInput!
  ): MoveSlotPayload
  reloadWeatherCondition(
    """Parameters for ReloadWeatherCondition"""
    input: ReloadWeatherConditionInput!
  ): ReloadWeatherConditionPayload
  revokePermission(
    """Parameters for RevokePermission"""
    input: RevokePermissionInput!
  ): RevokePermissionPayload
  updateDropzone(
    """Parameters for UpdateDropzone"""
    input: UpdateDropzoneInput!
  ): UpdateDropzonePayload
  updateDropzoneUser(
    """Parameters for UpdateDropzoneUser"""
    input: UpdateDropzoneUserInput!
  ): UpdateDropzoneUserPayload
  updateExtra(
    """Parameters for UpdateExtra"""
    input: UpdateExtraInput!
  ): UpdateExtraPayload
  updateFormTemplate(
    """Parameters for UpdateFormTemplate"""
    input: UpdateFormTemplateInput!
  ): UpdateFormTemplatePayload
  updateLoad(
    """Parameters for UpdateLoad"""
    input: UpdateLoadInput!
  ): UpdateLoadPayload
  updateNotification(
    """Parameters for UpdateNotification"""
    input: UpdateNotificationInput!
  ): UpdateNotificationPayload
  updatePlane(
    """Parameters for UpdatePlane"""
    input: UpdatePlaneInput!
  ): UpdatePlanePayload
  updateRig(
    """Parameters for UpdateRig"""
    input: UpdateRigInput!
  ): UpdateRigPayload
  updateRigInspection(
    """Parameters for UpdateRigInspection"""
    input: UpdateRigInspectionInput!
  ): UpdateRigInspectionPayload
  updateRole(
    """Parameters for UpdateRole"""
    input: UpdateRoleInput!
  ): UpdateRolePayload
  updateSlot(
    """Parameters for UpdateSlot"""
    input: UpdateSlotInput!
  ): UpdateSlotPayload
  updateTicketType(
    """Parameters for UpdateTicket"""
    input: UpdateTicketInput!
  ): UpdateTicketPayload
  updateUser(
    """Parameters for UpdateUser"""
    input: UpdateUserInput!
  ): UpdateUserPayload
  updateVisibility(
    """Parameters for UpdateVisibility"""
    input: UpdateVisibilityInput!
  ): UpdateVisibilityPayload
  userConfirmRegistrationWithToken(confirmationToken: String!): UserConfirmRegistrationWithTokenPayload
  userLogin(email: String!, password: String!): UserLoginPayload
  userLogout: UserLogoutPayload
  userRegister(confirmUrl: String, email: String!, exitWeight: Float!, licenseId: Int, name: String!, password: String!, passwordConfirmation: String!, phone: String!, pushToken: String): SignUpPayload
  userResendConfirmationWithToken(confirmUrl: String!, email: String!): UserResendConfirmationWithTokenPayload
  userSendPasswordResetWithToken(email: String!, redirectUrl: String!): UserSendPasswordResetWithTokenPayload
  userUpdatePasswordWithToken(password: String!, passwordConfirmation: String!, resetPasswordToken: String!): UserUpdatePasswordWithTokenPayload
}

type Notification {
  createdAt: ISO8601DateTime!
  id: ID!
  isSeen: Boolean!
  message: String
  notificationType: NotificationType
  receivedBy: DropzoneUser!
  resource: AnyResource
  sentBy: DropzoneUser
  updatedAt: ISO8601DateTime!
}

"""The connection type for Notification."""
type NotificationConnection {
  """A list of edges."""
  edges: [NotificationEdge]

  """A list of nodes."""
  nodes: [Notification]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type NotificationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Notification
}

input NotificationInput {
  isSeen: Boolean!
}

enum NotificationType {
  """boarding_call"""
  boarding_call

  """boarding_call_canceled"""
  boarding_call_canceled

  """credits_updated"""
  credits_updated

  """membership_updated"""
  membership_updated

  """packjob_confirmed"""
  packjob_confirmed

  """packjob_pending_confirm"""
  packjob_pending_confirm

  """permission_granted"""
  permission_granted

  """permission_revoked"""
  permission_revoked

  """publication_requested"""
  publication_requested

  """rig_inspection_completed"""
  rig_inspection_completed

  """rig_inspection_requested"""
  rig_inspection_requested

  """rig_pending_inspection"""
  rig_pending_inspection

  """system"""
  system

  """user_manifested"""
  user_manifested
}

type Order implements AnyResource {
  amount: Float!
  buyer: Wallet!
  createdAt: ISO8601DateTime!
  dropzone: Dropzone!
  guid: ID!
  id: ID!
  item: SellableItem
  orderNumber: Int!
  receipts: [Receipt!]
  seller: Wallet!
  state: OrderState!
  title: String
  updatedAt: ISO8601DateTime!
}

"""The connection type for Order."""
type OrderConnection {
  """A list of edges."""
  edges: [OrderEdge]

  """A list of nodes."""
  nodes: [Order]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type OrderEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Order
}

input OrderInput {
  """Total amount of the order"""
  amount: Float!

  """Any buyer peer, e.g DropzoneUser or Dropzone"""
  buyer: ID!
  dropzone: ID!

  """Item to attach to order"""
  sellableItem: ID

  """Any sales peer, e.g DropzoneUser or Dropzone"""
  seller: ID!
  title: String
}

enum OrderState {
  """cancelled"""
  cancelled

  """completed"""
  completed

  """pending"""
  pending

  """refunded"""
  refunded
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

enum Permission {
  actAsDZSO
  actAsGCA
  actAsLoadMaster
  actAsPilot
  actAsRigInspector
  createDoubleSlot
  createDropzoneRig
  createExtra
  createFormTemplate
  createLoad
  createPackjob
  createPlane
  createRig
  createSlot
  createStudentSlot
  createTicketType
  createUser
  createUserDoubleSlot
  createUserSlot
  createUserSlotWithSelf
  createUserTransaction
  deleteDropzone
  deleteDropzoneRig
  deleteExtra
  deleteFormTemplate
  deleteLoad
  deletePackjob
  deletePlane
  deleteRig
  deleteSlot
  deleteStudentSlot
  deleteTicketType
  deleteUser
  deleteUserSlot
  grantPermission
  readDropzoneRig
  readExtra
  readFormTemplate
  readLoad
  readPackjob
  readPermissions
  readRig
  readUser
  readUserTransactions
  revokePermission
  undeleteDropzone
  undeleteDropzoneRig
  undeleteExtra
  undeletePlane
  undeleteRig
  undeleteStudentSlot
  undeleteTicketType
  undeleteUser
  undeleteUserSlot
  updateDropzone
  updateDropzoneRig
  updateExtra
  updateFormTemplate
  updateLoad
  updatePackjob
  updatePermissions
  updatePlane
  updateRig
  updateSlot
  updateStudentSlot
  updateTicketType
  updateUser
  updateUserSlot
  updateWeatherConditions
  viewAdminActivity
  viewRevenue
  viewStatistics
  viewSystemActivity
  viewUserActivity
}

type Plane implements AnyResource {
  createdAt: ISO8601DateTime!
  dropzone: Dropzone!
  guid: ID!
  hours: Int
  id: ID!
  maxSlots: Int!
  minSlots: Int
  name: String
  nextMaintenanceHours: Int
  registration: String
  updatedAt: ISO8601DateTime!
}

input PlaneInput {
  dropzoneId: Int
  hours: Int
  maxSlots: Int
  minSlots: Int
  name: String
  nextMaintenanceHours: Int
  registration: String
}

type Query {
  """Get all Activity Events for a dropzone (or all dropzones)"""
  activity(
    accessLevels: [EventAccessLevel!]
    actions: [EventAction!]

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Filter by who created the event"""
    createdBy: [ID!]

    """Filter by Dropzone"""
    dropzone: [ID!]

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    levels: [EventLevel!]
    timeRange: TimeRangeInput
  ): EventConnection!

  """
  Get user rigs that have been inspected and marked as OK + dropzone rigs
  """
  availableRigs(
    """Dropzone User to get rigs for"""
    dropzoneUser: Int!
    isTandem: Boolean

    """Filter out rigs already occupied for a load"""
    loadId: Int
  ): [Rig!]

  """Currently authenticated user"""
  currentUser: User

  """Get dropzone details"""
  dropzone(id: ID!): Dropzone

  """Get a specific user at a dropzone"""
  dropzoneUser(id: ID!): DropzoneUser

  """Search users at a dropzone"""
  dropzoneUsers(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    dropzone: ID!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    licensed: Boolean
    permissions: [Permission!]
    search: String
  ): DropzoneUserConnection

  """Get all available dropzones"""
  dropzones(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    state: [DropzoneState!] = null
  ): DropzoneConnection!

  """Get all ticket type extras"""
  extras(dropzone: ID, ticketType: ID): [Extra!]!

  """Get all available federations"""
  federations: [Federation!]!

  """Find location by searching"""
  geocode(search: String!): GeocodedLocation

  """Get Base64 images via GraphQL"""
  image(id: Int!): String

  """Get all jump types"""
  jumpTypes(dropzoneUsers: [Int!]): [JumpType!]!

  """Get all licenses for a federation"""
  licenses(federationId: Int): [License!]!

  """Get load by id"""
  load(id: ID!): Load

  """Get all loads"""
  loads(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Search for loads for a specific day"""
    date: ISO8601Date
    dropzone: ID!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LoadConnection!

  """Get the master log entry for a specific day"""
  masterLog(date: ISO8601Date!, dropzone: ID!): MasterLogEntry

  """Get Aircrafts for a dropzone"""
  planes(dropzone: ID!): [Plane!]

  """Get ticket types for a dropzone"""
  ticketTypes(allowManifestingSelf: Boolean, dropzone: ID!): [TicketType!]
}

type Receipt implements AnyResource {
  amountCents: Int
  createdAt: ISO8601DateTime!
  guid: ID!
  id: ID!
  order: Order!
  transactions: [Transaction!]!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of ReloadWeatherCondition"""
input ReloadWeatherConditionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneId: Int
  id: Int
}

"""Autogenerated return type of ReloadWeatherCondition."""
type ReloadWeatherConditionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  weatherCondition: WeatherCondition
}

"""Autogenerated input type of RevokePermission"""
input RevokePermissionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: ID
  permission: Permission!
}

"""Autogenerated return type of RevokePermission."""
type RevokePermissionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

type Rig implements AnyResource {
  canopySize: Int
  createdAt: ISO8601DateTime!
  dropzone: Dropzone
  guid: ID!
  id: ID!
  isPublic: Boolean!
  maintainedAt: Int
  make: String
  model: String
  name: String
  owner: User
  packValue: Int
  packingCard: String
  repackExpiresAt: Int
  rigInspections(dropzoneId: ID!): RigInspection
  rigType: String
  serial: String
  updatedAt: ISO8601DateTime!
}

input RigInput {
  canopySize: Int
  dropzoneId: Int
  isPublic: Boolean
  maintainedAt: Int
  make: String
  model: String
  name: String
  packValue: Int
  packingCard: String
  repackExpiresAt: Int

  """student / sport / tandem"""
  rigType: String
  serial: String
  userId: Int
}

type RigInspection implements AnyResource {
  createdAt: ISO8601DateTime!
  definition: String!
  dropzoneUser: DropzoneUser!
  formTemplate: FormTemplate!
  guid: ID!
  id: ID!
  inspectedBy: DropzoneUser!
  isOk: Boolean!
  rig: Rig
  updatedAt: ISO8601DateTime!
}

input RigInspectionInput {
  definition: String
  dropzone: ID
  isOk: Boolean
  rig: ID
}

interface SellableItem {
  cost: Float
  title: String
}

"""Autogenerated return type of SignUp."""
type SignUpPayload {
  authenticatable: User

  """
  Authentication credentials. Null if after signUp resource is not active for
  authentication (e.g. Email confirmation required).
  """
  credentials: Credential
  errors: [String!]
  fieldErrors: [FieldError!]
}

type Slot implements AnyResource & SellableItem {
  cost: Float!
  createdAt: ISO8601DateTime!
  dropzoneUser: DropzoneUser
  exitWeight: Int!
  extras: [Extra!]
  groupNumber: Int!
  guid: ID!
  id: ID!
  jumpType: JumpType
  load: Load!
  order: Order
  passengerExitWeight: Float
  passengerName: String
  rig: Rig
  ticketType: TicketType
  title: String
  updatedAt: ISO8601DateTime!
  wingLoading: Float
}

"""The connection type for Slot."""
type SlotConnection {
  """A list of edges."""
  edges: [SlotEdge]

  """A list of nodes."""
  nodes: [Slot]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type SlotEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Slot
}

input SlotInput {
  dropzoneUser: ID
  exitWeight: Float
  extras: [ID!]
  groupNumber: Int
  jumpType: ID
  load: ID
  passengerExitWeight: Float
  passengerName: String
  rig: ID
  ticketType: ID
  userGroup: [SlotUser!]
}

input SlotUser {
  exitWeight: Float!
  id: Int!
  passengerExitWeight: Float
  passengerName: String
  rig: ID
}

type Statistics {
  activeUserCount: Int!
  cancelledLoadsCount(timeRange: TimeRangeInput): Int!
  dzsoCount: Int!
  finalizedLoadsCount(timeRange: TimeRangeInput): Int!
  gcaCount: Int!
  id: ID!
  inactiveUserCount: Int!

  """Get the number of loads dispatched per day"""
  loadCountByDay(timeRange: TimeRangeInput): [StatisticsByDate!]
  loadsCount(timeRange: TimeRangeInput): Int!
  pilotCount: Int!
  revenueCentsCount(timeRange: TimeRangeInput): Int!
  rigInspectorCount: Int!

  """Get the number of slots by jump type"""
  slotsByJumpType(timeRange: TimeRangeInput): [StatisticsByName!]
  slotsCount(timeRange: TimeRangeInput): Int!
  totalUserCount: Int!
}

type StatisticsByDate {
  count: Int!
  date: ISO8601Date!
}

type StatisticsByName {
  count: Int!
  name: String!
}

type Subscription {
  loadUpdated(loadId: ID!): LoadUpdatedPayload!
  userUpdated(dropzoneUserId: ID!): UserUpdatedPayload!
}

type TicketType implements AnyResource & SellableItem {
  allowManifestingSelf: Boolean
  altitude: Int
  cost: Float!
  createdAt: ISO8601DateTime!
  currency: String
  dropzone: Dropzone
  extras: [Extra!]!
  guid: ID!
  id: ID!
  isTandem: Boolean
  name: String
  title: String
  updatedAt: ISO8601DateTime!
}

input TicketTypeInput {
  allowManifestingSelf: Boolean
  altitude: Int
  cost: Float
  currency: String
  dropzoneId: Int
  extraIds: [Int!]
  isTandem: Boolean
  name: String
}

input TimeRangeInput {
  endTime: ISO8601DateTime
  startTime: ISO8601DateTime
}

type Transaction implements AnyResource {
  amount: Float!
  createdAt: ISO8601DateTime!
  dropzoneUser: DropzoneUser!
  guid: ID!
  id: ID!
  message: String
  receipt: Receipt!
  receiver: Wallet!
  sender: Wallet!
  status: TransactionStatus!
  transactionType: TransactionType!
  updatedAt: ISO8601DateTime!
}

enum TransactionStatus {
  cancelled
  completed
  reserved
}

enum TransactionType {
  deposit
  purchase
  refund
  sale
  withdrawal
}

"""Autogenerated input type of UpdateDropzone"""
input UpdateDropzoneInput {
  attributes: DropzoneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of UpdateDropzone."""
type UpdateDropzonePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateDropzoneUser"""
input UpdateDropzoneUserInput {
  attributes: DropzoneUserInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: ID
}

"""Autogenerated return type of UpdateDropzoneUser."""
type UpdateDropzoneUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateExtra"""
input UpdateExtraInput {
  attributes: ExtraInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of UpdateExtra."""
type UpdateExtraPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  extra: Extra
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateFormTemplate"""
input UpdateFormTemplateInput {
  attributes: FormTemplateInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of UpdateFormTemplate."""
type UpdateFormTemplatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  formTemplate: FormTemplate
}

"""Autogenerated input type of UpdateLoad"""
input UpdateLoadInput {
  attributes: LoadInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of UpdateLoad."""
type UpdateLoadPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  load: Load
}

"""Autogenerated input type of UpdateNotification"""
input UpdateNotificationInput {
  attributes: NotificationInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of UpdateNotification."""
type UpdateNotificationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  notification: Notification
}

"""Autogenerated input type of UpdatePlane"""
input UpdatePlaneInput {
  attributes: PlaneInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of UpdatePlane."""
type UpdatePlanePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  plane: Plane
}

"""Autogenerated input type of UpdateRig"""
input UpdateRigInput {
  attributes: RigInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated input type of UpdateRigInspection"""
input UpdateRigInspectionInput {
  attributes: RigInspectionInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int
}

"""Autogenerated return type of UpdateRigInspection."""
type UpdateRigInspectionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rigInspection: RigInspection
}

"""Autogenerated return type of UpdateRig."""
type UpdateRigPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  rig: Rig
}

"""Autogenerated input type of UpdateRole"""
input UpdateRoleInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  enabled: Boolean!
  id: Int
  permission: String!
}

"""Autogenerated return type of UpdateRole."""
type UpdateRolePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  role: UserRole
}

"""Autogenerated input type of UpdateSlot"""
input UpdateSlotInput {
  attributes: SlotInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of UpdateSlot."""
type UpdateSlotPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  slot: Slot
}

"""Autogenerated input type of UpdateTicket"""
input UpdateTicketInput {
  attributes: TicketTypeInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: Int!
}

"""Autogenerated return type of UpdateTicket."""
type UpdateTicketPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  errors: [String!]
  fieldErrors: [FieldError!]
  ticketType: TicketType
}

"""Autogenerated input type of UpdateUser"""
input UpdateUserInput {
  attributes: UserInput!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: ID
}

"""Autogenerated return type of UpdateUser."""
type UpdateUserPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzoneUser: DropzoneUser
  errors: [String!]
  fieldErrors: [FieldError!]
}

"""Autogenerated input type of UpdateVisibility"""
input UpdateVisibilityInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: ID!
  event: DropzoneStateEvent!
}

"""Autogenerated return type of UpdateVisibility."""
type UpdateVisibilityPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  dropzone: Dropzone
  errors: [String!]
  fieldErrors: [FieldError!]
}

type User implements AnyResource {
  apfNumber: String
  createdAt: ISO8601DateTime!
  dropzoneUsers: [DropzoneUser!]
  email: String
  exitWeight: String
  guid: ID!
  id: ID!
  image: String
  licenses: [License!]
  moderationRole: ModerationRole
  name: String
  nickname: String
  phone: String
  pushToken: String
  rigs: [Rig!]
  updatedAt: ISO8601DateTime!
  userFederations: [UserFederation!]
}

"""Autogenerated return type of UserConfirmRegistrationWithToken."""
type UserConfirmRegistrationWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Null unless user is signed in after confirmation.
  """
  credentials: Credential
}

type UserFederation implements AnyResource {
  federation: Federation!
  guid: ID!
  id: ID!
  license: License
  qualifications: [UserQualification!]

  """User Federation ID, e.g APF number"""
  uid: String
  user: User!
}

input UserFederationInput {
  federation: ID!
  license: ID

  """User Federation ID, e.g APF number"""
  uid: String
}

input UserInput {
  email: String
  exitWeight: Float
  federationNumber: String
  image: String
  license: Int
  name: String
  nickname: String
  phone: String
  pushToken: String
}

"""Autogenerated return type of UserLogin."""
type UserLoginPayload {
  authenticatable: User!
  credentials: Credential!
}

"""Autogenerated return type of UserLogout."""
type UserLogoutPayload {
  authenticatable: User!
}

type UserQualification implements AnyResource {
  expiresAt: Int
  guid: ID!
  id: ID!
  name: String
  uid: String
}

"""Autogenerated return type of UserResendConfirmationWithToken."""
type UserResendConfirmationWithTokenPayload {
  message: String!
}

type UserRole {
  createdAt: ISO8601DateTime!
  dropzone: Dropzone!
  dropzoneId: Int!
  id: ID!
  name: String
  permissions: [String!]!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of UserSendPasswordResetWithToken."""
type UserSendPasswordResetWithTokenPayload {
  message: String!
}

"""Autogenerated return type of UserUpdatePasswordWithToken."""
type UserUpdatePasswordWithTokenPayload {
  authenticatable: User!

  """
  Authentication credentials. Resource must be signed_in for credentials to be returned.
  """
  credentials: Credential
}

"""Autogenerated return type of UserUpdated."""
type UserUpdatedPayload {
  dropzoneUser: DropzoneUser
}

interface Wallet {
  orders(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: Int
  ): OrderConnection
  purchases(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  sales(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): OrderConnection
  walletId: ID!
}

type WeatherCondition {
  createdAt: ISO8601DateTime!
  exitSpotMiles: Int
  id: ID!
  jumpRun: Int
  offsetDirection: Int
  offsetMiles: Int
  temperature: Int
  updatedAt: ISO8601DateTime!
  winds: [Wind!]
}

input WeatherConditionInput {
  dropzoneId: Int!
  exitSpotMiles: Int
  jumpRun: Int
  offsetDirection: String
  offsetMiles: Int
  temperature: Int
  winds: String
}

type Wind {
  altitude: String
  direction: String
  speed: String
  temperature: String
}
