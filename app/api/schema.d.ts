export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type AnyResource = object;

/** Autogenerated input type of CreateDropzone */
export type CreateDropzoneInput = {
  attributes: DropzoneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateDropzone */
export type CreateDropzonePayload = {
  __typename?: 'CreateDropzonePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
};

/** Autogenerated input type of CreateExtra */
export type CreateExtraInput = {
  attributes: ExtraInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateExtra */
export type CreateExtraPayload = {
  __typename?: 'CreateExtraPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  extra?: Maybe<Extra>;
  fieldErrors?: Maybe<FieldError[]>;
};

/** Autogenerated input type of CreateGhost */
export type CreateGhostInput = {
  attributes: GhostInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateGhost */
export type CreateGhostPayload = {
  __typename?: 'CreateGhostPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  user?: Maybe<User>;
};

/** Autogenerated input type of CreateLoad */
export type CreateLoadInput = {
  attributes: LoadInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateLoad */
export type CreateLoadPayload = {
  __typename?: 'CreateLoadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of CreatePlane */
export type CreatePlaneInput = {
  attributes: PlaneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreatePlane */
export type CreatePlanePayload = {
  __typename?: 'CreatePlanePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  plane?: Maybe<Plane>;
};

/** Autogenerated input type of CreateRig */
export type CreateRigInput = {
  attributes: RigInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateRigInspection */
export type CreateRigInspectionInput = {
  attributes: RigInspectionInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateRigInspection */
export type CreateRigInspectionPayload = {
  __typename?: 'CreateRigInspectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  rigInspection?: Maybe<RigInspection>;
};

/** Autogenerated return type of CreateRig */
export type CreateRigPayload = {
  __typename?: 'CreateRigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  rig?: Maybe<Rig>;
};

/** Autogenerated input type of CreateSlot */
export type CreateSlotInput = {
  attributes: SlotInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSlot */
export type CreateSlotPayload = {
  __typename?: 'CreateSlotPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  slot?: Maybe<Slot>;
};

/** Autogenerated input type of CreateSlots */
export type CreateSlotsInput = {
  attributes: SlotInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSlots */
export type CreateSlotsPayload = {
  __typename?: 'CreateSlotsPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of CreateTicket */
export type CreateTicketInput = {
  attributes: TicketTypeInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTicket */
export type CreateTicketPayload = {
  __typename?: 'CreateTicketPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  ticketType?: Maybe<TicketType>;
};

/** Autogenerated input type of CreateTransaction */
export type CreateTransactionInput = {
  attributes: TransactionInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateTransaction */
export type CreateTransactionPayload = {
  __typename?: 'CreateTransactionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  transaction?: Maybe<Transaction>;
};

/** Autogenerated input type of CreateWeatherCondition */
export type CreateWeatherConditionInput = {
  attributes: WeatherConditionInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateWeatherCondition */
export type CreateWeatherConditionPayload = {
  __typename?: 'CreateWeatherConditionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  weatherCondition?: Maybe<WeatherCondition>;
};

export type Credential = {
  __typename?: 'Credential';
  accessToken: Scalars['String'];
  client: Scalars['String'];
  expiry: Scalars['Int'];
  tokenType: Scalars['String'];
  uid: Scalars['String'];
};

/** Autogenerated input type of DeleteDropzone */
export type DeleteDropzoneInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteDropzone */
export type DeleteDropzonePayload = {
  __typename?: 'DeleteDropzonePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
};

/** Autogenerated input type of DeleteLoad */
export type DeleteLoadInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteLoad */
export type DeleteLoadPayload = {
  __typename?: 'DeleteLoadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of DeletePlane */
export type DeletePlaneInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeletePlane */
export type DeletePlanePayload = {
  __typename?: 'DeletePlanePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  plane?: Maybe<Plane>;
};

/** Autogenerated input type of DeleteSlot */
export type DeleteSlotInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteSlot */
export type DeleteSlotPayload = {
  __typename?: 'DeleteSlotPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  slot?: Maybe<Slot>;
};

/** Autogenerated input type of DeleteTicket */
export type DeleteTicketInput = {
  id: Scalars['Int'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of DeleteTicket */
export type DeleteTicketPayload = {
  __typename?: 'DeleteTicketPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  ticketType?: Maybe<TicketType>;
};

export type Dropzone = AnyResource & {
  __typename?: 'Dropzone';
  allowedJumpTypes: JumpType[];
  banner?: Maybe<Scalars['String']>;
  createdAt: Scalars['Int'];
  currentConditions: WeatherCondition;
  currentUser: DropzoneUser;
  dropzoneUser?: Maybe<DropzoneUser>;
  dropzoneUsers: DropzoneUserConnection;
  extras: Extra[];
  federation: Federation;
  id: Scalars['ID'];
  isCreditSystemEnabled: Scalars['Boolean'];
  isPublic: Scalars['Boolean'];
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
  loads: LoadConnection;
  /** Get the master log entry for a given date */
  masterLog: MasterLog;
  name?: Maybe<Scalars['String']>;
  planes: Plane[];
  primaryColor?: Maybe<Scalars['String']>;
  rigInspectionTemplate?: Maybe<FormTemplate>;
  /** Get rigs for dropzone */
  rigs?: Maybe<Rig[]>;
  roles: UserRole[];
  secondaryColor?: Maybe<Scalars['String']>;
  ticketTypes: TicketType[];
  updatedAt: Scalars['Int'];
  userRoles: UserRole[];
};

export type DropzoneAllowedJumpTypesArgs = {
  userId: Scalars['Int'][];
};

export type DropzoneDropzoneUserArgs = {
  id?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
};

export type DropzoneDropzoneUsersArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  permissions?: Maybe<Permission[]>;
  search?: Maybe<Scalars['String']>;
  licensed?: Maybe<Scalars['Boolean']>;
};

export type DropzoneLoadsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  earliestTimestamp?: Maybe<Scalars['Int']>;
};

export type DropzoneMasterLogArgs = {
  date: Scalars['Int'];
};

export type DropzoneRolesArgs = {
  selectable?: Maybe<Scalars['Boolean']>;
};

export type DropzoneTicketTypesArgs = {
  isPublic?: Maybe<Scalars['Boolean']>;
};

/** The connection type for Dropzone. */
export type DropzoneConnection = {
  __typename?: 'DropzoneConnection';
  /** A list of edges. */
  edges?: Maybe<Maybe<DropzoneEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<Dropzone>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DropzoneEdge = {
  __typename?: 'DropzoneEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Dropzone>;
};

export type DropzoneInput = {
  name: Scalars['String'];
  banner?: Maybe<Scalars['String']>;
  federationId: Scalars['Int'];
  isPublic?: Maybe<Scalars['Boolean']>;
  lat?: Maybe<Scalars['Float']>;
  lng?: Maybe<Scalars['Float']>;
  primaryColor?: Maybe<Scalars['String']>;
  secondaryColor?: Maybe<Scalars['String']>;
  isCreditSystemEnabled?: Maybe<Scalars['Boolean']>;
};

export type DropzoneUser = AnyResource & {
  __typename?: 'DropzoneUser';
  /** Get user rigs that have been inspected and marked as OK + dropzone rigs */
  availableRigs?: Maybe<Rig[]>;
  createdAt: Scalars['Int'];
  credits?: Maybe<Scalars['Int']>;
  dropzone: Dropzone;
  expiresAt?: Maybe<Scalars['Int']>;
  hasCredits: Scalars['Boolean'];
  hasExitWeight: Scalars['Boolean'];
  hasLicense: Scalars['Boolean'];
  hasMembership: Scalars['Boolean'];
  hasReserveInDate: Scalars['Boolean'];
  hasRigInspection: Scalars['Boolean'];
  id: Scalars['ID'];
  notifications?: Maybe<NotificationConnection>;
  permissions?: Maybe<Permission[]>;
  rigInspections?: Maybe<RigInspection[]>;
  role?: Maybe<UserRole>;
  transactions?: Maybe<TransactionConnection>;
  unseenNotifications: Scalars['Int'];
  updatedAt: Scalars['Int'];
  user: User;
};

export type DropzoneUserAvailableRigsArgs = {
  isTandem?: Maybe<Scalars['Boolean']>;
};

export type DropzoneUserNotificationsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type DropzoneUserTransactionsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for DropzoneUser. */
export type DropzoneUserConnection = {
  __typename?: 'DropzoneUserConnection';
  /** A list of edges. */
  edges?: Maybe<Maybe<DropzoneUserEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<DropzoneUser>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type DropzoneUserEdge = {
  __typename?: 'DropzoneUserEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<DropzoneUser>;
};

export type DropzoneUserInput = {
  expiresAt?: Maybe<Scalars['Int']>;
  credits?: Maybe<Scalars['Float']>;
  userRoleId?: Maybe<Scalars['Int']>;
};

export type Extra = {
  __typename?: 'Extra';
  cost: Scalars['Int'];
  createdAt: Scalars['Int'];
  dropzone: Dropzone;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  ticketTypes: TicketType[];
  updatedAt: Scalars['Int'];
};

export type ExtraInput = {
  name?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  ticketTypeIds?: Maybe<Scalars['Int'][]>;
};

export type Federation = {
  __typename?: 'Federation';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type FieldError = {
  __typename?: 'FieldError';
  field: Scalars['String'];
  message: Scalars['String'];
};

export type FormTemplate = {
  __typename?: 'FormTemplate';
  createdAt: Scalars['Int'];
  definition?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type FormTemplateInput = {
  name?: Maybe<Scalars['String']>;
  definition?: Maybe<Scalars['String']>;
  dropzoneId?: Maybe<Scalars['Int']>;
};

export type GhostInput = {
  name: Scalars['String'];
  email: Scalars['String'];
  phone?: Maybe<Scalars['String']>;
  exitWeight: Scalars['Float'];
  dropzoneId: Scalars['Int'];
  roleId: Scalars['Int'];
  licenseId?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of GrantPermission */
export type GrantPermissionInput = {
  permission: Permission;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of GrantPermission */
export type GrantPermissionPayload = {
  __typename?: 'GrantPermissionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzoneUser?: Maybe<DropzoneUser>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
};

export type JumpType = {
  __typename?: 'JumpType';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type License = AnyResource & {
  __typename?: 'License';
  createdAt: Scalars['Int'];
  federation?: Maybe<Federation>;
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type Load = AnyResource & {
  __typename?: 'Load';
  availableSlots: Scalars['Int'];
  createdAt: Scalars['Int'];
  dispatchAt?: Maybe<Scalars['Int']>;
  gca?: Maybe<DropzoneUser>;
  hasLanded?: Maybe<Scalars['Boolean']>;
  id: Scalars['ID'];
  isFull: Scalars['Boolean'];
  isOpen: Scalars['Boolean'];
  isReady: Scalars['Boolean'];
  loadMaster?: Maybe<DropzoneUser>;
  loadNumber: Scalars['Int'];
  maxSlots: Scalars['Int'];
  name?: Maybe<Scalars['String']>;
  occupiedSlots: Scalars['Int'];
  pilot?: Maybe<DropzoneUser>;
  plane: Plane;
  slots?: Maybe<Slot[]>;
  state: LoadState;
  updatedAt: Scalars['Int'];
  weight: Scalars['Int'];
};

/** The connection type for Load. */
export type LoadConnection = {
  __typename?: 'LoadConnection';
  /** A list of edges. */
  edges?: Maybe<Maybe<LoadEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<Load>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type LoadEdge = {
  __typename?: 'LoadEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Load>;
};

export type LoadInput = {
  dispatchAt?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  maxSlots?: Maybe<Scalars['Int']>;
  isOpen?: Maybe<Scalars['Boolean']>;
  hasLanded?: Maybe<Scalars['Boolean']>;
  pilotId?: Maybe<Scalars['Int']>;
  planeId?: Maybe<Scalars['Int']>;
  gcaId?: Maybe<Scalars['Int']>;
  loadMasterId?: Maybe<Scalars['Int']>;
  state?: Maybe<LoadState>;
};

export enum LoadState {
  /** open */
  Open = 'open',
  /** boarding_call */
  BoardingCall = 'boarding_call',
  /** in_flight */
  InFlight = 'in_flight',
  /** landed */
  Landed = 'landed',
  /** cancelled */
  Cancelled = 'cancelled',
}

export type MasterLog = {
  __typename?: 'MasterLog';
  createdAt: Scalars['Int'];
  dropzone?: Maybe<Dropzone>;
  dzso?: Maybe<DropzoneUser[]>;
  id: Scalars['ID'];
  loads?: Maybe<Load[]>;
  notes?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type Mutation = {
  __typename?: 'Mutation';
  createDropzone?: Maybe<CreateDropzonePayload>;
  createExtra?: Maybe<CreateExtraPayload>;
  createGhost?: Maybe<CreateGhostPayload>;
  createLoad?: Maybe<CreateLoadPayload>;
  createPlane?: Maybe<CreatePlanePayload>;
  createRig?: Maybe<CreateRigPayload>;
  createRigInspection?: Maybe<CreateRigInspectionPayload>;
  createSlot?: Maybe<CreateSlotPayload>;
  createSlots?: Maybe<CreateSlotsPayload>;
  createTicketType?: Maybe<CreateTicketPayload>;
  createTransaction?: Maybe<CreateTransactionPayload>;
  createWeatherCondition?: Maybe<CreateWeatherConditionPayload>;
  deleteDropzone?: Maybe<DeleteDropzonePayload>;
  deleteLoad?: Maybe<DeleteLoadPayload>;
  deletePlane?: Maybe<DeletePlanePayload>;
  deleteSlot?: Maybe<DeleteSlotPayload>;
  deleteTicketType?: Maybe<DeleteTicketPayload>;
  grantPermission?: Maybe<GrantPermissionPayload>;
  revokePermission?: Maybe<RevokePermissionPayload>;
  updateDropzone?: Maybe<UpdateDropzonePayload>;
  updateDropzoneUser?: Maybe<UpdateDropzoneUserPayload>;
  updateExtra?: Maybe<UpdateExtraPayload>;
  updateFormTemplate?: Maybe<UpdateFormTemplatePayload>;
  updateLoad?: Maybe<UpdateLoadPayload>;
  updateNotification?: Maybe<UpdateNotificationPayload>;
  updatePlane?: Maybe<UpdatePlanePayload>;
  updateRig?: Maybe<UpdateRigPayload>;
  updateRigInspection?: Maybe<UpdateRigInspectionPayload>;
  updateRole?: Maybe<UpdateRolePayload>;
  updateSlot?: Maybe<UpdateSlotPayload>;
  updateTicketType?: Maybe<UpdateTicketPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
  userLogin?: Maybe<UserLoginPayload>;
  userLogout?: Maybe<UserLogoutPayload>;
  userResendConfirmation?: Maybe<UserResendConfirmationPayload>;
  userSendPasswordReset?: Maybe<UserSendPasswordResetPayload>;
  userSendPasswordResetWithToken?: Maybe<UserSendPasswordResetWithTokenPayload>;
  userSignUp?: Maybe<UserSignUpPayload>;
  userUpdatePassword?: Maybe<UserUpdatePasswordPayload>;
  userUpdatePasswordWithToken?: Maybe<UserUpdatePasswordWithTokenPayload>;
};

export type MutationCreateDropzoneArgs = {
  input: CreateDropzoneInput;
};

export type MutationCreateExtraArgs = {
  input: CreateExtraInput;
};

export type MutationCreateGhostArgs = {
  input: CreateGhostInput;
};

export type MutationCreateLoadArgs = {
  input: CreateLoadInput;
};

export type MutationCreatePlaneArgs = {
  input: CreatePlaneInput;
};

export type MutationCreateRigArgs = {
  input: CreateRigInput;
};

export type MutationCreateRigInspectionArgs = {
  input: CreateRigInspectionInput;
};

export type MutationCreateSlotArgs = {
  input: CreateSlotInput;
};

export type MutationCreateSlotsArgs = {
  input: CreateSlotsInput;
};

export type MutationCreateTicketTypeArgs = {
  input: CreateTicketInput;
};

export type MutationCreateTransactionArgs = {
  input: CreateTransactionInput;
};

export type MutationCreateWeatherConditionArgs = {
  input: CreateWeatherConditionInput;
};

export type MutationDeleteDropzoneArgs = {
  input: DeleteDropzoneInput;
};

export type MutationDeleteLoadArgs = {
  input: DeleteLoadInput;
};

export type MutationDeletePlaneArgs = {
  input: DeletePlaneInput;
};

export type MutationDeleteSlotArgs = {
  input: DeleteSlotInput;
};

export type MutationDeleteTicketTypeArgs = {
  input: DeleteTicketInput;
};

export type MutationGrantPermissionArgs = {
  input: GrantPermissionInput;
};

export type MutationRevokePermissionArgs = {
  input: RevokePermissionInput;
};

export type MutationUpdateDropzoneArgs = {
  input: UpdateDropzoneInput;
};

export type MutationUpdateDropzoneUserArgs = {
  input: UpdateDropzoneUserInput;
};

export type MutationUpdateExtraArgs = {
  input: UpdateExtraInput;
};

export type MutationUpdateFormTemplateArgs = {
  input: UpdateFormTemplateInput;
};

export type MutationUpdateLoadArgs = {
  input: UpdateLoadInput;
};

export type MutationUpdateNotificationArgs = {
  input: UpdateNotificationInput;
};

export type MutationUpdatePlaneArgs = {
  input: UpdatePlaneInput;
};

export type MutationUpdateRigArgs = {
  input: UpdateRigInput;
};

export type MutationUpdateRigInspectionArgs = {
  input: UpdateRigInspectionInput;
};

export type MutationUpdateRoleArgs = {
  input: UpdateRoleInput;
};

export type MutationUpdateSlotArgs = {
  input: UpdateSlotInput;
};

export type MutationUpdateTicketTypeArgs = {
  input: UpdateTicketInput;
};

export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};

export type MutationUserLoginArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};

export type MutationUserResendConfirmationArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};

export type MutationUserSendPasswordResetArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};

export type MutationUserSendPasswordResetWithTokenArgs = {
  email: Scalars['String'];
  redirectUrl: Scalars['String'];
};

export type MutationUserSignUpArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  confirmSuccessUrl?: Maybe<Scalars['String']>;
  phone: Scalars['String'];
  exitWeight: Scalars['Float'];
  name: Scalars['String'];
  licenseId?: Maybe<Scalars['Int']>;
  pushToken?: Maybe<Scalars['String']>;
};

export type MutationUserUpdatePasswordArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  currentPassword?: Maybe<Scalars['String']>;
};

export type MutationUserUpdatePasswordWithTokenArgs = {
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  resetPasswordToken: Scalars['String'];
};

export type Notification = {
  __typename?: 'Notification';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  isSeen: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  notificationType?: Maybe<Scalars['String']>;
  receivedBy: DropzoneUser;
  resource?: Maybe<AnyResource>;
  sentBy?: Maybe<DropzoneUser>;
  updatedAt: Scalars['Int'];
};

/** The connection type for Notification. */
export type NotificationConnection = {
  __typename?: 'NotificationConnection';
  /** A list of edges. */
  edges?: Maybe<Maybe<NotificationEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<Notification>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type NotificationEdge = {
  __typename?: 'NotificationEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Notification>;
};

export type NotificationInput = {
  isSeen: Scalars['Boolean'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export enum Permission {
  /** updateDropzone */
  UpdateDropzone = 'updateDropzone',
  /** deleteDropzone */
  DeleteDropzone = 'deleteDropzone',
  /** updateWeatherConditions */
  UpdateWeatherConditions = 'updateWeatherConditions',
  /** createLoad */
  CreateLoad = 'createLoad',
  /** updateLoad */
  UpdateLoad = 'updateLoad',
  /** deleteLoad */
  DeleteLoad = 'deleteLoad',
  /** readLoad */
  ReadLoad = 'readLoad',
  /** createSlot */
  CreateSlot = 'createSlot',
  /** updateSlot */
  UpdateSlot = 'updateSlot',
  /** deleteSlot */
  DeleteSlot = 'deleteSlot',
  /** createUserSlot */
  CreateUserSlot = 'createUserSlot',
  /** createUserSlotWithSelf */
  CreateUserSlotWithSelf = 'createUserSlotWithSelf',
  /** updateUserSlot */
  UpdateUserSlot = 'updateUserSlot',
  /** deleteUserSlot */
  DeleteUserSlot = 'deleteUserSlot',
  /** createStudentSlot */
  CreateStudentSlot = 'createStudentSlot',
  /** updateStudentSlot */
  UpdateStudentSlot = 'updateStudentSlot',
  /** deleteStudentSlot */
  DeleteStudentSlot = 'deleteStudentSlot',
  /** createTicketType */
  CreateTicketType = 'createTicketType',
  /** updateTicketType */
  UpdateTicketType = 'updateTicketType',
  /** deleteTicketType */
  DeleteTicketType = 'deleteTicketType',
  /** createExtra */
  CreateExtra = 'createExtra',
  /** updateExtra */
  UpdateExtra = 'updateExtra',
  /** deleteExtra */
  DeleteExtra = 'deleteExtra',
  /** readExtra */
  ReadExtra = 'readExtra',
  /** createPlane */
  CreatePlane = 'createPlane',
  /** updatePlane */
  UpdatePlane = 'updatePlane',
  /** deletePlane */
  DeletePlane = 'deletePlane',
  /** createRig */
  CreateRig = 'createRig',
  /** updateRig */
  UpdateRig = 'updateRig',
  /** deleteRig */
  DeleteRig = 'deleteRig',
  /** readRig */
  ReadRig = 'readRig',
  /** createDropzoneRig */
  CreateDropzoneRig = 'createDropzoneRig',
  /** updateDropzoneRig */
  UpdateDropzoneRig = 'updateDropzoneRig',
  /** deleteDropzoneRig */
  DeleteDropzoneRig = 'deleteDropzoneRig',
  /** readDropzoneRig */
  ReadDropzoneRig = 'readDropzoneRig',
  /** readPermissions */
  ReadPermissions = 'readPermissions',
  /** updatePermissions */
  UpdatePermissions = 'updatePermissions',
  /** createPackjob */
  CreatePackjob = 'createPackjob',
  /** updatePackjob */
  UpdatePackjob = 'updatePackjob',
  /** deletePackjob */
  DeletePackjob = 'deletePackjob',
  /** readPackjob */
  ReadPackjob = 'readPackjob',
  /** createFormTemplate */
  CreateFormTemplate = 'createFormTemplate',
  /** updateFormTemplate */
  UpdateFormTemplate = 'updateFormTemplate',
  /** deleteFormTemplate */
  DeleteFormTemplate = 'deleteFormTemplate',
  /** readFormTemplate */
  ReadFormTemplate = 'readFormTemplate',
  /** readUser */
  ReadUser = 'readUser',
  /** updateUser */
  UpdateUser = 'updateUser',
  /** deleteUser */
  DeleteUser = 'deleteUser',
  /** createUser */
  CreateUser = 'createUser',
  /** actAsPilot */
  ActAsPilot = 'actAsPilot',
  /** actAsLoadMaster */
  ActAsLoadMaster = 'actAsLoadMaster',
  /** actAsGCA */
  ActAsGca = 'actAsGCA',
  /** actAsDZSO */
  ActAsDzso = 'actAsDZSO',
  /** actAsRigInspector */
  ActAsRigInspector = 'actAsRigInspector',
  /** createUserTransaction */
  CreateUserTransaction = 'createUserTransaction',
  /** readUserTransactions */
  ReadUserTransactions = 'readUserTransactions',
  /** grantPermission */
  GrantPermission = 'grantPermission',
  /** revokePermission */
  RevokePermission = 'revokePermission',
}

export type Plane = AnyResource & {
  __typename?: 'Plane';
  createdAt: Scalars['Int'];
  dropzone: Dropzone;
  hours?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  maxSlots?: Maybe<Scalars['Int']>;
  minSlots?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  nextMaintenanceHours?: Maybe<Scalars['Int']>;
  registration?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type PlaneInput = {
  name?: Maybe<Scalars['String']>;
  minSlots?: Maybe<Scalars['Int']>;
  maxSlots?: Maybe<Scalars['Int']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  hours?: Maybe<Scalars['Int']>;
  nextMaintenanceHours?: Maybe<Scalars['Int']>;
  registration?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  /** Get dropzone details */
  dropzone: Dropzone;
  /** Get all available dropzones */
  dropzones: DropzoneConnection;
  /** Get ticket addons for a dropzone */
  extras: Extra[];
  /** Available federations */
  federations: Federation[];
  /** Load base64 images as graphql */
  image?: Maybe<Scalars['String']>;
  /** Get all jump types */
  jumpTypes: JumpType[];
  /** Get all licenses for a federation */
  licenses: License[];
  /** Get load by id */
  load: Load;
  /** Get loads */
  loads: LoadConnection;
  /** Get planes from a dropzone */
  planes: Plane[];
  /** Get ticket types for a dropzone */
  ticketTypes: TicketType[];
  userCheckPasswordToken: User;
  userConfirmAccount: User;
};

export type QueryDropzoneArgs = {
  id: Scalars['Int'];
};

export type QueryDropzonesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type QueryExtrasArgs = {
  dropzoneId: Scalars['Int'];
};

export type QueryImageArgs = {
  id: Scalars['Int'];
};

export type QueryJumpTypesArgs = {
  allowedForUserId?: Maybe<Scalars['Int']>;
};

export type QueryLicensesArgs = {
  federationId?: Maybe<Scalars['Int']>;
};

export type QueryLoadArgs = {
  id: Scalars['Int'];
};

export type QueryLoadsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  dropzoneId: Scalars['Int'];
  earliestTimestamp?: Maybe<Scalars['Int']>;
};

export type QueryPlanesArgs = {
  dropzoneId: Scalars['Int'];
};

export type QueryTicketTypesArgs = {
  dropzoneId: Scalars['Int'];
  allowManifestingSelf?: Maybe<Scalars['Boolean']>;
};

export type QueryUserCheckPasswordTokenArgs = {
  resetPasswordToken: Scalars['String'];
  redirectUrl?: Maybe<Scalars['String']>;
};

export type QueryUserConfirmAccountArgs = {
  confirmationToken: Scalars['String'];
  redirectUrl: Scalars['String'];
};

/** Autogenerated input type of RevokePermission */
export type RevokePermissionInput = {
  permission: Permission;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of RevokePermission */
export type RevokePermissionPayload = {
  __typename?: 'RevokePermissionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzoneUser?: Maybe<DropzoneUser>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
};

export type Rig = AnyResource & {
  __typename?: 'Rig';
  canopySize?: Maybe<Scalars['Int']>;
  createdAt: Scalars['Int'];
  dropzone?: Maybe<Dropzone>;
  id: Scalars['ID'];
  isPublic: Scalars['Boolean'];
  maintainedAt?: Maybe<Scalars['Int']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  packValue?: Maybe<Scalars['Int']>;
  repackExpiresAt?: Maybe<Scalars['Int']>;
  rigType?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
  user?: Maybe<User>;
};

export type RigInput = {
  name?: Maybe<Scalars['String']>;
  make?: Maybe<Scalars['String']>;
  model?: Maybe<Scalars['String']>;
  serial?: Maybe<Scalars['String']>;
  packValue?: Maybe<Scalars['Int']>;
  repackExpiresAt?: Maybe<Scalars['Int']>;
  maintainedAt?: Maybe<Scalars['Int']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Int']>;
  /** student / sport / tandem */
  rigType?: Maybe<Scalars['String']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  canopySize?: Maybe<Scalars['Int']>;
};

export type RigInspection = {
  __typename?: 'RigInspection';
  createdAt: Scalars['Int'];
  definition: Scalars['String'];
  dropzoneUser: DropzoneUser;
  formTemplate: FormTemplate;
  id: Scalars['ID'];
  inspectedBy: DropzoneUser;
  isOk: Scalars['Boolean'];
  rig?: Maybe<Rig>;
  updatedAt: Scalars['Int'];
};

export type RigInspectionInput = {
  dropzoneId?: Maybe<Scalars['Int']>;
  rigId?: Maybe<Scalars['Int']>;
  definition?: Maybe<Scalars['String']>;
  isOk?: Maybe<Scalars['Boolean']>;
};

export type Slot = AnyResource & {
  __typename?: 'Slot';
  createdAt: Scalars['Int'];
  dropzoneUser?: Maybe<DropzoneUser>;
  exitWeight: Scalars['Int'];
  extras?: Maybe<Extra[]>;
  groupNumber: Scalars['Int'];
  id: Scalars['ID'];
  jumpType?: Maybe<JumpType>;
  load: Load;
  passengerExitWeight?: Maybe<Scalars['Float']>;
  passengerName?: Maybe<Scalars['String']>;
  rig?: Maybe<Rig>;
  ticketType?: Maybe<TicketType>;
  user?: Maybe<User>;
  wingLoading?: Maybe<Scalars['Float']>;
};

export type SlotInput = {
  dropzoneUserId?: Maybe<Scalars['Int']>;
  ticketTypeId?: Maybe<Scalars['Int']>;
  jumpTypeId?: Maybe<Scalars['Int']>;
  loadId?: Maybe<Scalars['Int']>;
  rigId?: Maybe<Scalars['Int']>;
  exitWeight?: Maybe<Scalars['Float']>;
  extraIds?: Maybe<Scalars['Int'][]>;
  userGroup?: Maybe<SlotUser[]>;
  passengerName?: Maybe<Scalars['String']>;
  passengerExitWeight?: Maybe<Scalars['Float']>;
};

export type SlotUser = {
  id: Scalars['Int'];
  exitWeight: Scalars['Float'];
  rigId?: Maybe<Scalars['Int']>;
  passengerName?: Maybe<Scalars['String']>;
  passengerExitWeight?: Maybe<Scalars['Float']>;
};

export type TicketType = AnyResource & {
  __typename?: 'TicketType';
  allowManifestingSelf?: Maybe<Scalars['Boolean']>;
  altitude?: Maybe<Scalars['Int']>;
  cost?: Maybe<Scalars['Float']>;
  createdAt: Scalars['Int'];
  currency?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
  extras: Extra[];
  id: Scalars['ID'];
  isTandem?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

export type TicketTypeInput = {
  currency?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  altitude?: Maybe<Scalars['Int']>;
  allowManifestingSelf?: Maybe<Scalars['Boolean']>;
  dropzoneId?: Maybe<Scalars['Int']>;
  isTandem?: Maybe<Scalars['Boolean']>;
  extraIds?: Maybe<Scalars['Int'][]>;
};

export type Transaction = AnyResource & {
  __typename?: 'Transaction';
  amount: Scalars['Float'];
  createdAt: Scalars['Int'];
  dropzoneUser: DropzoneUser;
  id: Scalars['ID'];
  message?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
  updatedAt: Scalars['Int'];
};

/** The connection type for Transaction. */
export type TransactionConnection = {
  __typename?: 'TransactionConnection';
  /** A list of edges. */
  edges?: Maybe<Maybe<TransactionEdge>[]>;
  /** A list of nodes. */
  nodes?: Maybe<Maybe<Transaction>[]>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type TransactionEdge = {
  __typename?: 'TransactionEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<Transaction>;
};

export type TransactionInput = {
  status?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  dropzoneUserId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
};

/** Autogenerated input type of UpdateDropzone */
export type UpdateDropzoneInput = {
  id: Scalars['Int'];
  attributes: DropzoneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDropzone */
export type UpdateDropzonePayload = {
  __typename?: 'UpdateDropzonePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzone?: Maybe<Dropzone>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
};

/** Autogenerated input type of UpdateDropzoneUser */
export type UpdateDropzoneUserInput = {
  attributes: DropzoneUserInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateDropzoneUser */
export type UpdateDropzoneUserPayload = {
  __typename?: 'UpdateDropzoneUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  dropzoneUser?: Maybe<DropzoneUser>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
};

/** Autogenerated input type of UpdateExtra */
export type UpdateExtraInput = {
  attributes: ExtraInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateExtra */
export type UpdateExtraPayload = {
  __typename?: 'UpdateExtraPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  extra?: Maybe<Extra>;
  fieldErrors?: Maybe<FieldError[]>;
};

/** Autogenerated input type of UpdateFormTemplate */
export type UpdateFormTemplateInput = {
  attributes: FormTemplateInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateFormTemplate */
export type UpdateFormTemplatePayload = {
  __typename?: 'UpdateFormTemplatePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  formTemplate?: Maybe<FormTemplate>;
};

/** Autogenerated input type of UpdateLoad */
export type UpdateLoadInput = {
  id: Scalars['Int'];
  attributes: LoadInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateLoad */
export type UpdateLoadPayload = {
  __typename?: 'UpdateLoadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  load?: Maybe<Load>;
};

/** Autogenerated input type of UpdateNotification */
export type UpdateNotificationInput = {
  attributes: NotificationInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateNotification */
export type UpdateNotificationPayload = {
  __typename?: 'UpdateNotificationPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  notification?: Maybe<Notification>;
};

/** Autogenerated input type of UpdatePlane */
export type UpdatePlaneInput = {
  id: Scalars['Int'];
  attributes: PlaneInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePlane */
export type UpdatePlanePayload = {
  __typename?: 'UpdatePlanePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  plane?: Maybe<Plane>;
};

/** Autogenerated input type of UpdateRig */
export type UpdateRigInput = {
  attributes: RigInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateRigInspection */
export type UpdateRigInspectionInput = {
  attributes: RigInspectionInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRigInspection */
export type UpdateRigInspectionPayload = {
  __typename?: 'UpdateRigInspectionPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  rigInspection?: Maybe<RigInspection>;
};

/** Autogenerated return type of UpdateRig */
export type UpdateRigPayload = {
  __typename?: 'UpdateRigPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  rig?: Maybe<Rig>;
};

/** Autogenerated input type of UpdateRole */
export type UpdateRoleInput = {
  permission: Scalars['String'];
  enabled: Scalars['Boolean'];
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateRole */
export type UpdateRolePayload = {
  __typename?: 'UpdateRolePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  role?: Maybe<UserRole>;
};

/** Autogenerated input type of UpdateSlot */
export type UpdateSlotInput = {
  id: Scalars['Int'];
  attributes: SlotInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSlot */
export type UpdateSlotPayload = {
  __typename?: 'UpdateSlotPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  slot?: Maybe<Slot>;
};

/** Autogenerated input type of UpdateTicket */
export type UpdateTicketInput = {
  id: Scalars['Int'];
  attributes: TicketTypeInput;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateTicket */
export type UpdateTicketPayload = {
  __typename?: 'UpdateTicketPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  ticketType?: Maybe<TicketType>;
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  attributes: UserInput;
  id?: Maybe<Scalars['Int']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
  __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
  user?: Maybe<User>;
};

export type User = AnyResource & {
  __typename?: 'User';
  createdAt: Scalars['Int'];
  dropzoneUsers?: Maybe<DropzoneUser[]>;
  email?: Maybe<Scalars['String']>;
  exitWeight?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  image?: Maybe<Scalars['String']>;
  jumpTypes?: Maybe<JumpType[]>;
  license?: Maybe<License>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  rigs?: Maybe<Rig[]>;
  updatedAt: Scalars['Int'];
};

export type UserInput = {
  name?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  pushToken?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  licenseId?: Maybe<Scalars['Int']>;
  exitWeight?: Maybe<Scalars['Float']>;
};

/** Autogenerated return type of UserLogin */
export type UserLoginPayload = {
  __typename?: 'UserLoginPayload';
  authenticatable: User;
  credentials: Credential;
};

/** Autogenerated return type of UserLogout */
export type UserLogoutPayload = {
  __typename?: 'UserLogoutPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserResendConfirmation */
export type UserResendConfirmationPayload = {
  __typename?: 'UserResendConfirmationPayload';
  message: Scalars['String'];
};

export type UserRole = {
  __typename?: 'UserRole';
  createdAt: Scalars['Int'];
  dropzone: Dropzone;
  dropzoneId: Scalars['Int'];
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  permissions: Scalars['String'][];
  updatedAt: Scalars['Int'];
};

/** Autogenerated return type of UserSendPasswordReset */
export type UserSendPasswordResetPayload = {
  __typename?: 'UserSendPasswordResetPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of UserSendPasswordResetWithToken */
export type UserSendPasswordResetWithTokenPayload = {
  __typename?: 'UserSendPasswordResetWithTokenPayload';
  message: Scalars['String'];
};

/** Autogenerated return type of UserSignUp */
export type UserSignUpPayload = {
  __typename?: 'UserSignUpPayload';
  authenticatable?: Maybe<User>;
  /** Authentication credentials. Null if after signUp resource is not active for authentication (e.g. Email confirmation required). */
  credentials?: Maybe<Credential>;
  errors?: Maybe<Scalars['String'][]>;
  fieldErrors?: Maybe<FieldError[]>;
};

/** Autogenerated return type of UserUpdatePassword */
export type UserUpdatePasswordPayload = {
  __typename?: 'UserUpdatePasswordPayload';
  authenticatable: User;
};

/** Autogenerated return type of UserUpdatePasswordWithToken */
export type UserUpdatePasswordWithTokenPayload = {
  __typename?: 'UserUpdatePasswordWithTokenPayload';
  authenticatable: User;
  /** Authentication credentials. Resource must be signed_in for credentials to be returned. */
  credentials?: Maybe<Credential>;
};

export type WeatherCondition = {
  __typename?: 'WeatherCondition';
  createdAt: Scalars['Int'];
  exitSpotMiles?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  jumpRun?: Maybe<Scalars['Int']>;
  offsetDirection?: Maybe<Scalars['Int']>;
  offsetMiles?: Maybe<Scalars['Int']>;
  temperature?: Maybe<Scalars['Int']>;
  updatedAt: Scalars['Int'];
  winds?: Maybe<Wind[]>;
};

export type WeatherConditionInput = {
  winds?: Maybe<Scalars['String']>;
  temperature?: Maybe<Scalars['Int']>;
  jumpRun?: Maybe<Scalars['Int']>;
  exitSpotMiles?: Maybe<Scalars['Int']>;
  offsetMiles?: Maybe<Scalars['Int']>;
  offsetDirection?: Maybe<Scalars['String']>;
  dropzoneId: Scalars['Int'];
};

export type Wind = {
  __typename?: 'Wind';
  altitude?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  speed?: Maybe<Scalars['String']>;
};
